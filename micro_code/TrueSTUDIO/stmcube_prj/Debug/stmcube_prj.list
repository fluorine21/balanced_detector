
stmcube_prj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000040b8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08004178  08004178  00014178  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08004208  08004208  00014208  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08004210  08004210  00014210  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08004214  08004214  00014214  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  08004218  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000051c  2000000c  08004224  0002000c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000528  08004224  00020528  2**0
                  ALLOC
  9 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 10 .debug_line   00004472  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   00009202  00000000  00000000  000244a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00001b45  00000000  00000000  0002d6a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000900  00000000  00000000  0002f1f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000838  00000000  00000000  0002faf0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002a69  00000000  00000000  00030328  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00032d91  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001ec0  00000000  00000000  00032e10  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004160 	.word	0x08004160

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08004160 	.word	0x08004160

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	1c08      	adds	r0, r1, #0
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f830 	bl	80002b4 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4647      	mov	r7, r8
 8000266:	0415      	lsls	r5, r2, #16
 8000268:	0c2d      	lsrs	r5, r5, #16
 800026a:	002e      	movs	r6, r5
 800026c:	b580      	push	{r7, lr}
 800026e:	0407      	lsls	r7, r0, #16
 8000270:	0c14      	lsrs	r4, r2, #16
 8000272:	0c3f      	lsrs	r7, r7, #16
 8000274:	4699      	mov	r9, r3
 8000276:	0c03      	lsrs	r3, r0, #16
 8000278:	437e      	muls	r6, r7
 800027a:	435d      	muls	r5, r3
 800027c:	4367      	muls	r7, r4
 800027e:	4363      	muls	r3, r4
 8000280:	197f      	adds	r7, r7, r5
 8000282:	0c34      	lsrs	r4, r6, #16
 8000284:	19e4      	adds	r4, r4, r7
 8000286:	469c      	mov	ip, r3
 8000288:	42a5      	cmp	r5, r4
 800028a:	d903      	bls.n	8000294 <__aeabi_lmul+0x34>
 800028c:	2380      	movs	r3, #128	; 0x80
 800028e:	025b      	lsls	r3, r3, #9
 8000290:	4698      	mov	r8, r3
 8000292:	44c4      	add	ip, r8
 8000294:	464b      	mov	r3, r9
 8000296:	4351      	muls	r1, r2
 8000298:	4343      	muls	r3, r0
 800029a:	0436      	lsls	r6, r6, #16
 800029c:	0c36      	lsrs	r6, r6, #16
 800029e:	0c25      	lsrs	r5, r4, #16
 80002a0:	0424      	lsls	r4, r4, #16
 80002a2:	4465      	add	r5, ip
 80002a4:	19a4      	adds	r4, r4, r6
 80002a6:	1859      	adds	r1, r3, r1
 80002a8:	1949      	adds	r1, r1, r5
 80002aa:	0020      	movs	r0, r4
 80002ac:	bc0c      	pop	{r2, r3}
 80002ae:	4690      	mov	r8, r2
 80002b0:	4699      	mov	r9, r3
 80002b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002b4 <__udivmoddi4>:
 80002b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002b6:	4657      	mov	r7, sl
 80002b8:	464e      	mov	r6, r9
 80002ba:	4645      	mov	r5, r8
 80002bc:	46de      	mov	lr, fp
 80002be:	b5e0      	push	{r5, r6, r7, lr}
 80002c0:	0004      	movs	r4, r0
 80002c2:	b083      	sub	sp, #12
 80002c4:	000d      	movs	r5, r1
 80002c6:	4692      	mov	sl, r2
 80002c8:	4699      	mov	r9, r3
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d82f      	bhi.n	800032e <__udivmoddi4+0x7a>
 80002ce:	d02c      	beq.n	800032a <__udivmoddi4+0x76>
 80002d0:	4649      	mov	r1, r9
 80002d2:	4650      	mov	r0, sl
 80002d4:	f000 f8ae 	bl	8000434 <__clzdi2>
 80002d8:	0029      	movs	r1, r5
 80002da:	0006      	movs	r6, r0
 80002dc:	0020      	movs	r0, r4
 80002de:	f000 f8a9 	bl	8000434 <__clzdi2>
 80002e2:	1a33      	subs	r3, r6, r0
 80002e4:	4698      	mov	r8, r3
 80002e6:	3b20      	subs	r3, #32
 80002e8:	469b      	mov	fp, r3
 80002ea:	d500      	bpl.n	80002ee <__udivmoddi4+0x3a>
 80002ec:	e074      	b.n	80003d8 <__udivmoddi4+0x124>
 80002ee:	4653      	mov	r3, sl
 80002f0:	465a      	mov	r2, fp
 80002f2:	4093      	lsls	r3, r2
 80002f4:	001f      	movs	r7, r3
 80002f6:	4653      	mov	r3, sl
 80002f8:	4642      	mov	r2, r8
 80002fa:	4093      	lsls	r3, r2
 80002fc:	001e      	movs	r6, r3
 80002fe:	42af      	cmp	r7, r5
 8000300:	d829      	bhi.n	8000356 <__udivmoddi4+0xa2>
 8000302:	d026      	beq.n	8000352 <__udivmoddi4+0x9e>
 8000304:	465b      	mov	r3, fp
 8000306:	1ba4      	subs	r4, r4, r6
 8000308:	41bd      	sbcs	r5, r7
 800030a:	2b00      	cmp	r3, #0
 800030c:	da00      	bge.n	8000310 <__udivmoddi4+0x5c>
 800030e:	e079      	b.n	8000404 <__udivmoddi4+0x150>
 8000310:	2200      	movs	r2, #0
 8000312:	2300      	movs	r3, #0
 8000314:	9200      	str	r2, [sp, #0]
 8000316:	9301      	str	r3, [sp, #4]
 8000318:	2301      	movs	r3, #1
 800031a:	465a      	mov	r2, fp
 800031c:	4093      	lsls	r3, r2
 800031e:	9301      	str	r3, [sp, #4]
 8000320:	2301      	movs	r3, #1
 8000322:	4642      	mov	r2, r8
 8000324:	4093      	lsls	r3, r2
 8000326:	9300      	str	r3, [sp, #0]
 8000328:	e019      	b.n	800035e <__udivmoddi4+0xaa>
 800032a:	4282      	cmp	r2, r0
 800032c:	d9d0      	bls.n	80002d0 <__udivmoddi4+0x1c>
 800032e:	2200      	movs	r2, #0
 8000330:	2300      	movs	r3, #0
 8000332:	9200      	str	r2, [sp, #0]
 8000334:	9301      	str	r3, [sp, #4]
 8000336:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000338:	2b00      	cmp	r3, #0
 800033a:	d001      	beq.n	8000340 <__udivmoddi4+0x8c>
 800033c:	601c      	str	r4, [r3, #0]
 800033e:	605d      	str	r5, [r3, #4]
 8000340:	9800      	ldr	r0, [sp, #0]
 8000342:	9901      	ldr	r1, [sp, #4]
 8000344:	b003      	add	sp, #12
 8000346:	bc3c      	pop	{r2, r3, r4, r5}
 8000348:	4690      	mov	r8, r2
 800034a:	4699      	mov	r9, r3
 800034c:	46a2      	mov	sl, r4
 800034e:	46ab      	mov	fp, r5
 8000350:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000352:	42a3      	cmp	r3, r4
 8000354:	d9d6      	bls.n	8000304 <__udivmoddi4+0x50>
 8000356:	2200      	movs	r2, #0
 8000358:	2300      	movs	r3, #0
 800035a:	9200      	str	r2, [sp, #0]
 800035c:	9301      	str	r3, [sp, #4]
 800035e:	4643      	mov	r3, r8
 8000360:	2b00      	cmp	r3, #0
 8000362:	d0e8      	beq.n	8000336 <__udivmoddi4+0x82>
 8000364:	07fb      	lsls	r3, r7, #31
 8000366:	0872      	lsrs	r2, r6, #1
 8000368:	431a      	orrs	r2, r3
 800036a:	4646      	mov	r6, r8
 800036c:	087b      	lsrs	r3, r7, #1
 800036e:	e00e      	b.n	800038e <__udivmoddi4+0xda>
 8000370:	42ab      	cmp	r3, r5
 8000372:	d101      	bne.n	8000378 <__udivmoddi4+0xc4>
 8000374:	42a2      	cmp	r2, r4
 8000376:	d80c      	bhi.n	8000392 <__udivmoddi4+0xde>
 8000378:	1aa4      	subs	r4, r4, r2
 800037a:	419d      	sbcs	r5, r3
 800037c:	2001      	movs	r0, #1
 800037e:	1924      	adds	r4, r4, r4
 8000380:	416d      	adcs	r5, r5
 8000382:	2100      	movs	r1, #0
 8000384:	3e01      	subs	r6, #1
 8000386:	1824      	adds	r4, r4, r0
 8000388:	414d      	adcs	r5, r1
 800038a:	2e00      	cmp	r6, #0
 800038c:	d006      	beq.n	800039c <__udivmoddi4+0xe8>
 800038e:	42ab      	cmp	r3, r5
 8000390:	d9ee      	bls.n	8000370 <__udivmoddi4+0xbc>
 8000392:	3e01      	subs	r6, #1
 8000394:	1924      	adds	r4, r4, r4
 8000396:	416d      	adcs	r5, r5
 8000398:	2e00      	cmp	r6, #0
 800039a:	d1f8      	bne.n	800038e <__udivmoddi4+0xda>
 800039c:	465b      	mov	r3, fp
 800039e:	9800      	ldr	r0, [sp, #0]
 80003a0:	9901      	ldr	r1, [sp, #4]
 80003a2:	1900      	adds	r0, r0, r4
 80003a4:	4169      	adcs	r1, r5
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	db22      	blt.n	80003f0 <__udivmoddi4+0x13c>
 80003aa:	002b      	movs	r3, r5
 80003ac:	465a      	mov	r2, fp
 80003ae:	40d3      	lsrs	r3, r2
 80003b0:	002a      	movs	r2, r5
 80003b2:	4644      	mov	r4, r8
 80003b4:	40e2      	lsrs	r2, r4
 80003b6:	001c      	movs	r4, r3
 80003b8:	465b      	mov	r3, fp
 80003ba:	0015      	movs	r5, r2
 80003bc:	2b00      	cmp	r3, #0
 80003be:	db2c      	blt.n	800041a <__udivmoddi4+0x166>
 80003c0:	0026      	movs	r6, r4
 80003c2:	409e      	lsls	r6, r3
 80003c4:	0033      	movs	r3, r6
 80003c6:	0026      	movs	r6, r4
 80003c8:	4647      	mov	r7, r8
 80003ca:	40be      	lsls	r6, r7
 80003cc:	0032      	movs	r2, r6
 80003ce:	1a80      	subs	r0, r0, r2
 80003d0:	4199      	sbcs	r1, r3
 80003d2:	9000      	str	r0, [sp, #0]
 80003d4:	9101      	str	r1, [sp, #4]
 80003d6:	e7ae      	b.n	8000336 <__udivmoddi4+0x82>
 80003d8:	4642      	mov	r2, r8
 80003da:	2320      	movs	r3, #32
 80003dc:	1a9b      	subs	r3, r3, r2
 80003de:	4652      	mov	r2, sl
 80003e0:	40da      	lsrs	r2, r3
 80003e2:	4641      	mov	r1, r8
 80003e4:	0013      	movs	r3, r2
 80003e6:	464a      	mov	r2, r9
 80003e8:	408a      	lsls	r2, r1
 80003ea:	0017      	movs	r7, r2
 80003ec:	431f      	orrs	r7, r3
 80003ee:	e782      	b.n	80002f6 <__udivmoddi4+0x42>
 80003f0:	4642      	mov	r2, r8
 80003f2:	2320      	movs	r3, #32
 80003f4:	1a9b      	subs	r3, r3, r2
 80003f6:	002a      	movs	r2, r5
 80003f8:	4646      	mov	r6, r8
 80003fa:	409a      	lsls	r2, r3
 80003fc:	0023      	movs	r3, r4
 80003fe:	40f3      	lsrs	r3, r6
 8000400:	4313      	orrs	r3, r2
 8000402:	e7d5      	b.n	80003b0 <__udivmoddi4+0xfc>
 8000404:	4642      	mov	r2, r8
 8000406:	2320      	movs	r3, #32
 8000408:	2100      	movs	r1, #0
 800040a:	1a9b      	subs	r3, r3, r2
 800040c:	2200      	movs	r2, #0
 800040e:	9100      	str	r1, [sp, #0]
 8000410:	9201      	str	r2, [sp, #4]
 8000412:	2201      	movs	r2, #1
 8000414:	40da      	lsrs	r2, r3
 8000416:	9201      	str	r2, [sp, #4]
 8000418:	e782      	b.n	8000320 <__udivmoddi4+0x6c>
 800041a:	4642      	mov	r2, r8
 800041c:	2320      	movs	r3, #32
 800041e:	0026      	movs	r6, r4
 8000420:	1a9b      	subs	r3, r3, r2
 8000422:	40de      	lsrs	r6, r3
 8000424:	002f      	movs	r7, r5
 8000426:	46b4      	mov	ip, r6
 8000428:	4097      	lsls	r7, r2
 800042a:	4666      	mov	r6, ip
 800042c:	003b      	movs	r3, r7
 800042e:	4333      	orrs	r3, r6
 8000430:	e7c9      	b.n	80003c6 <__udivmoddi4+0x112>
 8000432:	46c0      	nop			; (mov r8, r8)

08000434 <__clzdi2>:
 8000434:	b510      	push	{r4, lr}
 8000436:	2900      	cmp	r1, #0
 8000438:	d103      	bne.n	8000442 <__clzdi2+0xe>
 800043a:	f000 f807 	bl	800044c <__clzsi2>
 800043e:	3020      	adds	r0, #32
 8000440:	e002      	b.n	8000448 <__clzdi2+0x14>
 8000442:	1c08      	adds	r0, r1, #0
 8000444:	f000 f802 	bl	800044c <__clzsi2>
 8000448:	bd10      	pop	{r4, pc}
 800044a:	46c0      	nop			; (mov r8, r8)

0800044c <__clzsi2>:
 800044c:	211c      	movs	r1, #28
 800044e:	2301      	movs	r3, #1
 8000450:	041b      	lsls	r3, r3, #16
 8000452:	4298      	cmp	r0, r3
 8000454:	d301      	bcc.n	800045a <__clzsi2+0xe>
 8000456:	0c00      	lsrs	r0, r0, #16
 8000458:	3910      	subs	r1, #16
 800045a:	0a1b      	lsrs	r3, r3, #8
 800045c:	4298      	cmp	r0, r3
 800045e:	d301      	bcc.n	8000464 <__clzsi2+0x18>
 8000460:	0a00      	lsrs	r0, r0, #8
 8000462:	3908      	subs	r1, #8
 8000464:	091b      	lsrs	r3, r3, #4
 8000466:	4298      	cmp	r0, r3
 8000468:	d301      	bcc.n	800046e <__clzsi2+0x22>
 800046a:	0900      	lsrs	r0, r0, #4
 800046c:	3904      	subs	r1, #4
 800046e:	a202      	add	r2, pc, #8	; (adr r2, 8000478 <__clzsi2+0x2c>)
 8000470:	5c10      	ldrb	r0, [r2, r0]
 8000472:	1840      	adds	r0, r0, r1
 8000474:	4770      	bx	lr
 8000476:	46c0      	nop			; (mov r8, r8)
 8000478:	02020304 	.word	0x02020304
 800047c:	01010101 	.word	0x01010101
	...

08000488 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000488:	480d      	ldr	r0, [pc, #52]	; (80004c0 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800048a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800048c:	480d      	ldr	r0, [pc, #52]	; (80004c4 <LoopForever+0x6>)
  ldr r1, =_edata
 800048e:	490e      	ldr	r1, [pc, #56]	; (80004c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000490:	4a0e      	ldr	r2, [pc, #56]	; (80004cc <LoopForever+0xe>)
  movs r3, #0
 8000492:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000494:	e002      	b.n	800049c <LoopCopyDataInit>

08000496 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000496:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000498:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800049a:	3304      	adds	r3, #4

0800049c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800049c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800049e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004a0:	d3f9      	bcc.n	8000496 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004a2:	4a0b      	ldr	r2, [pc, #44]	; (80004d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80004a4:	4c0b      	ldr	r4, [pc, #44]	; (80004d4 <LoopForever+0x16>)
  movs r3, #0
 80004a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004a8:	e001      	b.n	80004ae <LoopFillZerobss>

080004aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004ac:	3204      	adds	r2, #4

080004ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004b0:	d3fb      	bcc.n	80004aa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80004b2:	f000 fdd3 	bl	800105c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80004b6:	f003 fe27 	bl	8004108 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80004ba:	f000 fb4b 	bl	8000b54 <main>

080004be <LoopForever>:

LoopForever:
    b LoopForever
 80004be:	e7fe      	b.n	80004be <LoopForever>
   ldr   r0, =_estack
 80004c0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80004c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004c8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80004cc:	08004218 	.word	0x08004218
  ldr r2, =_sbss
 80004d0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80004d4:	20000528 	.word	0x20000528

080004d8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80004d8:	e7fe      	b.n	80004d8 <ADC1_COMP_IRQHandler>
	...

080004dc <handler_entry>:
#define STATE_CMD 1
#define STATE_DATA 2


void handler_entry()
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
	//Initialization
	uart_init();
 80004e0:	f000 fa72 	bl	80009c8 <uart_init>

	state = STATE_PRE;
 80004e4:	4b04      	ldr	r3, [pc, #16]	; (80004f8 <handler_entry+0x1c>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	701a      	strb	r2, [r3, #0]
	cmd_byte = 0;
 80004ea:	4b04      	ldr	r3, [pc, #16]	; (80004fc <handler_entry+0x20>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	701a      	strb	r2, [r3, #0]

	//handle command
	while(1)
	{
		handle_command();
 80004f0:	f000 f806 	bl	8000500 <handle_command>
 80004f4:	e7fc      	b.n	80004f0 <handler_entry+0x14>
 80004f6:	46c0      	nop			; (mov r8, r8)
 80004f8:	20000028 	.word	0x20000028
 80004fc:	20000029 	.word	0x20000029

08000500 <handle_command>:
	}
}


void handle_command()
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
	switch(state)//Do the FSM
 8000504:	4b0a      	ldr	r3, [pc, #40]	; (8000530 <handle_command+0x30>)
 8000506:	781b      	ldrb	r3, [r3, #0]
 8000508:	2b01      	cmp	r3, #1
 800050a:	d007      	beq.n	800051c <handle_command+0x1c>
 800050c:	2b02      	cmp	r3, #2
 800050e:	d008      	beq.n	8000522 <handle_command+0x22>
 8000510:	2b00      	cmp	r3, #0
 8000512:	d000      	beq.n	8000516 <handle_command+0x16>
			break;
		case STATE_DATA:
			state_wait_data();
			break;
	}
	return;
 8000514:	e009      	b.n	800052a <handle_command+0x2a>
			state_wait_preamble();
 8000516:	f000 f80d 	bl	8000534 <state_wait_preamble>
			break;
 800051a:	e005      	b.n	8000528 <handle_command+0x28>
			state_wait_cmd();
 800051c:	f000 f824 	bl	8000568 <state_wait_cmd>
			break;
 8000520:	e002      	b.n	8000528 <handle_command+0x28>
			state_wait_data();
 8000522:	f000 f887 	bl	8000634 <state_wait_data>
			break;
 8000526:	46c0      	nop			; (mov r8, r8)
	return;
 8000528:	46c0      	nop			; (mov r8, r8)
}
 800052a:	46bd      	mov	sp, r7
 800052c:	bd80      	pop	{r7, pc}
 800052e:	46c0      	nop			; (mov r8, r8)
 8000530:	20000028 	.word	0x20000028

08000534 <state_wait_preamble>:


void state_wait_preamble()
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	af00      	add	r7, sp, #0
	//Wait for an incoming byte
	u8 pre_byte;
	//if there is no byte
	if(get_uart_byte(&pre_byte))
 800053a:	1dfb      	adds	r3, r7, #7
 800053c:	0018      	movs	r0, r3
 800053e:	f000 fa95 	bl	8000a6c <get_uart_byte>
 8000542:	1e03      	subs	r3, r0, #0
 8000544:	d108      	bne.n	8000558 <state_wait_preamble+0x24>
	{
		return;//Just try again
	}

	//If the preamble byte is bad
	if(pre_byte != BYTE_PREAMBLE)
 8000546:	1dfb      	adds	r3, r7, #7
 8000548:	781b      	ldrb	r3, [r3, #0]
 800054a:	2baa      	cmp	r3, #170	; 0xaa
 800054c:	d106      	bne.n	800055c <state_wait_preamble+0x28>
	{
		return;//Try again
	}

	//Good preamble byte, move to next state
	state = STATE_CMD;
 800054e:	4b05      	ldr	r3, [pc, #20]	; (8000564 <state_wait_preamble+0x30>)
 8000550:	2201      	movs	r2, #1
 8000552:	701a      	strb	r2, [r3, #0]
	return;
 8000554:	46c0      	nop			; (mov r8, r8)
 8000556:	e002      	b.n	800055e <state_wait_preamble+0x2a>
		return;//Just try again
 8000558:	46c0      	nop			; (mov r8, r8)
 800055a:	e000      	b.n	800055e <state_wait_preamble+0x2a>
		return;//Try again
 800055c:	46c0      	nop			; (mov r8, r8)
}
 800055e:	46bd      	mov	sp, r7
 8000560:	b002      	add	sp, #8
 8000562:	bd80      	pop	{r7, pc}
 8000564:	20000028 	.word	0x20000028

08000568 <state_wait_cmd>:

void state_wait_cmd()
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0
	//Wait for the command byte
	if(get_uart_byte(&cmd_byte))
 800056e:	4b2f      	ldr	r3, [pc, #188]	; (800062c <state_wait_cmd+0xc4>)
 8000570:	0018      	movs	r0, r3
 8000572:	f000 fa7b 	bl	8000a6c <get_uart_byte>
 8000576:	1e03      	subs	r3, r0, #0
 8000578:	d154      	bne.n	8000624 <state_wait_cmd+0xbc>
		return;//abort if nothing available
	}

	//Command byte received, decode command
	//Switch the command
	u8 res = 0;
 800057a:	1dfb      	adds	r3, r7, #7
 800057c:	2200      	movs	r2, #0
 800057e:	701a      	strb	r2, [r3, #0]
	u8 arg = 0;
 8000580:	1dbb      	adds	r3, r7, #6
 8000582:	2200      	movs	r2, #0
 8000584:	701a      	strb	r2, [r3, #0]
	u16 adc_res;
	switch(cmd_byte)
 8000586:	4b29      	ldr	r3, [pc, #164]	; (800062c <state_wait_cmd+0xc4>)
 8000588:	781b      	ldrb	r3, [r3, #0]
 800058a:	2b05      	cmp	r3, #5
 800058c:	d00b      	beq.n	80005a6 <state_wait_cmd+0x3e>
 800058e:	2b06      	cmp	r3, #6
 8000590:	d026      	beq.n	80005e0 <state_wait_cmd+0x78>
 8000592:	2b00      	cmp	r3, #0
 8000594:	d141      	bne.n	800061a <state_wait_cmd+0xb2>
	{

		case CMD_PING:
			//Send the ack and reset the state
			send_uart_byte(&res);
 8000596:	1dfb      	adds	r3, r7, #7
 8000598:	0018      	movs	r0, r3
 800059a:	f000 fa99 	bl	8000ad0 <send_uart_byte>
			state = STATE_PRE;
 800059e:	4b24      	ldr	r3, [pc, #144]	; (8000630 <state_wait_cmd+0xc8>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	701a      	strb	r2, [r3, #0]
			break;
 80005a4:	e03f      	b.n	8000626 <state_wait_cmd+0xbe>

		case CMD_GET_ADC1:
			//Read ADC1's value
			read_adc(0, &adc_res);
 80005a6:	1d3b      	adds	r3, r7, #4
 80005a8:	0019      	movs	r1, r3
 80005aa:	2000      	movs	r0, #0
 80005ac:	f000 f9ba 	bl	8000924 <read_adc>
			//Send it back over uart with msb first
			arg = (adc_res >> 8) & 0xff;
 80005b0:	1d3b      	adds	r3, r7, #4
 80005b2:	881b      	ldrh	r3, [r3, #0]
 80005b4:	0a1b      	lsrs	r3, r3, #8
 80005b6:	b29b      	uxth	r3, r3
 80005b8:	b2da      	uxtb	r2, r3
 80005ba:	1dbb      	adds	r3, r7, #6
 80005bc:	701a      	strb	r2, [r3, #0]
			send_uart_byte(&arg);
 80005be:	1dbb      	adds	r3, r7, #6
 80005c0:	0018      	movs	r0, r3
 80005c2:	f000 fa85 	bl	8000ad0 <send_uart_byte>
			arg = adc_res & 0xff;
 80005c6:	1d3b      	adds	r3, r7, #4
 80005c8:	881b      	ldrh	r3, [r3, #0]
 80005ca:	b2da      	uxtb	r2, r3
 80005cc:	1dbb      	adds	r3, r7, #6
 80005ce:	701a      	strb	r2, [r3, #0]
			send_uart_byte(&arg);
 80005d0:	1dbb      	adds	r3, r7, #6
 80005d2:	0018      	movs	r0, r3
 80005d4:	f000 fa7c 	bl	8000ad0 <send_uart_byte>
			state = STATE_PRE;
 80005d8:	4b15      	ldr	r3, [pc, #84]	; (8000630 <state_wait_cmd+0xc8>)
 80005da:	2200      	movs	r2, #0
 80005dc:	701a      	strb	r2, [r3, #0]
			break;
 80005de:	e022      	b.n	8000626 <state_wait_cmd+0xbe>

		case CMD_GET_ADC2:
			//Read ADC1's value
			read_adc(1, &adc_res);
 80005e0:	1d3b      	adds	r3, r7, #4
 80005e2:	0019      	movs	r1, r3
 80005e4:	2001      	movs	r0, #1
 80005e6:	f000 f99d 	bl	8000924 <read_adc>
			//Send it back over uart with msb first
			arg = (adc_res >> 8) & 0xff;
 80005ea:	1d3b      	adds	r3, r7, #4
 80005ec:	881b      	ldrh	r3, [r3, #0]
 80005ee:	0a1b      	lsrs	r3, r3, #8
 80005f0:	b29b      	uxth	r3, r3
 80005f2:	b2da      	uxtb	r2, r3
 80005f4:	1dbb      	adds	r3, r7, #6
 80005f6:	701a      	strb	r2, [r3, #0]
			send_uart_byte(&arg);
 80005f8:	1dbb      	adds	r3, r7, #6
 80005fa:	0018      	movs	r0, r3
 80005fc:	f000 fa68 	bl	8000ad0 <send_uart_byte>
			arg = adc_res & 0xff;
 8000600:	1d3b      	adds	r3, r7, #4
 8000602:	881b      	ldrh	r3, [r3, #0]
 8000604:	b2da      	uxtb	r2, r3
 8000606:	1dbb      	adds	r3, r7, #6
 8000608:	701a      	strb	r2, [r3, #0]
			send_uart_byte(&arg);
 800060a:	1dbb      	adds	r3, r7, #6
 800060c:	0018      	movs	r0, r3
 800060e:	f000 fa5f 	bl	8000ad0 <send_uart_byte>
			state = STATE_PRE;
 8000612:	4b07      	ldr	r3, [pc, #28]	; (8000630 <state_wait_cmd+0xc8>)
 8000614:	2200      	movs	r2, #0
 8000616:	701a      	strb	r2, [r3, #0]
			break;
 8000618:	e005      	b.n	8000626 <state_wait_cmd+0xbe>

		default:
			//Must be a command that needs additional data
			state = STATE_DATA;
 800061a:	4b05      	ldr	r3, [pc, #20]	; (8000630 <state_wait_cmd+0xc8>)
 800061c:	2202      	movs	r2, #2
 800061e:	701a      	strb	r2, [r3, #0]
			break;
 8000620:	46c0      	nop			; (mov r8, r8)
 8000622:	e000      	b.n	8000626 <state_wait_cmd+0xbe>
		return;//abort if nothing available
 8000624:	46c0      	nop			; (mov r8, r8)

	}



}
 8000626:	46bd      	mov	sp, r7
 8000628:	b002      	add	sp, #8
 800062a:	bd80      	pop	{r7, pc}
 800062c:	20000029 	.word	0x20000029
 8000630:	20000028 	.word	0x20000028

08000634 <state_wait_data>:

void state_wait_data()
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0
	//Wait for the argument byte
	u8 arg = 0;
 800063a:	1dfb      	adds	r3, r7, #7
 800063c:	2200      	movs	r2, #0
 800063e:	701a      	strb	r2, [r3, #0]
	if(get_uart_byte(&arg)){return;}
 8000640:	1dfb      	adds	r3, r7, #7
 8000642:	0018      	movs	r0, r3
 8000644:	f000 fa12 	bl	8000a6c <get_uart_byte>
 8000648:	1e03      	subs	r3, r0, #0
 800064a:	d133      	bne.n	80006b4 <state_wait_data+0x80>

	//Do something based on the command
	switch(cmd_byte)
 800064c:	4b1b      	ldr	r3, [pc, #108]	; (80006bc <state_wait_data+0x88>)
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	2b08      	cmp	r3, #8
 8000652:	d82a      	bhi.n	80006aa <state_wait_data+0x76>
 8000654:	009a      	lsls	r2, r3, #2
 8000656:	4b1a      	ldr	r3, [pc, #104]	; (80006c0 <state_wait_data+0x8c>)
 8000658:	18d3      	adds	r3, r2, r3
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	469f      	mov	pc, r3
	{
		case CMD_SET_LEFT:
			//Use it to set the left attenuation
			set_left_attenuation(arg);
 800065e:	1dfb      	adds	r3, r7, #7
 8000660:	781b      	ldrb	r3, [r3, #0]
 8000662:	0018      	movs	r0, r3
 8000664:	f000 f830 	bl	80006c8 <set_left_attenuation>
			break;
 8000668:	e01f      	b.n	80006aa <state_wait_data+0x76>

		case CMD_SET_RIGHT:
			//Use it to set the right attenuation
			set_right_attenuation(arg);
 800066a:	1dfb      	adds	r3, r7, #7
 800066c:	781b      	ldrb	r3, [r3, #0]
 800066e:	0018      	movs	r0, r3
 8000670:	f000 f878 	bl	8000764 <set_right_attenuation>
			break;
 8000674:	e019      	b.n	80006aa <state_wait_data+0x76>

		case CMD_SET_INPUT_GAIN:
			//Use it to set the input gain
			set_diff_gain(arg);
 8000676:	1dfb      	adds	r3, r7, #7
 8000678:	781b      	ldrb	r3, [r3, #0]
 800067a:	0018      	movs	r0, r3
 800067c:	f000 f8c4 	bl	8000808 <set_diff_gain>
			break;
 8000680:	e013      	b.n	80006aa <state_wait_data+0x76>

		case CMD_SET_OUTPUT_GAIN:
			//Use it to set the output gain (15dB or 0dB)
			set_amp_enable(arg);
 8000682:	1dfb      	adds	r3, r7, #7
 8000684:	781b      	ldrb	r3, [r3, #0]
 8000686:	0018      	movs	r0, r3
 8000688:	f000 f91d 	bl	80008c6 <set_amp_enable>
			break;
 800068c:	e00d      	b.n	80006aa <state_wait_data+0x76>
		case CMD_SET_LED1:
			//set the LED state
			set_led(0, arg);
 800068e:	1dfb      	adds	r3, r7, #7
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	0019      	movs	r1, r3
 8000694:	2000      	movs	r0, #0
 8000696:	f000 fa31 	bl	8000afc <set_led>
			break;
 800069a:	e006      	b.n	80006aa <state_wait_data+0x76>

		case CMD_SET_LED2:
			//set the LED state
			set_led(1, arg);
 800069c:	1dfb      	adds	r3, r7, #7
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	0019      	movs	r1, r3
 80006a2:	2001      	movs	r0, #1
 80006a4:	f000 fa2a 	bl	8000afc <set_led>
			break;
 80006a8:	46c0      	nop			; (mov r8, r8)

	}
	//We've successfully executed the command so we can go back to waiting for the preamble
	state = STATE_PRE;
 80006aa:	4b06      	ldr	r3, [pc, #24]	; (80006c4 <state_wait_data+0x90>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	701a      	strb	r2, [r3, #0]
	return;
 80006b0:	46c0      	nop			; (mov r8, r8)
 80006b2:	e000      	b.n	80006b6 <state_wait_data+0x82>
	if(get_uart_byte(&arg)){return;}
 80006b4:	46c0      	nop			; (mov r8, r8)

}
 80006b6:	46bd      	mov	sp, r7
 80006b8:	b002      	add	sp, #8
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	20000029 	.word	0x20000029
 80006c0:	08004178 	.word	0x08004178
 80006c4:	20000028 	.word	0x20000028

080006c8 <set_left_attenuation>:
//Declare the adc instance and uart
extern ADC_HandleTypeDef hadc;
extern UART_HandleTypeDef huart2;

void set_left_attenuation(u8 val)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	0002      	movs	r2, r0
 80006d0:	1dfb      	adds	r3, r7, #7
 80006d2:	701a      	strb	r2, [r3, #0]
	//Set each bit one at a time by selecting the relevant bit in val
	HAL_GPIO_WritePin(V5L_GPIO_Port, V5L_Pin, val & (1<<4) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80006d4:	1dfb      	adds	r3, r7, #7
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	2210      	movs	r2, #16
 80006da:	4013      	ands	r3, r2
 80006dc:	1e5a      	subs	r2, r3, #1
 80006de:	4193      	sbcs	r3, r2
 80006e0:	b2db      	uxtb	r3, r3
 80006e2:	001a      	movs	r2, r3
 80006e4:	4b1e      	ldr	r3, [pc, #120]	; (8000760 <set_left_attenuation+0x98>)
 80006e6:	2180      	movs	r1, #128	; 0x80
 80006e8:	0018      	movs	r0, r3
 80006ea:	f001 fc83 	bl	8001ff4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(V4L_GPIO_Port, V4L_Pin, val & (1<<3) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80006ee:	1dfb      	adds	r3, r7, #7
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	2208      	movs	r2, #8
 80006f4:	4013      	ands	r3, r2
 80006f6:	1e5a      	subs	r2, r3, #1
 80006f8:	4193      	sbcs	r3, r2
 80006fa:	b2db      	uxtb	r3, r3
 80006fc:	001a      	movs	r2, r3
 80006fe:	4b18      	ldr	r3, [pc, #96]	; (8000760 <set_left_attenuation+0x98>)
 8000700:	2108      	movs	r1, #8
 8000702:	0018      	movs	r0, r3
 8000704:	f001 fc76 	bl	8001ff4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(V3L_GPIO_Port, V3L_Pin, val & (1<<2) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000708:	1dfb      	adds	r3, r7, #7
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	2204      	movs	r2, #4
 800070e:	4013      	ands	r3, r2
 8000710:	1e5a      	subs	r2, r3, #1
 8000712:	4193      	sbcs	r3, r2
 8000714:	b2db      	uxtb	r3, r3
 8000716:	001a      	movs	r2, r3
 8000718:	4b11      	ldr	r3, [pc, #68]	; (8000760 <set_left_attenuation+0x98>)
 800071a:	2110      	movs	r1, #16
 800071c:	0018      	movs	r0, r3
 800071e:	f001 fc69 	bl	8001ff4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(V2L_GPIO_Port, V2L_Pin, val & (1<<1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000722:	1dfb      	adds	r3, r7, #7
 8000724:	781b      	ldrb	r3, [r3, #0]
 8000726:	2202      	movs	r2, #2
 8000728:	4013      	ands	r3, r2
 800072a:	1e5a      	subs	r2, r3, #1
 800072c:	4193      	sbcs	r3, r2
 800072e:	b2db      	uxtb	r3, r3
 8000730:	001a      	movs	r2, r3
 8000732:	4b0b      	ldr	r3, [pc, #44]	; (8000760 <set_left_attenuation+0x98>)
 8000734:	2140      	movs	r1, #64	; 0x40
 8000736:	0018      	movs	r0, r3
 8000738:	f001 fc5c 	bl	8001ff4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(V1L_GPIO_Port, V1L_Pin, val & (1<<0) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800073c:	1dfb      	adds	r3, r7, #7
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	2201      	movs	r2, #1
 8000742:	4013      	ands	r3, r2
 8000744:	1e5a      	subs	r2, r3, #1
 8000746:	4193      	sbcs	r3, r2
 8000748:	b2db      	uxtb	r3, r3
 800074a:	001a      	movs	r2, r3
 800074c:	4b04      	ldr	r3, [pc, #16]	; (8000760 <set_left_attenuation+0x98>)
 800074e:	2120      	movs	r1, #32
 8000750:	0018      	movs	r0, r3
 8000752:	f001 fc4f 	bl	8001ff4 <HAL_GPIO_WritePin>
}
 8000756:	46c0      	nop			; (mov r8, r8)
 8000758:	46bd      	mov	sp, r7
 800075a:	b002      	add	sp, #8
 800075c:	bd80      	pop	{r7, pc}
 800075e:	46c0      	nop			; (mov r8, r8)
 8000760:	50000400 	.word	0x50000400

08000764 <set_right_attenuation>:

void set_right_attenuation(u8 val)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
 800076a:	0002      	movs	r2, r0
 800076c:	1dfb      	adds	r3, r7, #7
 800076e:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(V5R_GPIO_Port, V5R_Pin, val & (1<<4) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000770:	1dfb      	adds	r3, r7, #7
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	2210      	movs	r2, #16
 8000776:	4013      	ands	r3, r2
 8000778:	1e5a      	subs	r2, r3, #1
 800077a:	4193      	sbcs	r3, r2
 800077c:	b2db      	uxtb	r3, r3
 800077e:	001a      	movs	r2, r3
 8000780:	23a0      	movs	r3, #160	; 0xa0
 8000782:	05db      	lsls	r3, r3, #23
 8000784:	2110      	movs	r1, #16
 8000786:	0018      	movs	r0, r3
 8000788:	f001 fc34 	bl	8001ff4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(V4R_GPIO_Port, V4R_Pin, val & (1<<3) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800078c:	1dfb      	adds	r3, r7, #7
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	2208      	movs	r2, #8
 8000792:	4013      	ands	r3, r2
 8000794:	1e5a      	subs	r2, r3, #1
 8000796:	4193      	sbcs	r3, r2
 8000798:	b2db      	uxtb	r3, r3
 800079a:	001a      	movs	r2, r3
 800079c:	23a0      	movs	r3, #160	; 0xa0
 800079e:	05db      	lsls	r3, r3, #23
 80007a0:	2120      	movs	r1, #32
 80007a2:	0018      	movs	r0, r3
 80007a4:	f001 fc26 	bl	8001ff4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(V3R_GPIO_Port, V3R_Pin, val & (1<<2) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80007a8:	1dfb      	adds	r3, r7, #7
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	2204      	movs	r2, #4
 80007ae:	4013      	ands	r3, r2
 80007b0:	1e5a      	subs	r2, r3, #1
 80007b2:	4193      	sbcs	r3, r2
 80007b4:	b2db      	uxtb	r3, r3
 80007b6:	001a      	movs	r2, r3
 80007b8:	23a0      	movs	r3, #160	; 0xa0
 80007ba:	05db      	lsls	r3, r3, #23
 80007bc:	2140      	movs	r1, #64	; 0x40
 80007be:	0018      	movs	r0, r3
 80007c0:	f001 fc18 	bl	8001ff4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(V2R_GPIO_Port, V2R_Pin, val & (1<<1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80007c4:	1dfb      	adds	r3, r7, #7
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	2202      	movs	r2, #2
 80007ca:	4013      	ands	r3, r2
 80007cc:	1e5a      	subs	r2, r3, #1
 80007ce:	4193      	sbcs	r3, r2
 80007d0:	b2db      	uxtb	r3, r3
 80007d2:	001a      	movs	r2, r3
 80007d4:	23a0      	movs	r3, #160	; 0xa0
 80007d6:	05db      	lsls	r3, r3, #23
 80007d8:	2180      	movs	r1, #128	; 0x80
 80007da:	0018      	movs	r0, r3
 80007dc:	f001 fc0a 	bl	8001ff4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(V1R_GPIO_Port, V1R_Pin, val & (1<<0) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80007e0:	1dfb      	adds	r3, r7, #7
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	2201      	movs	r2, #1
 80007e6:	4013      	ands	r3, r2
 80007e8:	1e5a      	subs	r2, r3, #1
 80007ea:	4193      	sbcs	r3, r2
 80007ec:	b2db      	uxtb	r3, r3
 80007ee:	001a      	movs	r2, r3
 80007f0:	4b04      	ldr	r3, [pc, #16]	; (8000804 <set_right_attenuation+0xa0>)
 80007f2:	2101      	movs	r1, #1
 80007f4:	0018      	movs	r0, r3
 80007f6:	f001 fbfd 	bl	8001ff4 <HAL_GPIO_WritePin>
}
 80007fa:	46c0      	nop			; (mov r8, r8)
 80007fc:	46bd      	mov	sp, r7
 80007fe:	b002      	add	sp, #8
 8000800:	bd80      	pop	{r7, pc}
 8000802:	46c0      	nop			; (mov r8, r8)
 8000804:	50000400 	.word	0x50000400

08000808 <set_diff_gain>:

//5-bit gain setting for differential amplifier
//See data sheet for gain definitions
void set_diff_gain(u8 val)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b084      	sub	sp, #16
 800080c:	af00      	add	r7, sp, #0
 800080e:	0002      	movs	r2, r0
 8000810:	1dfb      	adds	r3, r7, #7
 8000812:	701a      	strb	r2, [r3, #0]
	//Pull CS and SCLK low
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8000814:	2380      	movs	r3, #128	; 0x80
 8000816:	0059      	lsls	r1, r3, #1
 8000818:	23a0      	movs	r3, #160	; 0xa0
 800081a:	05db      	lsls	r3, r3, #23
 800081c:	2200      	movs	r2, #0
 800081e:	0018      	movs	r0, r3
 8000820:	f001 fbe8 	bl	8001ff4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_RESET);
 8000824:	2380      	movs	r3, #128	; 0x80
 8000826:	0099      	lsls	r1, r3, #2
 8000828:	23a0      	movs	r3, #160	; 0xa0
 800082a:	05db      	lsls	r3, r3, #23
 800082c:	2200      	movs	r2, #0
 800082e:	0018      	movs	r0, r3
 8000830:	f001 fbe0 	bl	8001ff4 <HAL_GPIO_WritePin>

	for(int i = 0; i < 8; i = i + 1)
 8000834:	2300      	movs	r3, #0
 8000836:	60fb      	str	r3, [r7, #12]
 8000838:	e036      	b.n	80008a8 <set_diff_gain+0xa0>
	{
		//If this is the last 3 bits then set them all to 0
		if(i > 4)
 800083a:	68fb      	ldr	r3, [r7, #12]
 800083c:	2b04      	cmp	r3, #4
 800083e:	dd08      	ble.n	8000852 <set_diff_gain+0x4a>
		{
			HAL_GPIO_WritePin(SDIO_GPIO_Port, SDIO_Pin, GPIO_PIN_RESET);
 8000840:	2380      	movs	r3, #128	; 0x80
 8000842:	00d9      	lsls	r1, r3, #3
 8000844:	23a0      	movs	r3, #160	; 0xa0
 8000846:	05db      	lsls	r3, r3, #23
 8000848:	2200      	movs	r2, #0
 800084a:	0018      	movs	r0, r3
 800084c:	f001 fbd2 	bl	8001ff4 <HAL_GPIO_WritePin>
 8000850:	e011      	b.n	8000876 <set_diff_gain+0x6e>
		}
		else//Otherwise start tapping out the specified gain
		{
			HAL_GPIO_WritePin(SDIO_GPIO_Port, SDIO_Pin, val & (1 << i) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000852:	1dfb      	adds	r3, r7, #7
 8000854:	781a      	ldrb	r2, [r3, #0]
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	411a      	asrs	r2, r3
 800085a:	0013      	movs	r3, r2
 800085c:	2201      	movs	r2, #1
 800085e:	4013      	ands	r3, r2
 8000860:	1e5a      	subs	r2, r3, #1
 8000862:	4193      	sbcs	r3, r2
 8000864:	b2db      	uxtb	r3, r3
 8000866:	001a      	movs	r2, r3
 8000868:	2380      	movs	r3, #128	; 0x80
 800086a:	00d9      	lsls	r1, r3, #3
 800086c:	23a0      	movs	r3, #160	; 0xa0
 800086e:	05db      	lsls	r3, r3, #23
 8000870:	0018      	movs	r0, r3
 8000872:	f001 fbbf 	bl	8001ff4 <HAL_GPIO_WritePin>
		}
		//Cycle the clock
		HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_SET);
 8000876:	2380      	movs	r3, #128	; 0x80
 8000878:	0099      	lsls	r1, r3, #2
 800087a:	23a0      	movs	r3, #160	; 0xa0
 800087c:	05db      	lsls	r3, r3, #23
 800087e:	2201      	movs	r2, #1
 8000880:	0018      	movs	r0, r3
 8000882:	f001 fbb7 	bl	8001ff4 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8000886:	2001      	movs	r0, #1
 8000888:	f000 fc5e 	bl	8001148 <HAL_Delay>
		HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_RESET);
 800088c:	2380      	movs	r3, #128	; 0x80
 800088e:	0099      	lsls	r1, r3, #2
 8000890:	23a0      	movs	r3, #160	; 0xa0
 8000892:	05db      	lsls	r3, r3, #23
 8000894:	2200      	movs	r2, #0
 8000896:	0018      	movs	r0, r3
 8000898:	f001 fbac 	bl	8001ff4 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 800089c:	2001      	movs	r0, #1
 800089e:	f000 fc53 	bl	8001148 <HAL_Delay>
	for(int i = 0; i < 8; i = i + 1)
 80008a2:	68fb      	ldr	r3, [r7, #12]
 80008a4:	3301      	adds	r3, #1
 80008a6:	60fb      	str	r3, [r7, #12]
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	2b07      	cmp	r3, #7
 80008ac:	ddc5      	ble.n	800083a <set_diff_gain+0x32>
	}

	//Deselect CS
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 80008ae:	2380      	movs	r3, #128	; 0x80
 80008b0:	0059      	lsls	r1, r3, #1
 80008b2:	23a0      	movs	r3, #160	; 0xa0
 80008b4:	05db      	lsls	r3, r3, #23
 80008b6:	2201      	movs	r2, #1
 80008b8:	0018      	movs	r0, r3
 80008ba:	f001 fb9b 	bl	8001ff4 <HAL_GPIO_WritePin>
}
 80008be:	46c0      	nop			; (mov r8, r8)
 80008c0:	46bd      	mov	sp, r7
 80008c2:	b004      	add	sp, #16
 80008c4:	bd80      	pop	{r7, pc}

080008c6 <set_amp_enable>:

//Enables or disables output amplifier
void set_amp_enable(u8 val)
{
 80008c6:	b580      	push	{r7, lr}
 80008c8:	b082      	sub	sp, #8
 80008ca:	af00      	add	r7, sp, #0
 80008cc:	0002      	movs	r2, r0
 80008ce:	1dfb      	adds	r3, r7, #7
 80008d0:	701a      	strb	r2, [r3, #0]
	//If we're enabling
	if(val)
 80008d2:	1dfb      	adds	r3, r7, #7
 80008d4:	781b      	ldrb	r3, [r3, #0]
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d010      	beq.n	80008fc <set_amp_enable+0x36>
	{
		HAL_GPIO_WritePin(VA_GPIO_Port, VA_Pin, GPIO_PIN_RESET);
 80008da:	2380      	movs	r3, #128	; 0x80
 80008dc:	0119      	lsls	r1, r3, #4
 80008de:	23a0      	movs	r3, #160	; 0xa0
 80008e0:	05db      	lsls	r3, r3, #23
 80008e2:	2200      	movs	r2, #0
 80008e4:	0018      	movs	r0, r3
 80008e6:	f001 fb85 	bl	8001ff4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(VB_GPIO_Port, VB_Pin, GPIO_PIN_SET);
 80008ea:	2380      	movs	r3, #128	; 0x80
 80008ec:	0159      	lsls	r1, r3, #5
 80008ee:	23a0      	movs	r3, #160	; 0xa0
 80008f0:	05db      	lsls	r3, r3, #23
 80008f2:	2201      	movs	r2, #1
 80008f4:	0018      	movs	r0, r3
 80008f6:	f001 fb7d 	bl	8001ff4 <HAL_GPIO_WritePin>
	else
	{
		HAL_GPIO_WritePin(VA_GPIO_Port, VA_Pin, GPIO_PIN_SET);
		HAL_GPIO_WritePin(VB_GPIO_Port, VB_Pin, GPIO_PIN_RESET);
	}
}
 80008fa:	e00f      	b.n	800091c <set_amp_enable+0x56>
		HAL_GPIO_WritePin(VA_GPIO_Port, VA_Pin, GPIO_PIN_SET);
 80008fc:	2380      	movs	r3, #128	; 0x80
 80008fe:	0119      	lsls	r1, r3, #4
 8000900:	23a0      	movs	r3, #160	; 0xa0
 8000902:	05db      	lsls	r3, r3, #23
 8000904:	2201      	movs	r2, #1
 8000906:	0018      	movs	r0, r3
 8000908:	f001 fb74 	bl	8001ff4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(VB_GPIO_Port, VB_Pin, GPIO_PIN_RESET);
 800090c:	2380      	movs	r3, #128	; 0x80
 800090e:	0159      	lsls	r1, r3, #5
 8000910:	23a0      	movs	r3, #160	; 0xa0
 8000912:	05db      	lsls	r3, r3, #23
 8000914:	2200      	movs	r2, #0
 8000916:	0018      	movs	r0, r3
 8000918:	f001 fb6c 	bl	8001ff4 <HAL_GPIO_WritePin>
}
 800091c:	46c0      	nop			; (mov r8, r8)
 800091e:	46bd      	mov	sp, r7
 8000920:	b002      	add	sp, #8
 8000922:	bd80      	pop	{r7, pc}

08000924 <read_adc>:

//If sel = 0, get ADC0 else ADC1
//Returns status (0 if OK) and returns read value via pass by reference
u8 read_adc(u8 sel, u16 *val)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b086      	sub	sp, #24
 8000928:	af00      	add	r7, sp, #0
 800092a:	0002      	movs	r2, r0
 800092c:	6039      	str	r1, [r7, #0]
 800092e:	1dfb      	adds	r3, r7, #7
 8000930:	701a      	strb	r2, [r3, #0]

	u8 ret_val = 0;
 8000932:	2317      	movs	r3, #23
 8000934:	18fb      	adds	r3, r7, r3
 8000936:	2200      	movs	r2, #0
 8000938:	701a      	strb	r2, [r3, #0]

	ADC_ChannelConfTypeDef sConfig = {0};
 800093a:	230c      	movs	r3, #12
 800093c:	18fb      	adds	r3, r7, r3
 800093e:	0018      	movs	r0, r3
 8000940:	2308      	movs	r3, #8
 8000942:	001a      	movs	r2, r3
 8000944:	2100      	movs	r1, #0
 8000946:	f003 fc03 	bl	8004150 <memset>
	if(sel)
 800094a:	1dfb      	adds	r3, r7, #7
 800094c:	781b      	ldrb	r3, [r3, #0]
 800094e:	2b00      	cmp	r3, #0
 8000950:	d004      	beq.n	800095c <read_adc+0x38>
	{
		sConfig.Channel = ADC_CHANNEL_0;
 8000952:	230c      	movs	r3, #12
 8000954:	18fb      	adds	r3, r7, r3
 8000956:	2201      	movs	r2, #1
 8000958:	601a      	str	r2, [r3, #0]
 800095a:	e003      	b.n	8000964 <read_adc+0x40>
	}
	else
	{
		sConfig.Channel = ADC_CHANNEL_1;
 800095c:	230c      	movs	r3, #12
 800095e:	18fb      	adds	r3, r7, r3
 8000960:	4a17      	ldr	r2, [pc, #92]	; (80009c0 <read_adc+0x9c>)
 8000962:	601a      	str	r2, [r3, #0]
	}
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000964:	230c      	movs	r3, #12
 8000966:	18fb      	adds	r3, r7, r3
 8000968:	2280      	movs	r2, #128	; 0x80
 800096a:	0152      	lsls	r2, r2, #5
 800096c:	605a      	str	r2, [r3, #4]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800096e:	230c      	movs	r3, #12
 8000970:	18fa      	adds	r2, r7, r3
 8000972:	4b14      	ldr	r3, [pc, #80]	; (80009c4 <read_adc+0xa0>)
 8000974:	0011      	movs	r1, r2
 8000976:	0018      	movs	r0, r3
 8000978:	f000 feb4 	bl	80016e4 <HAL_ADC_ConfigChannel>
 800097c:	1e03      	subs	r3, r0, #0
 800097e:	d003      	beq.n	8000988 <read_adc+0x64>
	{
		ret_val = 1;
 8000980:	2317      	movs	r3, #23
 8000982:	18fb      	adds	r3, r7, r3
 8000984:	2201      	movs	r2, #1
 8000986:	701a      	strb	r2, [r3, #0]
	}

	//Start the conversion
	HAL_ADC_Start(&hadc);
 8000988:	4b0e      	ldr	r3, [pc, #56]	; (80009c4 <read_adc+0xa0>)
 800098a:	0018      	movs	r0, r3
 800098c:	f000 fd72 	bl	8001474 <HAL_ADC_Start>
    //Poll ADC1 Perihperal & TimeOut = 1mSec
	HAL_ADC_PollForConversion(&hadc, 1);
 8000990:	4b0c      	ldr	r3, [pc, #48]	; (80009c4 <read_adc+0xa0>)
 8000992:	2101      	movs	r1, #1
 8000994:	0018      	movs	r0, r3
 8000996:	f000 fe03 	bl	80015a0 <HAL_ADC_PollForConversion>
	//Get the result and return it
	*val = HAL_ADC_GetValue(&hadc);
 800099a:	4b0a      	ldr	r3, [pc, #40]	; (80009c4 <read_adc+0xa0>)
 800099c:	0018      	movs	r0, r3
 800099e:	f000 fe95 	bl	80016cc <HAL_ADC_GetValue>
 80009a2:	0003      	movs	r3, r0
 80009a4:	b29a      	uxth	r2, r3
 80009a6:	683b      	ldr	r3, [r7, #0]
 80009a8:	801a      	strh	r2, [r3, #0]
	HAL_ADC_Stop(&hadc);
 80009aa:	4b06      	ldr	r3, [pc, #24]	; (80009c4 <read_adc+0xa0>)
 80009ac:	0018      	movs	r0, r3
 80009ae:	f000 fdb5 	bl	800151c <HAL_ADC_Stop>

	return ret_val;
 80009b2:	2317      	movs	r3, #23
 80009b4:	18fb      	adds	r3, r7, r3
 80009b6:	781b      	ldrb	r3, [r3, #0]
}
 80009b8:	0018      	movs	r0, r3
 80009ba:	46bd      	mov	sp, r7
 80009bc:	b006      	add	sp, #24
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	04000002 	.word	0x04000002
 80009c4:	200004c8 	.word	0x200004c8

080009c8 <uart_init>:
u8 uart_buffer[uart_buff_size];//Our own buffer for storing incoming bytes
u16 uart_buffer_w_pos;
u16 uart_buffer_r_pos;
u16 uart_buffer_size;
void uart_init()
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
	//Initialize the buffer
	uart_buffer_w_pos = 0;
 80009cc:	4b08      	ldr	r3, [pc, #32]	; (80009f0 <uart_init+0x28>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	801a      	strh	r2, [r3, #0]
	uart_buffer_r_pos = 0;
 80009d2:	4b08      	ldr	r3, [pc, #32]	; (80009f4 <uart_init+0x2c>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	801a      	strh	r2, [r3, #0]
	uart_buffer_size = 0;
 80009d8:	4b07      	ldr	r3, [pc, #28]	; (80009f8 <uart_init+0x30>)
 80009da:	2200      	movs	r2, #0
 80009dc:	801a      	strh	r2, [r3, #0]

	//Register the ISR callback here
	HAL_UART_Receive_IT(&huart2, uart_rec_buff, 1);
 80009de:	4907      	ldr	r1, [pc, #28]	; (80009fc <uart_init+0x34>)
 80009e0:	4b07      	ldr	r3, [pc, #28]	; (8000a00 <uart_init+0x38>)
 80009e2:	2201      	movs	r2, #1
 80009e4:	0018      	movs	r0, r3
 80009e6:	f002 faa1 	bl	8002f2c <HAL_UART_Receive_IT>
}
 80009ea:	46c0      	nop			; (mov r8, r8)
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	20000432 	.word	0x20000432
 80009f4:	2000002c 	.word	0x2000002c
 80009f8:	20000430 	.word	0x20000430
 80009fc:	20000434 	.word	0x20000434
 8000a00:	20000444 	.word	0x20000444

08000a04 <HAL_UART_RxCpltCallback>:

void  HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
	//Copy the received byte into the local buffer
	uart_buffer[uart_buffer_w_pos] = uart_rec_buff[0];
 8000a0c:	4b11      	ldr	r3, [pc, #68]	; (8000a54 <HAL_UART_RxCpltCallback+0x50>)
 8000a0e:	881b      	ldrh	r3, [r3, #0]
 8000a10:	001a      	movs	r2, r3
 8000a12:	4b11      	ldr	r3, [pc, #68]	; (8000a58 <HAL_UART_RxCpltCallback+0x54>)
 8000a14:	7819      	ldrb	r1, [r3, #0]
 8000a16:	4b11      	ldr	r3, [pc, #68]	; (8000a5c <HAL_UART_RxCpltCallback+0x58>)
 8000a18:	5499      	strb	r1, [r3, r2]
	//Update the pointer
	uart_buffer_w_pos = uart_buffer_w_pos >= uart_buff_size-1 ? 0 : uart_buffer_w_pos + 1;
 8000a1a:	4b0e      	ldr	r3, [pc, #56]	; (8000a54 <HAL_UART_RxCpltCallback+0x50>)
 8000a1c:	881b      	ldrh	r3, [r3, #0]
 8000a1e:	4a10      	ldr	r2, [pc, #64]	; (8000a60 <HAL_UART_RxCpltCallback+0x5c>)
 8000a20:	4293      	cmp	r3, r2
 8000a22:	d804      	bhi.n	8000a2e <HAL_UART_RxCpltCallback+0x2a>
 8000a24:	4b0b      	ldr	r3, [pc, #44]	; (8000a54 <HAL_UART_RxCpltCallback+0x50>)
 8000a26:	881b      	ldrh	r3, [r3, #0]
 8000a28:	3301      	adds	r3, #1
 8000a2a:	b29a      	uxth	r2, r3
 8000a2c:	e000      	b.n	8000a30 <HAL_UART_RxCpltCallback+0x2c>
 8000a2e:	2200      	movs	r2, #0
 8000a30:	4b08      	ldr	r3, [pc, #32]	; (8000a54 <HAL_UART_RxCpltCallback+0x50>)
 8000a32:	801a      	strh	r2, [r3, #0]
	//Update the size counter
	uart_buffer_size += 1;
 8000a34:	4b0b      	ldr	r3, [pc, #44]	; (8000a64 <HAL_UART_RxCpltCallback+0x60>)
 8000a36:	881b      	ldrh	r3, [r3, #0]
 8000a38:	3301      	adds	r3, #1
 8000a3a:	b29a      	uxth	r2, r3
 8000a3c:	4b09      	ldr	r3, [pc, #36]	; (8000a64 <HAL_UART_RxCpltCallback+0x60>)
 8000a3e:	801a      	strh	r2, [r3, #0]
	//Re-register the callback
	HAL_UART_Receive_IT(&huart2, uart_rec_buff, 1);
 8000a40:	4905      	ldr	r1, [pc, #20]	; (8000a58 <HAL_UART_RxCpltCallback+0x54>)
 8000a42:	4b09      	ldr	r3, [pc, #36]	; (8000a68 <HAL_UART_RxCpltCallback+0x64>)
 8000a44:	2201      	movs	r2, #1
 8000a46:	0018      	movs	r0, r3
 8000a48:	f002 fa70 	bl	8002f2c <HAL_UART_Receive_IT>
}
 8000a4c:	46c0      	nop			; (mov r8, r8)
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	b002      	add	sp, #8
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	20000432 	.word	0x20000432
 8000a58:	20000434 	.word	0x20000434
 8000a5c:	20000030 	.word	0x20000030
 8000a60:	000003fe 	.word	0x000003fe
 8000a64:	20000430 	.word	0x20000430
 8000a68:	20000444 	.word	0x20000444

08000a6c <get_uart_byte>:

u8 get_uart_byte(u8 * res)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
	//Old polling method
	//return HAL_UART_Receive(&huart2, res, 1, HAL_MAX_DELAY) == HAL_OK ? 0 : 1;

	//If the buffer is empty
	if(uart_buffer_size == 0)
 8000a74:	4b12      	ldr	r3, [pc, #72]	; (8000ac0 <get_uart_byte+0x54>)
 8000a76:	881b      	ldrh	r3, [r3, #0]
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d101      	bne.n	8000a80 <get_uart_byte+0x14>
	{
		//Return an error
		return 1;
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	e01a      	b.n	8000ab6 <get_uart_byte+0x4a>
	}

	//Set the return variable first
	*res = uart_buffer[uart_buffer_r_pos];
 8000a80:	4b10      	ldr	r3, [pc, #64]	; (8000ac4 <get_uart_byte+0x58>)
 8000a82:	881b      	ldrh	r3, [r3, #0]
 8000a84:	001a      	movs	r2, r3
 8000a86:	4b10      	ldr	r3, [pc, #64]	; (8000ac8 <get_uart_byte+0x5c>)
 8000a88:	5c9a      	ldrb	r2, [r3, r2]
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	701a      	strb	r2, [r3, #0]

	//Update the read position pointer
	uart_buffer_r_pos = uart_buffer_r_pos >= uart_buff_size-1 ? 0 : uart_buffer_r_pos + 1;
 8000a8e:	4b0d      	ldr	r3, [pc, #52]	; (8000ac4 <get_uart_byte+0x58>)
 8000a90:	881b      	ldrh	r3, [r3, #0]
 8000a92:	4a0e      	ldr	r2, [pc, #56]	; (8000acc <get_uart_byte+0x60>)
 8000a94:	4293      	cmp	r3, r2
 8000a96:	d804      	bhi.n	8000aa2 <get_uart_byte+0x36>
 8000a98:	4b0a      	ldr	r3, [pc, #40]	; (8000ac4 <get_uart_byte+0x58>)
 8000a9a:	881b      	ldrh	r3, [r3, #0]
 8000a9c:	3301      	adds	r3, #1
 8000a9e:	b29a      	uxth	r2, r3
 8000aa0:	e000      	b.n	8000aa4 <get_uart_byte+0x38>
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	4b07      	ldr	r3, [pc, #28]	; (8000ac4 <get_uart_byte+0x58>)
 8000aa6:	801a      	strh	r2, [r3, #0]

	//Reduce the size counter
	uart_buffer_size -= 1;
 8000aa8:	4b05      	ldr	r3, [pc, #20]	; (8000ac0 <get_uart_byte+0x54>)
 8000aaa:	881b      	ldrh	r3, [r3, #0]
 8000aac:	3b01      	subs	r3, #1
 8000aae:	b29a      	uxth	r2, r3
 8000ab0:	4b03      	ldr	r3, [pc, #12]	; (8000ac0 <get_uart_byte+0x54>)
 8000ab2:	801a      	strh	r2, [r3, #0]

	//Success
	return 0;
 8000ab4:	2300      	movs	r3, #0
}
 8000ab6:	0018      	movs	r0, r3
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	b002      	add	sp, #8
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	46c0      	nop			; (mov r8, r8)
 8000ac0:	20000430 	.word	0x20000430
 8000ac4:	2000002c 	.word	0x2000002c
 8000ac8:	20000030 	.word	0x20000030
 8000acc:	000003fe 	.word	0x000003fe

08000ad0 <send_uart_byte>:


//Returns status not result
//0 result is success
u8 send_uart_byte(u8 * bt)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
	while(HAL_UART_Transmit_IT(&huart2, bt, 1) == HAL_BUSY){}
 8000ad8:	46c0      	nop			; (mov r8, r8)
 8000ada:	6879      	ldr	r1, [r7, #4]
 8000adc:	4b06      	ldr	r3, [pc, #24]	; (8000af8 <send_uart_byte+0x28>)
 8000ade:	2201      	movs	r2, #1
 8000ae0:	0018      	movs	r0, r3
 8000ae2:	f002 f9b5 	bl	8002e50 <HAL_UART_Transmit_IT>
 8000ae6:	0003      	movs	r3, r0
 8000ae8:	2b02      	cmp	r3, #2
 8000aea:	d0f6      	beq.n	8000ada <send_uart_byte+0xa>
	return 0;
 8000aec:	2300      	movs	r3, #0
}
 8000aee:	0018      	movs	r0, r3
 8000af0:	46bd      	mov	sp, r7
 8000af2:	b002      	add	sp, #8
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	46c0      	nop			; (mov r8, r8)
 8000af8:	20000444 	.word	0x20000444

08000afc <set_led>:

void set_led(u8 num, u8 val)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	0002      	movs	r2, r0
 8000b04:	1dfb      	adds	r3, r7, #7
 8000b06:	701a      	strb	r2, [r3, #0]
 8000b08:	1dbb      	adds	r3, r7, #6
 8000b0a:	1c0a      	adds	r2, r1, #0
 8000b0c:	701a      	strb	r2, [r3, #0]
	if(num)
 8000b0e:	1dfb      	adds	r3, r7, #7
 8000b10:	781b      	ldrb	r3, [r3, #0]
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d00c      	beq.n	8000b30 <set_led+0x34>
	{
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, val ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000b16:	1dbb      	adds	r3, r7, #6
 8000b18:	781b      	ldrb	r3, [r3, #0]
 8000b1a:	1e5a      	subs	r2, r3, #1
 8000b1c:	4193      	sbcs	r3, r2
 8000b1e:	b2db      	uxtb	r3, r3
 8000b20:	001a      	movs	r2, r3
 8000b22:	2380      	movs	r3, #128	; 0x80
 8000b24:	01db      	lsls	r3, r3, #7
 8000b26:	480a      	ldr	r0, [pc, #40]	; (8000b50 <set_led+0x54>)
 8000b28:	0019      	movs	r1, r3
 8000b2a:	f001 fa63 	bl	8001ff4 <HAL_GPIO_WritePin>
	}
	else
	{
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, val ? GPIO_PIN_SET : GPIO_PIN_RESET);
	}
}
 8000b2e:	e00b      	b.n	8000b48 <set_led+0x4c>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, val ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000b30:	1dbb      	adds	r3, r7, #6
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	1e5a      	subs	r2, r3, #1
 8000b36:	4193      	sbcs	r3, r2
 8000b38:	b2db      	uxtb	r3, r3
 8000b3a:	001a      	movs	r2, r3
 8000b3c:	2380      	movs	r3, #128	; 0x80
 8000b3e:	021b      	lsls	r3, r3, #8
 8000b40:	4803      	ldr	r0, [pc, #12]	; (8000b50 <set_led+0x54>)
 8000b42:	0019      	movs	r1, r3
 8000b44:	f001 fa56 	bl	8001ff4 <HAL_GPIO_WritePin>
}
 8000b48:	46c0      	nop			; (mov r8, r8)
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	b002      	add	sp, #8
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	50000800 	.word	0x50000800

08000b54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b58:	f000 fa86 	bl	8001068 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b5c:	f000 f80a 	bl	8000b74 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b60:	f000 f91a 	bl	8000d98 <MX_GPIO_Init>
  MX_ADC_Init();
 8000b64:	f000 f876 	bl	8000c54 <MX_ADC_Init>
  MX_USART2_UART_Init();
 8000b68:	f000 f8e6 	bl	8000d38 <MX_USART2_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  handler_entry();
 8000b6c:	f7ff fcb6 	bl	80004dc <handler_entry>
 8000b70:	e7fc      	b.n	8000b6c <main+0x18>
	...

08000b74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b09a      	sub	sp, #104	; 0x68
 8000b78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b7a:	2334      	movs	r3, #52	; 0x34
 8000b7c:	18fb      	adds	r3, r7, r3
 8000b7e:	0018      	movs	r0, r3
 8000b80:	2334      	movs	r3, #52	; 0x34
 8000b82:	001a      	movs	r2, r3
 8000b84:	2100      	movs	r1, #0
 8000b86:	f003 fae3 	bl	8004150 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b8a:	2320      	movs	r3, #32
 8000b8c:	18fb      	adds	r3, r7, r3
 8000b8e:	0018      	movs	r0, r3
 8000b90:	2314      	movs	r3, #20
 8000b92:	001a      	movs	r2, r3
 8000b94:	2100      	movs	r1, #0
 8000b96:	f003 fadb 	bl	8004150 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b9a:	1d3b      	adds	r3, r7, #4
 8000b9c:	0018      	movs	r0, r3
 8000b9e:	231c      	movs	r3, #28
 8000ba0:	001a      	movs	r2, r3
 8000ba2:	2100      	movs	r1, #0
 8000ba4:	f003 fad4 	bl	8004150 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ba8:	4b28      	ldr	r3, [pc, #160]	; (8000c4c <SystemClock_Config+0xd8>)
 8000baa:	4a28      	ldr	r2, [pc, #160]	; (8000c4c <SystemClock_Config+0xd8>)
 8000bac:	6812      	ldr	r2, [r2, #0]
 8000bae:	4928      	ldr	r1, [pc, #160]	; (8000c50 <SystemClock_Config+0xdc>)
 8000bb0:	400a      	ands	r2, r1
 8000bb2:	2180      	movs	r1, #128	; 0x80
 8000bb4:	0109      	lsls	r1, r1, #4
 8000bb6:	430a      	orrs	r2, r1
 8000bb8:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bba:	2334      	movs	r3, #52	; 0x34
 8000bbc:	18fb      	adds	r3, r7, r3
 8000bbe:	2202      	movs	r2, #2
 8000bc0:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bc2:	2334      	movs	r3, #52	; 0x34
 8000bc4:	18fb      	adds	r3, r7, r3
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bca:	2334      	movs	r3, #52	; 0x34
 8000bcc:	18fb      	adds	r3, r7, r3
 8000bce:	2210      	movs	r2, #16
 8000bd0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000bd2:	2334      	movs	r3, #52	; 0x34
 8000bd4:	18fb      	adds	r3, r7, r3
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bda:	2334      	movs	r3, #52	; 0x34
 8000bdc:	18fb      	adds	r3, r7, r3
 8000bde:	0018      	movs	r0, r3
 8000be0:	f001 fa26 	bl	8002030 <HAL_RCC_OscConfig>
 8000be4:	1e03      	subs	r3, r0, #0
 8000be6:	d001      	beq.n	8000bec <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000be8:	f000 f96c 	bl	8000ec4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bec:	2320      	movs	r3, #32
 8000bee:	18fb      	adds	r3, r7, r3
 8000bf0:	220f      	movs	r2, #15
 8000bf2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000bf4:	2320      	movs	r3, #32
 8000bf6:	18fb      	adds	r3, r7, r3
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bfc:	2320      	movs	r3, #32
 8000bfe:	18fb      	adds	r3, r7, r3
 8000c00:	2200      	movs	r2, #0
 8000c02:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c04:	2320      	movs	r3, #32
 8000c06:	18fb      	adds	r3, r7, r3
 8000c08:	2200      	movs	r2, #0
 8000c0a:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c0c:	2320      	movs	r3, #32
 8000c0e:	18fb      	adds	r3, r7, r3
 8000c10:	2200      	movs	r2, #0
 8000c12:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c14:	2320      	movs	r3, #32
 8000c16:	18fb      	adds	r3, r7, r3
 8000c18:	2100      	movs	r1, #0
 8000c1a:	0018      	movs	r0, r3
 8000c1c:	f001 fd72 	bl	8002704 <HAL_RCC_ClockConfig>
 8000c20:	1e03      	subs	r3, r0, #0
 8000c22:	d001      	beq.n	8000c28 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000c24:	f000 f94e 	bl	8000ec4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000c28:	1d3b      	adds	r3, r7, #4
 8000c2a:	2202      	movs	r2, #2
 8000c2c:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000c2e:	1d3b      	adds	r3, r7, #4
 8000c30:	2200      	movs	r2, #0
 8000c32:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c34:	1d3b      	adds	r3, r7, #4
 8000c36:	0018      	movs	r0, r3
 8000c38:	f001 ff84 	bl	8002b44 <HAL_RCCEx_PeriphCLKConfig>
 8000c3c:	1e03      	subs	r3, r0, #0
 8000c3e:	d001      	beq.n	8000c44 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000c40:	f000 f940 	bl	8000ec4 <Error_Handler>
  }
}
 8000c44:	46c0      	nop			; (mov r8, r8)
 8000c46:	46bd      	mov	sp, r7
 8000c48:	b01a      	add	sp, #104	; 0x68
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	40007000 	.word	0x40007000
 8000c50:	ffffe7ff 	.word	0xffffe7ff

08000c54 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c5a:	003b      	movs	r3, r7
 8000c5c:	0018      	movs	r0, r3
 8000c5e:	2308      	movs	r3, #8
 8000c60:	001a      	movs	r2, r3
 8000c62:	2100      	movs	r1, #0
 8000c64:	f003 fa74 	bl	8004150 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000c68:	4b30      	ldr	r3, [pc, #192]	; (8000d2c <MX_ADC_Init+0xd8>)
 8000c6a:	4a31      	ldr	r2, [pc, #196]	; (8000d30 <MX_ADC_Init+0xdc>)
 8000c6c:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8000c6e:	4b2f      	ldr	r3, [pc, #188]	; (8000d2c <MX_ADC_Init+0xd8>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8000c74:	4b2d      	ldr	r3, [pc, #180]	; (8000d2c <MX_ADC_Init+0xd8>)
 8000c76:	22c0      	movs	r2, #192	; 0xc0
 8000c78:	0612      	lsls	r2, r2, #24
 8000c7a:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000c7c:	4b2b      	ldr	r3, [pc, #172]	; (8000d2c <MX_ADC_Init+0xd8>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000c82:	4b2a      	ldr	r3, [pc, #168]	; (8000d2c <MX_ADC_Init+0xd8>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000c88:	4b28      	ldr	r3, [pc, #160]	; (8000d2c <MX_ADC_Init+0xd8>)
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c8e:	4b27      	ldr	r3, [pc, #156]	; (8000d2c <MX_ADC_Init+0xd8>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000c94:	4b25      	ldr	r3, [pc, #148]	; (8000d2c <MX_ADC_Init+0xd8>)
 8000c96:	2220      	movs	r2, #32
 8000c98:	2100      	movs	r1, #0
 8000c9a:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000c9c:	4b23      	ldr	r3, [pc, #140]	; (8000d2c <MX_ADC_Init+0xd8>)
 8000c9e:	2221      	movs	r2, #33	; 0x21
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ca4:	4b21      	ldr	r3, [pc, #132]	; (8000d2c <MX_ADC_Init+0xd8>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000caa:	4b20      	ldr	r3, [pc, #128]	; (8000d2c <MX_ADC_Init+0xd8>)
 8000cac:	22c2      	movs	r2, #194	; 0xc2
 8000cae:	32ff      	adds	r2, #255	; 0xff
 8000cb0:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000cb2:	4b1e      	ldr	r3, [pc, #120]	; (8000d2c <MX_ADC_Init+0xd8>)
 8000cb4:	222c      	movs	r2, #44	; 0x2c
 8000cb6:	2100      	movs	r1, #0
 8000cb8:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000cba:	4b1c      	ldr	r3, [pc, #112]	; (8000d2c <MX_ADC_Init+0xd8>)
 8000cbc:	2204      	movs	r2, #4
 8000cbe:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000cc0:	4b1a      	ldr	r3, [pc, #104]	; (8000d2c <MX_ADC_Init+0xd8>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000cc6:	4b19      	ldr	r3, [pc, #100]	; (8000d2c <MX_ADC_Init+0xd8>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8000ccc:	4b17      	ldr	r3, [pc, #92]	; (8000d2c <MX_ADC_Init+0xd8>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000cd2:	4b16      	ldr	r3, [pc, #88]	; (8000d2c <MX_ADC_Init+0xd8>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000cd8:	4b14      	ldr	r3, [pc, #80]	; (8000d2c <MX_ADC_Init+0xd8>)
 8000cda:	0018      	movs	r0, r3
 8000cdc:	f000 fa56 	bl	800118c <HAL_ADC_Init>
 8000ce0:	1e03      	subs	r3, r0, #0
 8000ce2:	d001      	beq.n	8000ce8 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8000ce4:	f000 f8ee 	bl	8000ec4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000ce8:	003b      	movs	r3, r7
 8000cea:	2201      	movs	r2, #1
 8000cec:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000cee:	003b      	movs	r3, r7
 8000cf0:	2280      	movs	r2, #128	; 0x80
 8000cf2:	0152      	lsls	r2, r2, #5
 8000cf4:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000cf6:	003a      	movs	r2, r7
 8000cf8:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <MX_ADC_Init+0xd8>)
 8000cfa:	0011      	movs	r1, r2
 8000cfc:	0018      	movs	r0, r3
 8000cfe:	f000 fcf1 	bl	80016e4 <HAL_ADC_ConfigChannel>
 8000d02:	1e03      	subs	r3, r0, #0
 8000d04:	d001      	beq.n	8000d0a <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8000d06:	f000 f8dd 	bl	8000ec4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000d0a:	003b      	movs	r3, r7
 8000d0c:	4a09      	ldr	r2, [pc, #36]	; (8000d34 <MX_ADC_Init+0xe0>)
 8000d0e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000d10:	003a      	movs	r2, r7
 8000d12:	4b06      	ldr	r3, [pc, #24]	; (8000d2c <MX_ADC_Init+0xd8>)
 8000d14:	0011      	movs	r1, r2
 8000d16:	0018      	movs	r0, r3
 8000d18:	f000 fce4 	bl	80016e4 <HAL_ADC_ConfigChannel>
 8000d1c:	1e03      	subs	r3, r0, #0
 8000d1e:	d001      	beq.n	8000d24 <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 8000d20:	f000 f8d0 	bl	8000ec4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000d24:	46c0      	nop			; (mov r8, r8)
 8000d26:	46bd      	mov	sp, r7
 8000d28:	b002      	add	sp, #8
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	200004c8 	.word	0x200004c8
 8000d30:	40012400 	.word	0x40012400
 8000d34:	04000002 	.word	0x04000002

08000d38 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d3c:	4b14      	ldr	r3, [pc, #80]	; (8000d90 <MX_USART2_UART_Init+0x58>)
 8000d3e:	4a15      	ldr	r2, [pc, #84]	; (8000d94 <MX_USART2_UART_Init+0x5c>)
 8000d40:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d42:	4b13      	ldr	r3, [pc, #76]	; (8000d90 <MX_USART2_UART_Init+0x58>)
 8000d44:	22e1      	movs	r2, #225	; 0xe1
 8000d46:	0252      	lsls	r2, r2, #9
 8000d48:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d4a:	4b11      	ldr	r3, [pc, #68]	; (8000d90 <MX_USART2_UART_Init+0x58>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d50:	4b0f      	ldr	r3, [pc, #60]	; (8000d90 <MX_USART2_UART_Init+0x58>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d56:	4b0e      	ldr	r3, [pc, #56]	; (8000d90 <MX_USART2_UART_Init+0x58>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d5c:	4b0c      	ldr	r3, [pc, #48]	; (8000d90 <MX_USART2_UART_Init+0x58>)
 8000d5e:	220c      	movs	r2, #12
 8000d60:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d62:	4b0b      	ldr	r3, [pc, #44]	; (8000d90 <MX_USART2_UART_Init+0x58>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d68:	4b09      	ldr	r3, [pc, #36]	; (8000d90 <MX_USART2_UART_Init+0x58>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d6e:	4b08      	ldr	r3, [pc, #32]	; (8000d90 <MX_USART2_UART_Init+0x58>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d74:	4b06      	ldr	r3, [pc, #24]	; (8000d90 <MX_USART2_UART_Init+0x58>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d7a:	4b05      	ldr	r3, [pc, #20]	; (8000d90 <MX_USART2_UART_Init+0x58>)
 8000d7c:	0018      	movs	r0, r3
 8000d7e:	f002 f813 	bl	8002da8 <HAL_UART_Init>
 8000d82:	1e03      	subs	r3, r0, #0
 8000d84:	d001      	beq.n	8000d8a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000d86:	f000 f89d 	bl	8000ec4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d8a:	46c0      	nop			; (mov r8, r8)
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	20000444 	.word	0x20000444
 8000d94:	40004400 	.word	0x40004400

08000d98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b088      	sub	sp, #32
 8000d9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d9e:	230c      	movs	r3, #12
 8000da0:	18fb      	adds	r3, r7, r3
 8000da2:	0018      	movs	r0, r3
 8000da4:	2314      	movs	r3, #20
 8000da6:	001a      	movs	r2, r3
 8000da8:	2100      	movs	r1, #0
 8000daa:	f003 f9d1 	bl	8004150 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dae:	4b41      	ldr	r3, [pc, #260]	; (8000eb4 <MX_GPIO_Init+0x11c>)
 8000db0:	4a40      	ldr	r2, [pc, #256]	; (8000eb4 <MX_GPIO_Init+0x11c>)
 8000db2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000db4:	2104      	movs	r1, #4
 8000db6:	430a      	orrs	r2, r1
 8000db8:	62da      	str	r2, [r3, #44]	; 0x2c
 8000dba:	4b3e      	ldr	r3, [pc, #248]	; (8000eb4 <MX_GPIO_Init+0x11c>)
 8000dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dbe:	2204      	movs	r2, #4
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	60bb      	str	r3, [r7, #8]
 8000dc4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dc6:	4b3b      	ldr	r3, [pc, #236]	; (8000eb4 <MX_GPIO_Init+0x11c>)
 8000dc8:	4a3a      	ldr	r2, [pc, #232]	; (8000eb4 <MX_GPIO_Init+0x11c>)
 8000dca:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000dcc:	2101      	movs	r1, #1
 8000dce:	430a      	orrs	r2, r1
 8000dd0:	62da      	str	r2, [r3, #44]	; 0x2c
 8000dd2:	4b38      	ldr	r3, [pc, #224]	; (8000eb4 <MX_GPIO_Init+0x11c>)
 8000dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	4013      	ands	r3, r2
 8000dda:	607b      	str	r3, [r7, #4]
 8000ddc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dde:	4b35      	ldr	r3, [pc, #212]	; (8000eb4 <MX_GPIO_Init+0x11c>)
 8000de0:	4a34      	ldr	r2, [pc, #208]	; (8000eb4 <MX_GPIO_Init+0x11c>)
 8000de2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000de4:	2102      	movs	r1, #2
 8000de6:	430a      	orrs	r2, r1
 8000de8:	62da      	str	r2, [r3, #44]	; 0x2c
 8000dea:	4b32      	ldr	r3, [pc, #200]	; (8000eb4 <MX_GPIO_Init+0x11c>)
 8000dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dee:	2202      	movs	r2, #2
 8000df0:	4013      	ands	r3, r2
 8000df2:	603b      	str	r3, [r7, #0]
 8000df4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 8000df6:	23c0      	movs	r3, #192	; 0xc0
 8000df8:	021b      	lsls	r3, r3, #8
 8000dfa:	482f      	ldr	r0, [pc, #188]	; (8000eb8 <MX_GPIO_Init+0x120>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	0019      	movs	r1, r3
 8000e00:	f001 f8f8 	bl	8001ff4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, V5R_Pin|V4R_Pin|V3R_Pin|V2R_Pin
 8000e04:	492d      	ldr	r1, [pc, #180]	; (8000ebc <MX_GPIO_Init+0x124>)
 8000e06:	23a0      	movs	r3, #160	; 0xa0
 8000e08:	05db      	lsls	r3, r3, #23
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	0018      	movs	r0, r3
 8000e0e:	f001 f8f1 	bl	8001ff4 <HAL_GPIO_WritePin>
                          |CS_Pin|SCLK_Pin|SDIO_Pin|VA_Pin
                          |VB_Pin|SV2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, V1R_Pin|SV1_Pin|V4L_Pin|V3L_Pin
 8000e12:	4b2b      	ldr	r3, [pc, #172]	; (8000ec0 <MX_GPIO_Init+0x128>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	21fb      	movs	r1, #251	; 0xfb
 8000e18:	0018      	movs	r0, r3
 8000e1a:	f001 f8eb 	bl	8001ff4 <HAL_GPIO_WritePin>
                          |V1L_Pin|V2L_Pin|V5L_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 8000e1e:	230c      	movs	r3, #12
 8000e20:	18fb      	adds	r3, r7, r3
 8000e22:	22c0      	movs	r2, #192	; 0xc0
 8000e24:	0212      	lsls	r2, r2, #8
 8000e26:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e28:	230c      	movs	r3, #12
 8000e2a:	18fb      	adds	r3, r7, r3
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e30:	230c      	movs	r3, #12
 8000e32:	18fb      	adds	r3, r7, r3
 8000e34:	2200      	movs	r2, #0
 8000e36:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e38:	230c      	movs	r3, #12
 8000e3a:	18fb      	adds	r3, r7, r3
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e40:	230c      	movs	r3, #12
 8000e42:	18fb      	adds	r3, r7, r3
 8000e44:	4a1c      	ldr	r2, [pc, #112]	; (8000eb8 <MX_GPIO_Init+0x120>)
 8000e46:	0019      	movs	r1, r3
 8000e48:	0010      	movs	r0, r2
 8000e4a:	f000 ff5d 	bl	8001d08 <HAL_GPIO_Init>

  /*Configure GPIO pins : V5R_Pin V4R_Pin V3R_Pin V2R_Pin
                           CS_Pin SCLK_Pin SDIO_Pin VA_Pin
                           VB_Pin SV2_Pin */
  GPIO_InitStruct.Pin = V5R_Pin|V4R_Pin|V3R_Pin|V2R_Pin
 8000e4e:	230c      	movs	r3, #12
 8000e50:	18fb      	adds	r3, r7, r3
 8000e52:	4a1a      	ldr	r2, [pc, #104]	; (8000ebc <MX_GPIO_Init+0x124>)
 8000e54:	601a      	str	r2, [r3, #0]
                          |CS_Pin|SCLK_Pin|SDIO_Pin|VA_Pin
                          |VB_Pin|SV2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e56:	230c      	movs	r3, #12
 8000e58:	18fb      	adds	r3, r7, r3
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5e:	230c      	movs	r3, #12
 8000e60:	18fb      	adds	r3, r7, r3
 8000e62:	2200      	movs	r2, #0
 8000e64:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e66:	230c      	movs	r3, #12
 8000e68:	18fb      	adds	r3, r7, r3
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e6e:	230c      	movs	r3, #12
 8000e70:	18fa      	adds	r2, r7, r3
 8000e72:	23a0      	movs	r3, #160	; 0xa0
 8000e74:	05db      	lsls	r3, r3, #23
 8000e76:	0011      	movs	r1, r2
 8000e78:	0018      	movs	r0, r3
 8000e7a:	f000 ff45 	bl	8001d08 <HAL_GPIO_Init>

  /*Configure GPIO pins : V1R_Pin SV1_Pin V4L_Pin V3L_Pin
                           V1L_Pin V2L_Pin V5L_Pin */
  GPIO_InitStruct.Pin = V1R_Pin|SV1_Pin|V4L_Pin|V3L_Pin
 8000e7e:	230c      	movs	r3, #12
 8000e80:	18fb      	adds	r3, r7, r3
 8000e82:	22fb      	movs	r2, #251	; 0xfb
 8000e84:	601a      	str	r2, [r3, #0]
                          |V1L_Pin|V2L_Pin|V5L_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e86:	230c      	movs	r3, #12
 8000e88:	18fb      	adds	r3, r7, r3
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8e:	230c      	movs	r3, #12
 8000e90:	18fb      	adds	r3, r7, r3
 8000e92:	2200      	movs	r2, #0
 8000e94:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e96:	230c      	movs	r3, #12
 8000e98:	18fb      	adds	r3, r7, r3
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e9e:	230c      	movs	r3, #12
 8000ea0:	18fb      	adds	r3, r7, r3
 8000ea2:	4a07      	ldr	r2, [pc, #28]	; (8000ec0 <MX_GPIO_Init+0x128>)
 8000ea4:	0019      	movs	r1, r3
 8000ea6:	0010      	movs	r0, r2
 8000ea8:	f000 ff2e 	bl	8001d08 <HAL_GPIO_Init>

}
 8000eac:	46c0      	nop			; (mov r8, r8)
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	b008      	add	sp, #32
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	40021000 	.word	0x40021000
 8000eb8:	50000800 	.word	0x50000800
 8000ebc:	00009ff0 	.word	0x00009ff0
 8000ec0:	50000400 	.word	0x50000400

08000ec4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ec8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000eca:	e7fe      	b.n	8000eca <Error_Handler+0x6>

08000ecc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ed0:	4b07      	ldr	r3, [pc, #28]	; (8000ef0 <HAL_MspInit+0x24>)
 8000ed2:	4a07      	ldr	r2, [pc, #28]	; (8000ef0 <HAL_MspInit+0x24>)
 8000ed4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000ed6:	2101      	movs	r1, #1
 8000ed8:	430a      	orrs	r2, r1
 8000eda:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000edc:	4b04      	ldr	r3, [pc, #16]	; (8000ef0 <HAL_MspInit+0x24>)
 8000ede:	4a04      	ldr	r2, [pc, #16]	; (8000ef0 <HAL_MspInit+0x24>)
 8000ee0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8000ee2:	2180      	movs	r1, #128	; 0x80
 8000ee4:	0549      	lsls	r1, r1, #21
 8000ee6:	430a      	orrs	r2, r1
 8000ee8:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eea:	46c0      	nop			; (mov r8, r8)
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	40021000 	.word	0x40021000

08000ef4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b088      	sub	sp, #32
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000efc:	230c      	movs	r3, #12
 8000efe:	18fb      	adds	r3, r7, r3
 8000f00:	0018      	movs	r0, r3
 8000f02:	2314      	movs	r3, #20
 8000f04:	001a      	movs	r2, r3
 8000f06:	2100      	movs	r1, #0
 8000f08:	f003 f922 	bl	8004150 <memset>
  if(hadc->Instance==ADC1)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a16      	ldr	r2, [pc, #88]	; (8000f6c <HAL_ADC_MspInit+0x78>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d126      	bne.n	8000f64 <HAL_ADC_MspInit+0x70>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f16:	4b16      	ldr	r3, [pc, #88]	; (8000f70 <HAL_ADC_MspInit+0x7c>)
 8000f18:	4a15      	ldr	r2, [pc, #84]	; (8000f70 <HAL_ADC_MspInit+0x7c>)
 8000f1a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000f1c:	2180      	movs	r1, #128	; 0x80
 8000f1e:	0089      	lsls	r1, r1, #2
 8000f20:	430a      	orrs	r2, r1
 8000f22:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f24:	4b12      	ldr	r3, [pc, #72]	; (8000f70 <HAL_ADC_MspInit+0x7c>)
 8000f26:	4a12      	ldr	r2, [pc, #72]	; (8000f70 <HAL_ADC_MspInit+0x7c>)
 8000f28:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000f2a:	2101      	movs	r1, #1
 8000f2c:	430a      	orrs	r2, r1
 8000f2e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000f30:	4b0f      	ldr	r3, [pc, #60]	; (8000f70 <HAL_ADC_MspInit+0x7c>)
 8000f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f34:	2201      	movs	r2, #1
 8000f36:	4013      	ands	r3, r2
 8000f38:	60bb      	str	r3, [r7, #8]
 8000f3a:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    PA1     ------> ADC_IN1
    */
    GPIO_InitStruct.Pin = ADC1_Pin|ADC2_Pin;
 8000f3c:	230c      	movs	r3, #12
 8000f3e:	18fb      	adds	r3, r7, r3
 8000f40:	2203      	movs	r2, #3
 8000f42:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f44:	230c      	movs	r3, #12
 8000f46:	18fb      	adds	r3, r7, r3
 8000f48:	2203      	movs	r2, #3
 8000f4a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4c:	230c      	movs	r3, #12
 8000f4e:	18fb      	adds	r3, r7, r3
 8000f50:	2200      	movs	r2, #0
 8000f52:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f54:	230c      	movs	r3, #12
 8000f56:	18fa      	adds	r2, r7, r3
 8000f58:	23a0      	movs	r3, #160	; 0xa0
 8000f5a:	05db      	lsls	r3, r3, #23
 8000f5c:	0011      	movs	r1, r2
 8000f5e:	0018      	movs	r0, r3
 8000f60:	f000 fed2 	bl	8001d08 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000f64:	46c0      	nop			; (mov r8, r8)
 8000f66:	46bd      	mov	sp, r7
 8000f68:	b008      	add	sp, #32
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	40012400 	.word	0x40012400
 8000f70:	40021000 	.word	0x40021000

08000f74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b088      	sub	sp, #32
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f7c:	230c      	movs	r3, #12
 8000f7e:	18fb      	adds	r3, r7, r3
 8000f80:	0018      	movs	r0, r3
 8000f82:	2314      	movs	r3, #20
 8000f84:	001a      	movs	r2, r3
 8000f86:	2100      	movs	r1, #0
 8000f88:	f003 f8e2 	bl	8004150 <memset>
  if(huart->Instance==USART2)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a1e      	ldr	r2, [pc, #120]	; (800100c <HAL_UART_MspInit+0x98>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d136      	bne.n	8001004 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f96:	4b1e      	ldr	r3, [pc, #120]	; (8001010 <HAL_UART_MspInit+0x9c>)
 8000f98:	4a1d      	ldr	r2, [pc, #116]	; (8001010 <HAL_UART_MspInit+0x9c>)
 8000f9a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8000f9c:	2180      	movs	r1, #128	; 0x80
 8000f9e:	0289      	lsls	r1, r1, #10
 8000fa0:	430a      	orrs	r2, r1
 8000fa2:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa4:	4b1a      	ldr	r3, [pc, #104]	; (8001010 <HAL_UART_MspInit+0x9c>)
 8000fa6:	4a1a      	ldr	r2, [pc, #104]	; (8001010 <HAL_UART_MspInit+0x9c>)
 8000fa8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000faa:	2101      	movs	r1, #1
 8000fac:	430a      	orrs	r2, r1
 8000fae:	62da      	str	r2, [r3, #44]	; 0x2c
 8000fb0:	4b17      	ldr	r3, [pc, #92]	; (8001010 <HAL_UART_MspInit+0x9c>)
 8000fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	60bb      	str	r3, [r7, #8]
 8000fba:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000fbc:	230c      	movs	r3, #12
 8000fbe:	18fb      	adds	r3, r7, r3
 8000fc0:	220c      	movs	r2, #12
 8000fc2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc4:	230c      	movs	r3, #12
 8000fc6:	18fb      	adds	r3, r7, r3
 8000fc8:	2202      	movs	r2, #2
 8000fca:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fcc:	230c      	movs	r3, #12
 8000fce:	18fb      	adds	r3, r7, r3
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fd4:	230c      	movs	r3, #12
 8000fd6:	18fb      	adds	r3, r7, r3
 8000fd8:	2203      	movs	r2, #3
 8000fda:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8000fdc:	230c      	movs	r3, #12
 8000fde:	18fb      	adds	r3, r7, r3
 8000fe0:	2204      	movs	r2, #4
 8000fe2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe4:	230c      	movs	r3, #12
 8000fe6:	18fa      	adds	r2, r7, r3
 8000fe8:	23a0      	movs	r3, #160	; 0xa0
 8000fea:	05db      	lsls	r3, r3, #23
 8000fec:	0011      	movs	r1, r2
 8000fee:	0018      	movs	r0, r3
 8000ff0:	f000 fe8a 	bl	8001d08 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	201c      	movs	r0, #28
 8000ffa:	f000 fdc9 	bl	8001b90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000ffe:	201c      	movs	r0, #28
 8001000:	f000 fddc 	bl	8001bbc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001004:	46c0      	nop			; (mov r8, r8)
 8001006:	46bd      	mov	sp, r7
 8001008:	b008      	add	sp, #32
 800100a:	bd80      	pop	{r7, pc}
 800100c:	40004400 	.word	0x40004400
 8001010:	40021000 	.word	0x40021000

08001014 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001018:	e7fe      	b.n	8001018 <NMI_Handler+0x4>

0800101a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800101a:	b580      	push	{r7, lr}
 800101c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800101e:	e7fe      	b.n	800101e <HardFault_Handler+0x4>

08001020 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001024:	46c0      	nop			; (mov r8, r8)
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}

0800102a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800102a:	b580      	push	{r7, lr}
 800102c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800102e:	46c0      	nop			; (mov r8, r8)
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}

08001034 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001038:	f000 f86a 	bl	8001110 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800103c:	46c0      	nop			; (mov r8, r8)
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
	...

08001044 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001048:	4b03      	ldr	r3, [pc, #12]	; (8001058 <USART2_IRQHandler+0x14>)
 800104a:	0018      	movs	r0, r3
 800104c:	f001 ffc6 	bl	8002fdc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001050:	46c0      	nop			; (mov r8, r8)
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	46c0      	nop			; (mov r8, r8)
 8001058:	20000444 	.word	0x20000444

0800105c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001060:	46c0      	nop			; (mov r8, r8)
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
	...

08001068 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800106e:	1dfb      	adds	r3, r7, #7
 8001070:	2200      	movs	r2, #0
 8001072:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001074:	4b0b      	ldr	r3, [pc, #44]	; (80010a4 <HAL_Init+0x3c>)
 8001076:	4a0b      	ldr	r2, [pc, #44]	; (80010a4 <HAL_Init+0x3c>)
 8001078:	6812      	ldr	r2, [r2, #0]
 800107a:	2140      	movs	r1, #64	; 0x40
 800107c:	430a      	orrs	r2, r1
 800107e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001080:	2000      	movs	r0, #0
 8001082:	f000 f811 	bl	80010a8 <HAL_InitTick>
 8001086:	1e03      	subs	r3, r0, #0
 8001088:	d003      	beq.n	8001092 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800108a:	1dfb      	adds	r3, r7, #7
 800108c:	2201      	movs	r2, #1
 800108e:	701a      	strb	r2, [r3, #0]
 8001090:	e001      	b.n	8001096 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001092:	f7ff ff1b 	bl	8000ecc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001096:	1dfb      	adds	r3, r7, #7
 8001098:	781b      	ldrb	r3, [r3, #0]
}
 800109a:	0018      	movs	r0, r3
 800109c:	46bd      	mov	sp, r7
 800109e:	b002      	add	sp, #8
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	46c0      	nop			; (mov r8, r8)
 80010a4:	40022000 	.word	0x40022000

080010a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010a8:	b590      	push	{r4, r7, lr}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010b0:	4b14      	ldr	r3, [pc, #80]	; (8001104 <HAL_InitTick+0x5c>)
 80010b2:	681c      	ldr	r4, [r3, #0]
 80010b4:	4b14      	ldr	r3, [pc, #80]	; (8001108 <HAL_InitTick+0x60>)
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	0019      	movs	r1, r3
 80010ba:	23fa      	movs	r3, #250	; 0xfa
 80010bc:	0098      	lsls	r0, r3, #2
 80010be:	f7ff f823 	bl	8000108 <__udivsi3>
 80010c2:	0003      	movs	r3, r0
 80010c4:	0019      	movs	r1, r3
 80010c6:	0020      	movs	r0, r4
 80010c8:	f7ff f81e 	bl	8000108 <__udivsi3>
 80010cc:	0003      	movs	r3, r0
 80010ce:	0018      	movs	r0, r3
 80010d0:	f000 fd84 	bl	8001bdc <HAL_SYSTICK_Config>
 80010d4:	1e03      	subs	r3, r0, #0
 80010d6:	d001      	beq.n	80010dc <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80010d8:	2301      	movs	r3, #1
 80010da:	e00f      	b.n	80010fc <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2b03      	cmp	r3, #3
 80010e0:	d80b      	bhi.n	80010fa <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010e2:	6879      	ldr	r1, [r7, #4]
 80010e4:	2301      	movs	r3, #1
 80010e6:	425b      	negs	r3, r3
 80010e8:	2200      	movs	r2, #0
 80010ea:	0018      	movs	r0, r3
 80010ec:	f000 fd50 	bl	8001b90 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010f0:	4b06      	ldr	r3, [pc, #24]	; (800110c <HAL_InitTick+0x64>)
 80010f2:	687a      	ldr	r2, [r7, #4]
 80010f4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010f6:	2300      	movs	r3, #0
 80010f8:	e000      	b.n	80010fc <HAL_InitTick+0x54>
    return HAL_ERROR;
 80010fa:	2301      	movs	r3, #1
}
 80010fc:	0018      	movs	r0, r3
 80010fe:	46bd      	mov	sp, r7
 8001100:	b003      	add	sp, #12
 8001102:	bd90      	pop	{r4, r7, pc}
 8001104:	20000000 	.word	0x20000000
 8001108:	20000008 	.word	0x20000008
 800110c:	20000004 	.word	0x20000004

08001110 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001114:	4b05      	ldr	r3, [pc, #20]	; (800112c <HAL_IncTick+0x1c>)
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	001a      	movs	r2, r3
 800111a:	4b05      	ldr	r3, [pc, #20]	; (8001130 <HAL_IncTick+0x20>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	18d2      	adds	r2, r2, r3
 8001120:	4b03      	ldr	r3, [pc, #12]	; (8001130 <HAL_IncTick+0x20>)
 8001122:	601a      	str	r2, [r3, #0]
}
 8001124:	46c0      	nop			; (mov r8, r8)
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	46c0      	nop			; (mov r8, r8)
 800112c:	20000008 	.word	0x20000008
 8001130:	20000524 	.word	0x20000524

08001134 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
  return uwTick;
 8001138:	4b02      	ldr	r3, [pc, #8]	; (8001144 <HAL_GetTick+0x10>)
 800113a:	681b      	ldr	r3, [r3, #0]
}
 800113c:	0018      	movs	r0, r3
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	46c0      	nop			; (mov r8, r8)
 8001144:	20000524 	.word	0x20000524

08001148 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001150:	f7ff fff0 	bl	8001134 <HAL_GetTick>
 8001154:	0003      	movs	r3, r0
 8001156:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	3301      	adds	r3, #1
 8001160:	d005      	beq.n	800116e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001162:	4b09      	ldr	r3, [pc, #36]	; (8001188 <HAL_Delay+0x40>)
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	001a      	movs	r2, r3
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	189b      	adds	r3, r3, r2
 800116c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800116e:	46c0      	nop			; (mov r8, r8)
 8001170:	f7ff ffe0 	bl	8001134 <HAL_GetTick>
 8001174:	0002      	movs	r2, r0
 8001176:	68bb      	ldr	r3, [r7, #8]
 8001178:	1ad2      	subs	r2, r2, r3
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	429a      	cmp	r2, r3
 800117e:	d3f7      	bcc.n	8001170 <HAL_Delay+0x28>
  {
  }
}
 8001180:	46c0      	nop			; (mov r8, r8)
 8001182:	46bd      	mov	sp, r7
 8001184:	b004      	add	sp, #16
 8001186:	bd80      	pop	{r7, pc}
 8001188:	20000008 	.word	0x20000008

0800118c <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800118c:	b590      	push	{r4, r7, lr}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d101      	bne.n	800119e <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 800119a:	2301      	movs	r3, #1
 800119c:	e159      	b.n	8001452 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d10a      	bne.n	80011bc <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2200      	movs	r2, #0
 80011aa:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2250      	movs	r2, #80	; 0x50
 80011b0:	2100      	movs	r1, #0
 80011b2:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	0018      	movs	r0, r3
 80011b8:	f7ff fe9c 	bl	8000ef4 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011c0:	2210      	movs	r2, #16
 80011c2:	4013      	ands	r3, r2
 80011c4:	2b10      	cmp	r3, #16
 80011c6:	d005      	beq.n	80011d4 <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	689b      	ldr	r3, [r3, #8]
 80011ce:	2204      	movs	r2, #4
 80011d0:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80011d2:	d00b      	beq.n	80011ec <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011d8:	2210      	movs	r2, #16
 80011da:	431a      	orrs	r2, r3
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2250      	movs	r2, #80	; 0x50
 80011e4:	2100      	movs	r1, #0
 80011e6:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80011e8:	2301      	movs	r3, #1
 80011ea:	e132      	b.n	8001452 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011f0:	4a9a      	ldr	r2, [pc, #616]	; (800145c <HAL_ADC_Init+0x2d0>)
 80011f2:	4013      	ands	r3, r2
 80011f4:	2202      	movs	r2, #2
 80011f6:	431a      	orrs	r2, r3
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	689b      	ldr	r3, [r3, #8]
 8001202:	2203      	movs	r2, #3
 8001204:	4013      	ands	r3, r2
 8001206:	2b01      	cmp	r3, #1
 8001208:	d108      	bne.n	800121c <HAL_ADC_Init+0x90>
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	2201      	movs	r2, #1
 8001212:	4013      	ands	r3, r2
 8001214:	2b01      	cmp	r3, #1
 8001216:	d101      	bne.n	800121c <HAL_ADC_Init+0x90>
 8001218:	2301      	movs	r3, #1
 800121a:	e000      	b.n	800121e <HAL_ADC_Init+0x92>
 800121c:	2300      	movs	r3, #0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d149      	bne.n	80012b6 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	685a      	ldr	r2, [r3, #4]
 8001226:	23c0      	movs	r3, #192	; 0xc0
 8001228:	061b      	lsls	r3, r3, #24
 800122a:	429a      	cmp	r2, r3
 800122c:	d00b      	beq.n	8001246 <HAL_ADC_Init+0xba>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	685a      	ldr	r2, [r3, #4]
 8001232:	2380      	movs	r3, #128	; 0x80
 8001234:	05db      	lsls	r3, r3, #23
 8001236:	429a      	cmp	r2, r3
 8001238:	d005      	beq.n	8001246 <HAL_ADC_Init+0xba>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	685a      	ldr	r2, [r3, #4]
 800123e:	2380      	movs	r3, #128	; 0x80
 8001240:	061b      	lsls	r3, r3, #24
 8001242:	429a      	cmp	r2, r3
 8001244:	d111      	bne.n	800126a <HAL_ADC_Init+0xde>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	687a      	ldr	r2, [r7, #4]
 800124c:	6812      	ldr	r2, [r2, #0]
 800124e:	6912      	ldr	r2, [r2, #16]
 8001250:	0092      	lsls	r2, r2, #2
 8001252:	0892      	lsrs	r2, r2, #2
 8001254:	611a      	str	r2, [r3, #16]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	687a      	ldr	r2, [r7, #4]
 800125c:	6812      	ldr	r2, [r2, #0]
 800125e:	6911      	ldr	r1, [r2, #16]
 8001260:	687a      	ldr	r2, [r7, #4]
 8001262:	6852      	ldr	r2, [r2, #4]
 8001264:	430a      	orrs	r2, r1
 8001266:	611a      	str	r2, [r3, #16]
 8001268:	e014      	b.n	8001294 <HAL_ADC_Init+0x108>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	687a      	ldr	r2, [r7, #4]
 8001270:	6812      	ldr	r2, [r2, #0]
 8001272:	6912      	ldr	r2, [r2, #16]
 8001274:	0092      	lsls	r2, r2, #2
 8001276:	0892      	lsrs	r2, r2, #2
 8001278:	611a      	str	r2, [r3, #16]
 800127a:	4b79      	ldr	r3, [pc, #484]	; (8001460 <HAL_ADC_Init+0x2d4>)
 800127c:	4a78      	ldr	r2, [pc, #480]	; (8001460 <HAL_ADC_Init+0x2d4>)
 800127e:	6812      	ldr	r2, [r2, #0]
 8001280:	4978      	ldr	r1, [pc, #480]	; (8001464 <HAL_ADC_Init+0x2d8>)
 8001282:	400a      	ands	r2, r1
 8001284:	601a      	str	r2, [r3, #0]
 8001286:	4a76      	ldr	r2, [pc, #472]	; (8001460 <HAL_ADC_Init+0x2d4>)
 8001288:	4b75      	ldr	r3, [pc, #468]	; (8001460 <HAL_ADC_Init+0x2d4>)
 800128a:	6819      	ldr	r1, [r3, #0]
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	430b      	orrs	r3, r1
 8001292:	6013      	str	r3, [r2, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	687a      	ldr	r2, [r7, #4]
 800129a:	6812      	ldr	r2, [r2, #0]
 800129c:	68d2      	ldr	r2, [r2, #12]
 800129e:	2118      	movs	r1, #24
 80012a0:	438a      	bics	r2, r1
 80012a2:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	687a      	ldr	r2, [r7, #4]
 80012aa:	6812      	ldr	r2, [r2, #0]
 80012ac:	68d1      	ldr	r1, [r2, #12]
 80012ae:	687a      	ldr	r2, [r7, #4]
 80012b0:	6892      	ldr	r2, [r2, #8]
 80012b2:	430a      	orrs	r2, r1
 80012b4:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 80012b6:	4b6a      	ldr	r3, [pc, #424]	; (8001460 <HAL_ADC_Init+0x2d4>)
 80012b8:	4a69      	ldr	r2, [pc, #420]	; (8001460 <HAL_ADC_Init+0x2d4>)
 80012ba:	6812      	ldr	r2, [r2, #0]
 80012bc:	496a      	ldr	r1, [pc, #424]	; (8001468 <HAL_ADC_Init+0x2dc>)
 80012be:	400a      	ands	r2, r1
 80012c0:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 80012c2:	4a67      	ldr	r2, [pc, #412]	; (8001460 <HAL_ADC_Init+0x2d4>)
 80012c4:	4b66      	ldr	r3, [pc, #408]	; (8001460 <HAL_ADC_Init+0x2d4>)
 80012c6:	6819      	ldr	r1, [r3, #0]
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012cc:	065b      	lsls	r3, r3, #25
 80012ce:	430b      	orrs	r3, r1
 80012d0:	6013      	str	r3, [r2, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	689a      	ldr	r2, [r3, #8]
 80012d8:	2380      	movs	r3, #128	; 0x80
 80012da:	055b      	lsls	r3, r3, #21
 80012dc:	4013      	ands	r3, r2
 80012de:	d108      	bne.n	80012f2 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	687a      	ldr	r2, [r7, #4]
 80012e6:	6812      	ldr	r2, [r2, #0]
 80012e8:	6892      	ldr	r2, [r2, #8]
 80012ea:	2180      	movs	r1, #128	; 0x80
 80012ec:	0549      	lsls	r1, r1, #21
 80012ee:	430a      	orrs	r2, r1
 80012f0:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	687a      	ldr	r2, [r7, #4]
 80012f8:	6812      	ldr	r2, [r2, #0]
 80012fa:	68d2      	ldr	r2, [r2, #12]
 80012fc:	495b      	ldr	r1, [pc, #364]	; (800146c <HAL_ADC_Init+0x2e0>)
 80012fe:	400a      	ands	r2, r1
 8001300:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	687a      	ldr	r2, [r7, #4]
 8001308:	6812      	ldr	r2, [r2, #0]
 800130a:	68d1      	ldr	r1, [r2, #12]
 800130c:	687a      	ldr	r2, [r7, #4]
 800130e:	68d0      	ldr	r0, [r2, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8001310:	687a      	ldr	r2, [r7, #4]
 8001312:	6912      	ldr	r2, [r2, #16]
 8001314:	2a02      	cmp	r2, #2
 8001316:	d101      	bne.n	800131c <HAL_ADC_Init+0x190>
 8001318:	2204      	movs	r2, #4
 800131a:	e000      	b.n	800131e <HAL_ADC_Init+0x192>
 800131c:	2200      	movs	r2, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800131e:	4310      	orrs	r0, r2
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001320:	687a      	ldr	r2, [r7, #4]
 8001322:	2420      	movs	r4, #32
 8001324:	5d12      	ldrb	r2, [r2, r4]
 8001326:	0352      	lsls	r2, r2, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8001328:	4310      	orrs	r0, r2
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800132a:	687a      	ldr	r2, [r7, #4]
 800132c:	242c      	movs	r4, #44	; 0x2c
 800132e:	5d12      	ldrb	r2, [r2, r4]
 8001330:	0052      	lsls	r2, r2, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001332:	4310      	orrs	r0, r2
                            hadc->Init.Overrun                               |
 8001334:	687a      	ldr	r2, [r7, #4]
 8001336:	6b12      	ldr	r2, [r2, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001338:	4310      	orrs	r0, r2
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800133a:	687a      	ldr	r2, [r7, #4]
 800133c:	6992      	ldr	r2, [r2, #24]
 800133e:	0392      	lsls	r2, r2, #14
                            hadc->Init.Overrun                               |
 8001340:	4310      	orrs	r0, r2
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8001342:	687a      	ldr	r2, [r7, #4]
 8001344:	69d2      	ldr	r2, [r2, #28]
 8001346:	03d2      	lsls	r2, r2, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8001348:	4302      	orrs	r2, r0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800134a:	430a      	orrs	r2, r1
 800134c:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001352:	23c2      	movs	r3, #194	; 0xc2
 8001354:	33ff      	adds	r3, #255	; 0xff
 8001356:	429a      	cmp	r2, r3
 8001358:	d00b      	beq.n	8001372 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	687a      	ldr	r2, [r7, #4]
 8001360:	6812      	ldr	r2, [r2, #0]
 8001362:	68d1      	ldr	r1, [r2, #12]
 8001364:	687a      	ldr	r2, [r7, #4]
 8001366:	6a50      	ldr	r0, [r2, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8001368:	687a      	ldr	r2, [r7, #4]
 800136a:	6a92      	ldr	r2, [r2, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800136c:	4302      	orrs	r2, r0
 800136e:	430a      	orrs	r2, r1
 8001370:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2221      	movs	r2, #33	; 0x21
 8001376:	5c9b      	ldrb	r3, [r3, r2]
 8001378:	2b01      	cmp	r3, #1
 800137a:	d11a      	bne.n	80013b2 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2220      	movs	r2, #32
 8001380:	5c9b      	ldrb	r3, [r3, r2]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d109      	bne.n	800139a <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	687a      	ldr	r2, [r7, #4]
 800138c:	6812      	ldr	r2, [r2, #0]
 800138e:	68d2      	ldr	r2, [r2, #12]
 8001390:	2180      	movs	r1, #128	; 0x80
 8001392:	0249      	lsls	r1, r1, #9
 8001394:	430a      	orrs	r2, r1
 8001396:	60da      	str	r2, [r3, #12]
 8001398:	e00b      	b.n	80013b2 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800139e:	2220      	movs	r2, #32
 80013a0:	431a      	orrs	r2, r3
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013aa:	2201      	movs	r2, #1
 80013ac:	431a      	orrs	r2, r3
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013b6:	2b01      	cmp	r3, #1
 80013b8:	d11f      	bne.n	80013fa <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	687a      	ldr	r2, [r7, #4]
 80013c0:	6812      	ldr	r2, [r2, #0]
 80013c2:	6912      	ldr	r2, [r2, #16]
 80013c4:	492a      	ldr	r1, [pc, #168]	; (8001470 <HAL_ADC_Init+0x2e4>)
 80013c6:	400a      	ands	r2, r1
 80013c8:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	687a      	ldr	r2, [r7, #4]
 80013d0:	6812      	ldr	r2, [r2, #0]
 80013d2:	6911      	ldr	r1, [r2, #16]
 80013d4:	687a      	ldr	r2, [r7, #4]
 80013d6:	6c10      	ldr	r0, [r2, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 80013d8:	687a      	ldr	r2, [r7, #4]
 80013da:	6c52      	ldr	r2, [r2, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80013dc:	4310      	orrs	r0, r2
                               hadc->Init.Oversample.TriggeredMode );
 80013de:	687a      	ldr	r2, [r7, #4]
 80013e0:	6c92      	ldr	r2, [r2, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 80013e2:	4302      	orrs	r2, r0
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80013e4:	430a      	orrs	r2, r1
 80013e6:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	687a      	ldr	r2, [r7, #4]
 80013ee:	6812      	ldr	r2, [r2, #0]
 80013f0:	6912      	ldr	r2, [r2, #16]
 80013f2:	2101      	movs	r1, #1
 80013f4:	430a      	orrs	r2, r1
 80013f6:	611a      	str	r2, [r3, #16]
 80013f8:	e00e      	b.n	8001418 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	691b      	ldr	r3, [r3, #16]
 8001400:	2201      	movs	r2, #1
 8001402:	4013      	ands	r3, r2
 8001404:	2b01      	cmp	r3, #1
 8001406:	d107      	bne.n	8001418 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	687a      	ldr	r2, [r7, #4]
 800140e:	6812      	ldr	r2, [r2, #0]
 8001410:	6912      	ldr	r2, [r2, #16]
 8001412:	2101      	movs	r1, #1
 8001414:	438a      	bics	r2, r1
 8001416:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	687a      	ldr	r2, [r7, #4]
 800141e:	6812      	ldr	r2, [r2, #0]
 8001420:	6952      	ldr	r2, [r2, #20]
 8001422:	2107      	movs	r1, #7
 8001424:	438a      	bics	r2, r1
 8001426:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	687a      	ldr	r2, [r7, #4]
 800142e:	6812      	ldr	r2, [r2, #0]
 8001430:	6951      	ldr	r1, [r2, #20]
 8001432:	687a      	ldr	r2, [r7, #4]
 8001434:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001436:	430a      	orrs	r2, r1
 8001438:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2200      	movs	r2, #0
 800143e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001444:	2203      	movs	r2, #3
 8001446:	4393      	bics	r3, r2
 8001448:	2201      	movs	r2, #1
 800144a:	431a      	orrs	r2, r3
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8001450:	2300      	movs	r3, #0
}
 8001452:	0018      	movs	r0, r3
 8001454:	46bd      	mov	sp, r7
 8001456:	b003      	add	sp, #12
 8001458:	bd90      	pop	{r4, r7, pc}
 800145a:	46c0      	nop			; (mov r8, r8)
 800145c:	fffffefd 	.word	0xfffffefd
 8001460:	40012708 	.word	0x40012708
 8001464:	ffc3ffff 	.word	0xffc3ffff
 8001468:	fdffffff 	.word	0xfdffffff
 800146c:	fffe0219 	.word	0xfffe0219
 8001470:	fffffc03 	.word	0xfffffc03

08001474 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001474:	b590      	push	{r4, r7, lr}
 8001476:	b085      	sub	sp, #20
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800147c:	230f      	movs	r3, #15
 800147e:	18fb      	adds	r3, r7, r3
 8001480:	2200      	movs	r2, #0
 8001482:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	689b      	ldr	r3, [r3, #8]
 800148a:	2204      	movs	r2, #4
 800148c:	4013      	ands	r3, r2
 800148e:	d138      	bne.n	8001502 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2250      	movs	r2, #80	; 0x50
 8001494:	5c9b      	ldrb	r3, [r3, r2]
 8001496:	2b01      	cmp	r3, #1
 8001498:	d101      	bne.n	800149e <HAL_ADC_Start+0x2a>
 800149a:	2302      	movs	r3, #2
 800149c:	e038      	b.n	8001510 <HAL_ADC_Start+0x9c>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2250      	movs	r2, #80	; 0x50
 80014a2:	2101      	movs	r1, #1
 80014a4:	5499      	strb	r1, [r3, r2]
    
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	69db      	ldr	r3, [r3, #28]
 80014aa:	2b01      	cmp	r3, #1
 80014ac:	d007      	beq.n	80014be <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 80014ae:	230f      	movs	r3, #15
 80014b0:	18fc      	adds	r4, r7, r3
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	0018      	movs	r0, r3
 80014b6:	f000 f99b 	bl	80017f0 <ADC_Enable>
 80014ba:	0003      	movs	r3, r0
 80014bc:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80014be:	230f      	movs	r3, #15
 80014c0:	18fb      	adds	r3, r7, r3
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d120      	bne.n	800150a <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014cc:	4a12      	ldr	r2, [pc, #72]	; (8001518 <HAL_ADC_Start+0xa4>)
 80014ce:	4013      	ands	r3, r2
 80014d0:	2280      	movs	r2, #128	; 0x80
 80014d2:	0052      	lsls	r2, r2, #1
 80014d4:	431a      	orrs	r2, r3
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2200      	movs	r2, #0
 80014de:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2250      	movs	r2, #80	; 0x50
 80014e4:	2100      	movs	r1, #0
 80014e6:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	221c      	movs	r2, #28
 80014ee:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	687a      	ldr	r2, [r7, #4]
 80014f6:	6812      	ldr	r2, [r2, #0]
 80014f8:	6892      	ldr	r2, [r2, #8]
 80014fa:	2104      	movs	r1, #4
 80014fc:	430a      	orrs	r2, r1
 80014fe:	609a      	str	r2, [r3, #8]
 8001500:	e003      	b.n	800150a <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001502:	230f      	movs	r3, #15
 8001504:	18fb      	adds	r3, r7, r3
 8001506:	2202      	movs	r2, #2
 8001508:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800150a:	230f      	movs	r3, #15
 800150c:	18fb      	adds	r3, r7, r3
 800150e:	781b      	ldrb	r3, [r3, #0]
}
 8001510:	0018      	movs	r0, r3
 8001512:	46bd      	mov	sp, r7
 8001514:	b005      	add	sp, #20
 8001516:	bd90      	pop	{r4, r7, pc}
 8001518:	fffff0fe 	.word	0xfffff0fe

0800151c <HAL_ADC_Stop>:
  *         case of auto_injection mode), disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 800151c:	b590      	push	{r4, r7, lr}
 800151e:	b085      	sub	sp, #20
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001524:	230f      	movs	r3, #15
 8001526:	18fb      	adds	r3, r7, r3
 8001528:	2200      	movs	r2, #0
 800152a:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2250      	movs	r2, #80	; 0x50
 8001530:	5c9b      	ldrb	r3, [r3, r2]
 8001532:	2b01      	cmp	r3, #1
 8001534:	d101      	bne.n	800153a <HAL_ADC_Stop+0x1e>
 8001536:	2302      	movs	r3, #2
 8001538:	e02c      	b.n	8001594 <HAL_ADC_Stop+0x78>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2250      	movs	r2, #80	; 0x50
 800153e:	2101      	movs	r1, #1
 8001540:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8001542:	230f      	movs	r3, #15
 8001544:	18fc      	adds	r4, r7, r3
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	0018      	movs	r0, r3
 800154a:	f000 fa11 	bl	8001970 <ADC_ConversionStop>
 800154e:	0003      	movs	r3, r0
 8001550:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001552:	230f      	movs	r3, #15
 8001554:	18fb      	adds	r3, r7, r3
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d114      	bne.n	8001586 <HAL_ADC_Stop+0x6a>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800155c:	230f      	movs	r3, #15
 800155e:	18fc      	adds	r4, r7, r3
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	0018      	movs	r0, r3
 8001564:	f000 f9a4 	bl	80018b0 <ADC_Disable>
 8001568:	0003      	movs	r3, r0
 800156a:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800156c:	230f      	movs	r3, #15
 800156e:	18fb      	adds	r3, r7, r3
 8001570:	781b      	ldrb	r3, [r3, #0]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d107      	bne.n	8001586 <HAL_ADC_Stop+0x6a>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800157a:	4a08      	ldr	r2, [pc, #32]	; (800159c <HAL_ADC_Stop+0x80>)
 800157c:	4013      	ands	r3, r2
 800157e:	2201      	movs	r2, #1
 8001580:	431a      	orrs	r2, r3
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2250      	movs	r2, #80	; 0x50
 800158a:	2100      	movs	r1, #0
 800158c:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 800158e:	230f      	movs	r3, #15
 8001590:	18fb      	adds	r3, r7, r3
 8001592:	781b      	ldrb	r3, [r3, #0]
}
 8001594:	0018      	movs	r0, r3
 8001596:	46bd      	mov	sp, r7
 8001598:	b005      	add	sp, #20
 800159a:	bd90      	pop	{r4, r7, pc}
 800159c:	fffffefe 	.word	0xfffffefe

080015a0 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b084      	sub	sp, #16
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
 80015a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80015aa:	2300      	movs	r3, #0
 80015ac:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 80015ae:	2300      	movs	r3, #0
 80015b0:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	695b      	ldr	r3, [r3, #20]
 80015b6:	2b08      	cmp	r3, #8
 80015b8:	d102      	bne.n	80015c0 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 80015ba:	2308      	movs	r3, #8
 80015bc:	60fb      	str	r3, [r7, #12]
 80015be:	e014      	b.n	80015ea <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	68db      	ldr	r3, [r3, #12]
 80015c6:	2201      	movs	r2, #1
 80015c8:	4013      	ands	r3, r2
 80015ca:	2b01      	cmp	r3, #1
 80015cc:	d10b      	bne.n	80015e6 <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015d2:	2220      	movs	r2, #32
 80015d4:	431a      	orrs	r2, r3
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2250      	movs	r2, #80	; 0x50
 80015de:	2100      	movs	r1, #0
 80015e0:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
 80015e4:	e06c      	b.n	80016c0 <HAL_ADC_PollForConversion+0x120>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80015e6:	230c      	movs	r3, #12
 80015e8:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80015ea:	f7ff fda3 	bl	8001134 <HAL_GetTick>
 80015ee:	0003      	movs	r3, r0
 80015f0:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80015f2:	e019      	b.n	8001628 <HAL_ADC_PollForConversion+0x88>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	3301      	adds	r3, #1
 80015f8:	d016      	beq.n	8001628 <HAL_ADC_PollForConversion+0x88>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d007      	beq.n	8001610 <HAL_ADC_PollForConversion+0x70>
 8001600:	f7ff fd98 	bl	8001134 <HAL_GetTick>
 8001604:	0002      	movs	r2, r0
 8001606:	68bb      	ldr	r3, [r7, #8]
 8001608:	1ad2      	subs	r2, r2, r3
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	429a      	cmp	r2, r3
 800160e:	d90b      	bls.n	8001628 <HAL_ADC_PollForConversion+0x88>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001614:	2204      	movs	r2, #4
 8001616:	431a      	orrs	r2, r3
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2250      	movs	r2, #80	; 0x50
 8001620:	2100      	movs	r1, #0
 8001622:	5499      	strb	r1, [r3, r2]
        
        return HAL_TIMEOUT;
 8001624:	2303      	movs	r3, #3
 8001626:	e04b      	b.n	80016c0 <HAL_ADC_PollForConversion+0x120>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	68fa      	ldr	r2, [r7, #12]
 8001630:	4013      	ands	r3, r2
 8001632:	d0df      	beq.n	80015f4 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001638:	2280      	movs	r2, #128	; 0x80
 800163a:	0092      	lsls	r2, r2, #2
 800163c:	431a      	orrs	r2, r3
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	68da      	ldr	r2, [r3, #12]
 8001648:	23c0      	movs	r3, #192	; 0xc0
 800164a:	011b      	lsls	r3, r3, #4
 800164c:	4013      	ands	r3, r2
 800164e:	d12e      	bne.n	80016ae <HAL_ADC_PollForConversion+0x10e>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2220      	movs	r2, #32
 8001654:	5c9b      	ldrb	r3, [r3, r2]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001656:	2b00      	cmp	r3, #0
 8001658:	d129      	bne.n	80016ae <HAL_ADC_PollForConversion+0x10e>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	2208      	movs	r2, #8
 8001662:	4013      	ands	r3, r2
 8001664:	2b08      	cmp	r3, #8
 8001666:	d122      	bne.n	80016ae <HAL_ADC_PollForConversion+0x10e>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	689b      	ldr	r3, [r3, #8]
 800166e:	2204      	movs	r2, #4
 8001670:	4013      	ands	r3, r2
 8001672:	d110      	bne.n	8001696 <HAL_ADC_PollForConversion+0xf6>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	687a      	ldr	r2, [r7, #4]
 800167a:	6812      	ldr	r2, [r2, #0]
 800167c:	6852      	ldr	r2, [r2, #4]
 800167e:	210c      	movs	r1, #12
 8001680:	438a      	bics	r2, r1
 8001682:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001688:	4a0f      	ldr	r2, [pc, #60]	; (80016c8 <HAL_ADC_PollForConversion+0x128>)
 800168a:	4013      	ands	r3, r2
 800168c:	2201      	movs	r2, #1
 800168e:	431a      	orrs	r2, r3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	655a      	str	r2, [r3, #84]	; 0x54
 8001694:	e00b      	b.n	80016ae <HAL_ADC_PollForConversion+0x10e>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800169a:	2220      	movs	r2, #32
 800169c:	431a      	orrs	r2, r3
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016a6:	2201      	movs	r2, #1
 80016a8:	431a      	orrs	r2, r3
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	659a      	str	r2, [r3, #88]	; 0x58
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	699b      	ldr	r3, [r3, #24]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d103      	bne.n	80016be <HAL_ADC_PollForConversion+0x11e>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	220c      	movs	r2, #12
 80016bc:	601a      	str	r2, [r3, #0]
  }
  
  /* Return function status */
  return HAL_OK;
 80016be:	2300      	movs	r3, #0
}
 80016c0:	0018      	movs	r0, r3
 80016c2:	46bd      	mov	sp, r7
 80016c4:	b004      	add	sp, #16
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	fffffefe 	.word	0xfffffefe

080016cc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80016da:	0018      	movs	r0, r3
 80016dc:	46bd      	mov	sp, r7
 80016de:	b002      	add	sp, #8
 80016e0:	bd80      	pop	{r7, pc}
	...

080016e4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
 80016ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2250      	movs	r2, #80	; 0x50
 80016f2:	5c9b      	ldrb	r3, [r3, r2]
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d101      	bne.n	80016fc <HAL_ADC_ConfigChannel+0x18>
 80016f8:	2302      	movs	r3, #2
 80016fa:	e06c      	b.n	80017d6 <HAL_ADC_ConfigChannel+0xf2>
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2250      	movs	r2, #80	; 0x50
 8001700:	2101      	movs	r1, #1
 8001702:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	689b      	ldr	r3, [r3, #8]
 800170a:	2204      	movs	r2, #4
 800170c:	4013      	ands	r3, r2
 800170e:	d00b      	beq.n	8001728 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001714:	2220      	movs	r2, #32
 8001716:	431a      	orrs	r2, r3
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2250      	movs	r2, #80	; 0x50
 8001720:	2100      	movs	r1, #0
 8001722:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8001724:	2301      	movs	r3, #1
 8001726:	e056      	b.n	80017d6 <HAL_ADC_ConfigChannel+0xf2>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	4a2c      	ldr	r2, [pc, #176]	; (80017e0 <HAL_ADC_ConfigChannel+0xfc>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d028      	beq.n	8001784 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	687a      	ldr	r2, [r7, #4]
 8001738:	6812      	ldr	r2, [r2, #0]
 800173a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800173c:	683a      	ldr	r2, [r7, #0]
 800173e:	6812      	ldr	r2, [r2, #0]
 8001740:	0352      	lsls	r2, r2, #13
 8001742:	0b52      	lsrs	r2, r2, #13
 8001744:	430a      	orrs	r2, r1
 8001746:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	2380      	movs	r3, #128	; 0x80
 800174e:	02db      	lsls	r3, r3, #11
 8001750:	4013      	ands	r3, r2
 8001752:	d009      	beq.n	8001768 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 8001754:	4b23      	ldr	r3, [pc, #140]	; (80017e4 <HAL_ADC_ConfigChannel+0x100>)
 8001756:	4a23      	ldr	r2, [pc, #140]	; (80017e4 <HAL_ADC_ConfigChannel+0x100>)
 8001758:	6812      	ldr	r2, [r2, #0]
 800175a:	2180      	movs	r1, #128	; 0x80
 800175c:	0409      	lsls	r1, r1, #16
 800175e:	430a      	orrs	r2, r1
 8001760:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8001762:	200a      	movs	r0, #10
 8001764:	f000 f94a 	bl	80019fc <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	2380      	movs	r3, #128	; 0x80
 800176e:	029b      	lsls	r3, r3, #10
 8001770:	4013      	ands	r3, r2
 8001772:	d02b      	beq.n	80017cc <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 8001774:	4b1b      	ldr	r3, [pc, #108]	; (80017e4 <HAL_ADC_ConfigChannel+0x100>)
 8001776:	4a1b      	ldr	r2, [pc, #108]	; (80017e4 <HAL_ADC_ConfigChannel+0x100>)
 8001778:	6812      	ldr	r2, [r2, #0]
 800177a:	2180      	movs	r1, #128	; 0x80
 800177c:	03c9      	lsls	r1, r1, #15
 800177e:	430a      	orrs	r2, r1
 8001780:	601a      	str	r2, [r3, #0]
 8001782:	e023      	b.n	80017cc <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	687a      	ldr	r2, [r7, #4]
 800178a:	6812      	ldr	r2, [r2, #0]
 800178c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800178e:	683a      	ldr	r2, [r7, #0]
 8001790:	6812      	ldr	r2, [r2, #0]
 8001792:	0352      	lsls	r2, r2, #13
 8001794:	0b52      	lsrs	r2, r2, #13
 8001796:	43d2      	mvns	r2, r2
 8001798:	400a      	ands	r2, r1
 800179a:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	2380      	movs	r3, #128	; 0x80
 80017a2:	02db      	lsls	r3, r3, #11
 80017a4:	4013      	ands	r3, r2
 80017a6:	d005      	beq.n	80017b4 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 80017a8:	4b0e      	ldr	r3, [pc, #56]	; (80017e4 <HAL_ADC_ConfigChannel+0x100>)
 80017aa:	4a0e      	ldr	r2, [pc, #56]	; (80017e4 <HAL_ADC_ConfigChannel+0x100>)
 80017ac:	6812      	ldr	r2, [r2, #0]
 80017ae:	490e      	ldr	r1, [pc, #56]	; (80017e8 <HAL_ADC_ConfigChannel+0x104>)
 80017b0:	400a      	ands	r2, r1
 80017b2:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	2380      	movs	r3, #128	; 0x80
 80017ba:	029b      	lsls	r3, r3, #10
 80017bc:	4013      	ands	r3, r2
 80017be:	d005      	beq.n	80017cc <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 80017c0:	4b08      	ldr	r3, [pc, #32]	; (80017e4 <HAL_ADC_ConfigChannel+0x100>)
 80017c2:	4a08      	ldr	r2, [pc, #32]	; (80017e4 <HAL_ADC_ConfigChannel+0x100>)
 80017c4:	6812      	ldr	r2, [r2, #0]
 80017c6:	4909      	ldr	r1, [pc, #36]	; (80017ec <HAL_ADC_ConfigChannel+0x108>)
 80017c8:	400a      	ands	r2, r1
 80017ca:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2250      	movs	r2, #80	; 0x50
 80017d0:	2100      	movs	r1, #0
 80017d2:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 80017d4:	2300      	movs	r3, #0
}
 80017d6:	0018      	movs	r0, r3
 80017d8:	46bd      	mov	sp, r7
 80017da:	b002      	add	sp, #8
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	46c0      	nop			; (mov r8, r8)
 80017e0:	00001001 	.word	0x00001001
 80017e4:	40012708 	.word	0x40012708
 80017e8:	ff7fffff 	.word	0xff7fffff
 80017ec:	ffbfffff 	.word	0xffbfffff

080017f0 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b084      	sub	sp, #16
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80017f8:	2300      	movs	r3, #0
 80017fa:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	2203      	movs	r2, #3
 8001804:	4013      	ands	r3, r2
 8001806:	2b01      	cmp	r3, #1
 8001808:	d108      	bne.n	800181c <ADC_Enable+0x2c>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	2201      	movs	r2, #1
 8001812:	4013      	ands	r3, r2
 8001814:	2b01      	cmp	r3, #1
 8001816:	d101      	bne.n	800181c <ADC_Enable+0x2c>
 8001818:	2301      	movs	r3, #1
 800181a:	e000      	b.n	800181e <ADC_Enable+0x2e>
 800181c:	2300      	movs	r3, #0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d13f      	bne.n	80018a2 <ADC_Enable+0xb2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	4a20      	ldr	r2, [pc, #128]	; (80018ac <ADC_Enable+0xbc>)
 800182a:	4013      	ands	r3, r2
 800182c:	d00d      	beq.n	800184a <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001832:	2210      	movs	r2, #16
 8001834:	431a      	orrs	r2, r3
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800183e:	2201      	movs	r2, #1
 8001840:	431a      	orrs	r2, r3
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	659a      	str	r2, [r3, #88]	; 0x58
      
      return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	e02c      	b.n	80018a4 <ADC_Enable+0xb4>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	687a      	ldr	r2, [r7, #4]
 8001850:	6812      	ldr	r2, [r2, #0]
 8001852:	6892      	ldr	r2, [r2, #8]
 8001854:	2101      	movs	r1, #1
 8001856:	430a      	orrs	r2, r1
 8001858:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 800185a:	2001      	movs	r0, #1
 800185c:	f000 f8ce 	bl	80019fc <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8001860:	f7ff fc68 	bl	8001134 <HAL_GetTick>
 8001864:	0003      	movs	r3, r0
 8001866:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001868:	e014      	b.n	8001894 <ADC_Enable+0xa4>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800186a:	f7ff fc63 	bl	8001134 <HAL_GetTick>
 800186e:	0002      	movs	r2, r0
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	1ad3      	subs	r3, r2, r3
 8001874:	2b0a      	cmp	r3, #10
 8001876:	d90d      	bls.n	8001894 <ADC_Enable+0xa4>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800187c:	2210      	movs	r2, #16
 800187e:	431a      	orrs	r2, r3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001888:	2201      	movs	r2, #1
 800188a:	431a      	orrs	r2, r3
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 8001890:	2301      	movs	r3, #1
 8001892:	e007      	b.n	80018a4 <ADC_Enable+0xb4>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	2201      	movs	r2, #1
 800189c:	4013      	ands	r3, r2
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d1e3      	bne.n	800186a <ADC_Enable+0x7a>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80018a2:	2300      	movs	r3, #0
}
 80018a4:	0018      	movs	r0, r3
 80018a6:	46bd      	mov	sp, r7
 80018a8:	b004      	add	sp, #16
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	80000017 	.word	0x80000017

080018b0 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b084      	sub	sp, #16
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80018b8:	2300      	movs	r3, #0
 80018ba:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	2203      	movs	r2, #3
 80018c4:	4013      	ands	r3, r2
 80018c6:	2b01      	cmp	r3, #1
 80018c8:	d108      	bne.n	80018dc <ADC_Disable+0x2c>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	2201      	movs	r2, #1
 80018d2:	4013      	ands	r3, r2
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	d101      	bne.n	80018dc <ADC_Disable+0x2c>
 80018d8:	2301      	movs	r3, #1
 80018da:	e000      	b.n	80018de <ADC_Disable+0x2e>
 80018dc:	2300      	movs	r3, #0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d041      	beq.n	8001966 <ADC_Disable+0xb6>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	2205      	movs	r2, #5
 80018ea:	4013      	ands	r3, r2
 80018ec:	2b01      	cmp	r3, #1
 80018ee:	d110      	bne.n	8001912 <ADC_Disable+0x62>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	687a      	ldr	r2, [r7, #4]
 80018f6:	6812      	ldr	r2, [r2, #0]
 80018f8:	6892      	ldr	r2, [r2, #8]
 80018fa:	2102      	movs	r1, #2
 80018fc:	430a      	orrs	r2, r1
 80018fe:	609a      	str	r2, [r3, #8]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	2203      	movs	r2, #3
 8001906:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001908:	f7ff fc14 	bl	8001134 <HAL_GetTick>
 800190c:	0003      	movs	r3, r0
 800190e:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001910:	e022      	b.n	8001958 <ADC_Disable+0xa8>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001916:	2210      	movs	r2, #16
 8001918:	431a      	orrs	r2, r3
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001922:	2201      	movs	r2, #1
 8001924:	431a      	orrs	r2, r3
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	e01c      	b.n	8001968 <ADC_Disable+0xb8>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800192e:	f7ff fc01 	bl	8001134 <HAL_GetTick>
 8001932:	0002      	movs	r2, r0
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	1ad3      	subs	r3, r2, r3
 8001938:	2b0a      	cmp	r3, #10
 800193a:	d90d      	bls.n	8001958 <ADC_Disable+0xa8>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001940:	2210      	movs	r2, #16
 8001942:	431a      	orrs	r2, r3
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800194c:	2201      	movs	r2, #1
 800194e:	431a      	orrs	r2, r3
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 8001954:	2301      	movs	r3, #1
 8001956:	e007      	b.n	8001968 <ADC_Disable+0xb8>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	2201      	movs	r2, #1
 8001960:	4013      	ands	r3, r2
 8001962:	2b01      	cmp	r3, #1
 8001964:	d0e3      	beq.n	800192e <ADC_Disable+0x7e>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001966:	2300      	movs	r3, #0
}
 8001968:	0018      	movs	r0, r3
 800196a:	46bd      	mov	sp, r7
 800196c:	b004      	add	sp, #16
 800196e:	bd80      	pop	{r7, pc}

08001970 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b084      	sub	sp, #16
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001978:	2300      	movs	r3, #0
 800197a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	2204      	movs	r2, #4
 8001984:	4013      	ands	r3, r2
 8001986:	d034      	beq.n	80019f2 <ADC_ConversionStop+0x82>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	2204      	movs	r2, #4
 8001990:	4013      	ands	r3, r2
 8001992:	2b04      	cmp	r3, #4
 8001994:	d10d      	bne.n	80019b2 <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	2202      	movs	r2, #2
 800199e:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80019a0:	d107      	bne.n	80019b2 <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	687a      	ldr	r2, [r7, #4]
 80019a8:	6812      	ldr	r2, [r2, #0]
 80019aa:	6892      	ldr	r2, [r2, #8]
 80019ac:	2110      	movs	r1, #16
 80019ae:	430a      	orrs	r2, r1
 80019b0:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80019b2:	f7ff fbbf 	bl	8001134 <HAL_GetTick>
 80019b6:	0003      	movs	r3, r0
 80019b8:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80019ba:	e014      	b.n	80019e6 <ADC_ConversionStop+0x76>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80019bc:	f7ff fbba 	bl	8001134 <HAL_GetTick>
 80019c0:	0002      	movs	r2, r0
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	1ad3      	subs	r3, r2, r3
 80019c6:	2b0a      	cmp	r3, #10
 80019c8:	d90d      	bls.n	80019e6 <ADC_ConversionStop+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019ce:	2210      	movs	r2, #16
 80019d0:	431a      	orrs	r2, r3
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	655a      	str	r2, [r3, #84]	; 0x54
      
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019da:	2201      	movs	r2, #1
 80019dc:	431a      	orrs	r2, r3
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e006      	b.n	80019f4 <ADC_ConversionStop+0x84>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	2204      	movs	r2, #4
 80019ee:	4013      	ands	r3, r2
 80019f0:	d1e4      	bne.n	80019bc <ADC_ConversionStop+0x4c>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 80019f2:	2300      	movs	r3, #0
}
 80019f4:	0018      	movs	r0, r3
 80019f6:	46bd      	mov	sp, r7
 80019f8:	b004      	add	sp, #16
 80019fa:	bd80      	pop	{r7, pc}

080019fc <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b084      	sub	sp, #16
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8001a04:	4b0a      	ldr	r3, [pc, #40]	; (8001a30 <ADC_DelayMicroSecond+0x34>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	490a      	ldr	r1, [pc, #40]	; (8001a34 <ADC_DelayMicroSecond+0x38>)
 8001a0a:	0018      	movs	r0, r3
 8001a0c:	f7fe fb7c 	bl	8000108 <__udivsi3>
 8001a10:	0003      	movs	r3, r0
 8001a12:	001a      	movs	r2, r3
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	4353      	muls	r3, r2
 8001a18:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 8001a1a:	e002      	b.n	8001a22 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	3b01      	subs	r3, #1
 8001a20:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d1f9      	bne.n	8001a1c <ADC_DelayMicroSecond+0x20>
  } 
}
 8001a28:	46c0      	nop			; (mov r8, r8)
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	b004      	add	sp, #16
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	20000000 	.word	0x20000000
 8001a34:	000f4240 	.word	0x000f4240

08001a38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	0002      	movs	r2, r0
 8001a40:	1dfb      	adds	r3, r7, #7
 8001a42:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001a44:	1dfb      	adds	r3, r7, #7
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	2b7f      	cmp	r3, #127	; 0x7f
 8001a4a:	d809      	bhi.n	8001a60 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a4c:	4b06      	ldr	r3, [pc, #24]	; (8001a68 <__NVIC_EnableIRQ+0x30>)
 8001a4e:	1dfa      	adds	r2, r7, #7
 8001a50:	7812      	ldrb	r2, [r2, #0]
 8001a52:	0011      	movs	r1, r2
 8001a54:	221f      	movs	r2, #31
 8001a56:	400a      	ands	r2, r1
 8001a58:	2101      	movs	r1, #1
 8001a5a:	4091      	lsls	r1, r2
 8001a5c:	000a      	movs	r2, r1
 8001a5e:	601a      	str	r2, [r3, #0]
  }
}
 8001a60:	46c0      	nop			; (mov r8, r8)
 8001a62:	46bd      	mov	sp, r7
 8001a64:	b002      	add	sp, #8
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	e000e100 	.word	0xe000e100

08001a6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a6c:	b5b0      	push	{r4, r5, r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	0002      	movs	r2, r0
 8001a74:	6039      	str	r1, [r7, #0]
 8001a76:	1dfb      	adds	r3, r7, #7
 8001a78:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001a7a:	1dfb      	adds	r3, r7, #7
 8001a7c:	781b      	ldrb	r3, [r3, #0]
 8001a7e:	2b7f      	cmp	r3, #127	; 0x7f
 8001a80:	d828      	bhi.n	8001ad4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001a82:	4c2f      	ldr	r4, [pc, #188]	; (8001b40 <__NVIC_SetPriority+0xd4>)
 8001a84:	1dfb      	adds	r3, r7, #7
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	b25b      	sxtb	r3, r3
 8001a8a:	089b      	lsrs	r3, r3, #2
 8001a8c:	492c      	ldr	r1, [pc, #176]	; (8001b40 <__NVIC_SetPriority+0xd4>)
 8001a8e:	1dfa      	adds	r2, r7, #7
 8001a90:	7812      	ldrb	r2, [r2, #0]
 8001a92:	b252      	sxtb	r2, r2
 8001a94:	0892      	lsrs	r2, r2, #2
 8001a96:	32c0      	adds	r2, #192	; 0xc0
 8001a98:	0092      	lsls	r2, r2, #2
 8001a9a:	5852      	ldr	r2, [r2, r1]
 8001a9c:	1df9      	adds	r1, r7, #7
 8001a9e:	7809      	ldrb	r1, [r1, #0]
 8001aa0:	0008      	movs	r0, r1
 8001aa2:	2103      	movs	r1, #3
 8001aa4:	4001      	ands	r1, r0
 8001aa6:	00c9      	lsls	r1, r1, #3
 8001aa8:	20ff      	movs	r0, #255	; 0xff
 8001aaa:	4088      	lsls	r0, r1
 8001aac:	0001      	movs	r1, r0
 8001aae:	43c9      	mvns	r1, r1
 8001ab0:	4011      	ands	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001ab2:	683a      	ldr	r2, [r7, #0]
 8001ab4:	0192      	lsls	r2, r2, #6
 8001ab6:	20ff      	movs	r0, #255	; 0xff
 8001ab8:	4010      	ands	r0, r2
 8001aba:	1dfa      	adds	r2, r7, #7
 8001abc:	7812      	ldrb	r2, [r2, #0]
 8001abe:	0015      	movs	r5, r2
 8001ac0:	2203      	movs	r2, #3
 8001ac2:	402a      	ands	r2, r5
 8001ac4:	00d2      	lsls	r2, r2, #3
 8001ac6:	4090      	lsls	r0, r2
 8001ac8:	0002      	movs	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001aca:	430a      	orrs	r2, r1
 8001acc:	33c0      	adds	r3, #192	; 0xc0
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	511a      	str	r2, [r3, r4]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001ad2:	e031      	b.n	8001b38 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ad4:	4c1b      	ldr	r4, [pc, #108]	; (8001b44 <__NVIC_SetPriority+0xd8>)
 8001ad6:	1dfb      	adds	r3, r7, #7
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	001a      	movs	r2, r3
 8001adc:	230f      	movs	r3, #15
 8001ade:	4013      	ands	r3, r2
 8001ae0:	3b08      	subs	r3, #8
 8001ae2:	0899      	lsrs	r1, r3, #2
 8001ae4:	4a17      	ldr	r2, [pc, #92]	; (8001b44 <__NVIC_SetPriority+0xd8>)
 8001ae6:	1dfb      	adds	r3, r7, #7
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	0018      	movs	r0, r3
 8001aec:	230f      	movs	r3, #15
 8001aee:	4003      	ands	r3, r0
 8001af0:	3b08      	subs	r3, #8
 8001af2:	089b      	lsrs	r3, r3, #2
 8001af4:	3306      	adds	r3, #6
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	18d3      	adds	r3, r2, r3
 8001afa:	3304      	adds	r3, #4
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	1dfa      	adds	r2, r7, #7
 8001b00:	7812      	ldrb	r2, [r2, #0]
 8001b02:	0010      	movs	r0, r2
 8001b04:	2203      	movs	r2, #3
 8001b06:	4002      	ands	r2, r0
 8001b08:	00d2      	lsls	r2, r2, #3
 8001b0a:	20ff      	movs	r0, #255	; 0xff
 8001b0c:	4090      	lsls	r0, r2
 8001b0e:	0002      	movs	r2, r0
 8001b10:	43d2      	mvns	r2, r2
 8001b12:	401a      	ands	r2, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	019b      	lsls	r3, r3, #6
 8001b18:	20ff      	movs	r0, #255	; 0xff
 8001b1a:	4018      	ands	r0, r3
 8001b1c:	1dfb      	adds	r3, r7, #7
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	001d      	movs	r5, r3
 8001b22:	2303      	movs	r3, #3
 8001b24:	402b      	ands	r3, r5
 8001b26:	00db      	lsls	r3, r3, #3
 8001b28:	4098      	lsls	r0, r3
 8001b2a:	0003      	movs	r3, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b2c:	431a      	orrs	r2, r3
 8001b2e:	1d8b      	adds	r3, r1, #6
 8001b30:	009b      	lsls	r3, r3, #2
 8001b32:	18e3      	adds	r3, r4, r3
 8001b34:	3304      	adds	r3, #4
 8001b36:	601a      	str	r2, [r3, #0]
}
 8001b38:	46c0      	nop			; (mov r8, r8)
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	b002      	add	sp, #8
 8001b3e:	bdb0      	pop	{r4, r5, r7, pc}
 8001b40:	e000e100 	.word	0xe000e100
 8001b44:	e000ed00 	.word	0xe000ed00

08001b48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	3b01      	subs	r3, #1
 8001b54:	4a0c      	ldr	r2, [pc, #48]	; (8001b88 <SysTick_Config+0x40>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d901      	bls.n	8001b5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e010      	b.n	8001b80 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b5e:	4b0b      	ldr	r3, [pc, #44]	; (8001b8c <SysTick_Config+0x44>)
 8001b60:	687a      	ldr	r2, [r7, #4]
 8001b62:	3a01      	subs	r2, #1
 8001b64:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b66:	2301      	movs	r3, #1
 8001b68:	425b      	negs	r3, r3
 8001b6a:	2103      	movs	r1, #3
 8001b6c:	0018      	movs	r0, r3
 8001b6e:	f7ff ff7d 	bl	8001a6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b72:	4b06      	ldr	r3, [pc, #24]	; (8001b8c <SysTick_Config+0x44>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b78:	4b04      	ldr	r3, [pc, #16]	; (8001b8c <SysTick_Config+0x44>)
 8001b7a:	2207      	movs	r2, #7
 8001b7c:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b7e:	2300      	movs	r3, #0
}
 8001b80:	0018      	movs	r0, r3
 8001b82:	46bd      	mov	sp, r7
 8001b84:	b002      	add	sp, #8
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	00ffffff 	.word	0x00ffffff
 8001b8c:	e000e010 	.word	0xe000e010

08001b90 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b084      	sub	sp, #16
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	60b9      	str	r1, [r7, #8]
 8001b98:	607a      	str	r2, [r7, #4]
 8001b9a:	230f      	movs	r3, #15
 8001b9c:	18fb      	adds	r3, r7, r3
 8001b9e:	1c02      	adds	r2, r0, #0
 8001ba0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001ba2:	68ba      	ldr	r2, [r7, #8]
 8001ba4:	230f      	movs	r3, #15
 8001ba6:	18fb      	adds	r3, r7, r3
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	b25b      	sxtb	r3, r3
 8001bac:	0011      	movs	r1, r2
 8001bae:	0018      	movs	r0, r3
 8001bb0:	f7ff ff5c 	bl	8001a6c <__NVIC_SetPriority>
}
 8001bb4:	46c0      	nop			; (mov r8, r8)
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	b004      	add	sp, #16
 8001bba:	bd80      	pop	{r7, pc}

08001bbc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	0002      	movs	r2, r0
 8001bc4:	1dfb      	adds	r3, r7, #7
 8001bc6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bc8:	1dfb      	adds	r3, r7, #7
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	b25b      	sxtb	r3, r3
 8001bce:	0018      	movs	r0, r3
 8001bd0:	f7ff ff32 	bl	8001a38 <__NVIC_EnableIRQ>
}
 8001bd4:	46c0      	nop			; (mov r8, r8)
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	b002      	add	sp, #8
 8001bda:	bd80      	pop	{r7, pc}

08001bdc <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	0018      	movs	r0, r3
 8001be8:	f7ff ffae 	bl	8001b48 <SysTick_Config>
 8001bec:	0003      	movs	r3, r0
}
 8001bee:	0018      	movs	r0, r3
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	b002      	add	sp, #8
 8001bf4:	bd80      	pop	{r7, pc}

08001bf6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001bf6:	b580      	push	{r7, lr}
 8001bf8:	b084      	sub	sp, #16
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001bfe:	230f      	movs	r3, #15
 8001c00:	18fb      	adds	r3, r7, r3
 8001c02:	2200      	movs	r2, #0
 8001c04:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2225      	movs	r2, #37	; 0x25
 8001c0a:	5c9b      	ldrb	r3, [r3, r2]
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	2b02      	cmp	r3, #2
 8001c10:	d008      	beq.n	8001c24 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2204      	movs	r2, #4
 8001c16:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2224      	movs	r2, #36	; 0x24
 8001c1c:	2100      	movs	r1, #0
 8001c1e:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001c20:	2301      	movs	r3, #1
 8001c22:	e024      	b.n	8001c6e <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	687a      	ldr	r2, [r7, #4]
 8001c2a:	6812      	ldr	r2, [r2, #0]
 8001c2c:	6812      	ldr	r2, [r2, #0]
 8001c2e:	210e      	movs	r1, #14
 8001c30:	438a      	bics	r2, r1
 8001c32:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	687a      	ldr	r2, [r7, #4]
 8001c3a:	6812      	ldr	r2, [r2, #0]
 8001c3c:	6812      	ldr	r2, [r2, #0]
 8001c3e:	2101      	movs	r1, #1
 8001c40:	438a      	bics	r2, r1
 8001c42:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c48:	687a      	ldr	r2, [r7, #4]
 8001c4a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001c4c:	211c      	movs	r1, #28
 8001c4e:	400a      	ands	r2, r1
 8001c50:	2101      	movs	r1, #1
 8001c52:	4091      	lsls	r1, r2
 8001c54:	000a      	movs	r2, r1
 8001c56:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2225      	movs	r2, #37	; 0x25
 8001c5c:	2101      	movs	r1, #1
 8001c5e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2224      	movs	r2, #36	; 0x24
 8001c64:	2100      	movs	r1, #0
 8001c66:	5499      	strb	r1, [r3, r2]

    return status;
 8001c68:	230f      	movs	r3, #15
 8001c6a:	18fb      	adds	r3, r7, r3
 8001c6c:	781b      	ldrb	r3, [r3, #0]
  }
}
 8001c6e:	0018      	movs	r0, r3
 8001c70:	46bd      	mov	sp, r7
 8001c72:	b004      	add	sp, #16
 8001c74:	bd80      	pop	{r7, pc}

08001c76 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001c76:	b580      	push	{r7, lr}
 8001c78:	b084      	sub	sp, #16
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c7e:	230f      	movs	r3, #15
 8001c80:	18fb      	adds	r3, r7, r3
 8001c82:	2200      	movs	r2, #0
 8001c84:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2225      	movs	r2, #37	; 0x25
 8001c8a:	5c9b      	ldrb	r3, [r3, r2]
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	2b02      	cmp	r3, #2
 8001c90:	d007      	beq.n	8001ca2 <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2204      	movs	r2, #4
 8001c96:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001c98:	230f      	movs	r3, #15
 8001c9a:	18fb      	adds	r3, r7, r3
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	701a      	strb	r2, [r3, #0]
 8001ca0:	e02a      	b.n	8001cf8 <HAL_DMA_Abort_IT+0x82>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	687a      	ldr	r2, [r7, #4]
 8001ca8:	6812      	ldr	r2, [r2, #0]
 8001caa:	6812      	ldr	r2, [r2, #0]
 8001cac:	210e      	movs	r1, #14
 8001cae:	438a      	bics	r2, r1
 8001cb0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	687a      	ldr	r2, [r7, #4]
 8001cb8:	6812      	ldr	r2, [r2, #0]
 8001cba:	6812      	ldr	r2, [r2, #0]
 8001cbc:	2101      	movs	r1, #1
 8001cbe:	438a      	bics	r2, r1
 8001cc0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc6:	687a      	ldr	r2, [r7, #4]
 8001cc8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001cca:	211c      	movs	r1, #28
 8001ccc:	400a      	ands	r2, r1
 8001cce:	2101      	movs	r1, #1
 8001cd0:	4091      	lsls	r1, r2
 8001cd2:	000a      	movs	r2, r1
 8001cd4:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2225      	movs	r2, #37	; 0x25
 8001cda:	2101      	movs	r1, #1
 8001cdc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2224      	movs	r2, #36	; 0x24
 8001ce2:	2100      	movs	r1, #0
 8001ce4:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d004      	beq.n	8001cf8 <HAL_DMA_Abort_IT+0x82>
    {
      hdma->XferAbortCallback(hdma);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cf2:	687a      	ldr	r2, [r7, #4]
 8001cf4:	0010      	movs	r0, r2
 8001cf6:	4798      	blx	r3
    }
  }
  return status;
 8001cf8:	230f      	movs	r3, #15
 8001cfa:	18fb      	adds	r3, r7, r3
 8001cfc:	781b      	ldrb	r3, [r3, #0]
}
 8001cfe:	0018      	movs	r0, r3
 8001d00:	46bd      	mov	sp, r7
 8001d02:	b004      	add	sp, #16
 8001d04:	bd80      	pop	{r7, pc}
	...

08001d08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b086      	sub	sp, #24
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
 8001d10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001d12:	2300      	movs	r3, #0
 8001d14:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d16:	2300      	movs	r3, #0
 8001d18:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001d1e:	e14f      	b.n	8001fc0 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	2101      	movs	r1, #1
 8001d26:	697a      	ldr	r2, [r7, #20]
 8001d28:	4091      	lsls	r1, r2
 8001d2a:	000a      	movs	r2, r1
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d100      	bne.n	8001d38 <HAL_GPIO_Init+0x30>
 8001d36:	e140      	b.n	8001fba <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	2b01      	cmp	r3, #1
 8001d3e:	d00b      	beq.n	8001d58 <HAL_GPIO_Init+0x50>
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	2b02      	cmp	r3, #2
 8001d46:	d007      	beq.n	8001d58 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d4c:	2b11      	cmp	r3, #17
 8001d4e:	d003      	beq.n	8001d58 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	2b12      	cmp	r3, #18
 8001d56:	d130      	bne.n	8001dba <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	005b      	lsls	r3, r3, #1
 8001d62:	2203      	movs	r2, #3
 8001d64:	409a      	lsls	r2, r3
 8001d66:	0013      	movs	r3, r2
 8001d68:	43da      	mvns	r2, r3
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	68da      	ldr	r2, [r3, #12]
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	005b      	lsls	r3, r3, #1
 8001d78:	409a      	lsls	r2, r3
 8001d7a:	0013      	movs	r3, r2
 8001d7c:	693a      	ldr	r2, [r7, #16]
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	693a      	ldr	r2, [r7, #16]
 8001d86:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d8e:	2201      	movs	r2, #1
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	409a      	lsls	r2, r3
 8001d94:	0013      	movs	r3, r2
 8001d96:	43da      	mvns	r2, r3
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	091b      	lsrs	r3, r3, #4
 8001da4:	2201      	movs	r2, #1
 8001da6:	401a      	ands	r2, r3
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	409a      	lsls	r2, r3
 8001dac:	0013      	movs	r3, r2
 8001dae:	693a      	ldr	r2, [r7, #16]
 8001db0:	4313      	orrs	r3, r2
 8001db2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	693a      	ldr	r2, [r7, #16]
 8001db8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	68db      	ldr	r3, [r3, #12]
 8001dbe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	005b      	lsls	r3, r3, #1
 8001dc4:	2203      	movs	r2, #3
 8001dc6:	409a      	lsls	r2, r3
 8001dc8:	0013      	movs	r3, r2
 8001dca:	43da      	mvns	r2, r3
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	4013      	ands	r3, r2
 8001dd0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	689a      	ldr	r2, [r3, #8]
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	005b      	lsls	r3, r3, #1
 8001dda:	409a      	lsls	r2, r3
 8001ddc:	0013      	movs	r3, r2
 8001dde:	693a      	ldr	r2, [r7, #16]
 8001de0:	4313      	orrs	r3, r2
 8001de2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	693a      	ldr	r2, [r7, #16]
 8001de8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	2b02      	cmp	r3, #2
 8001df0:	d003      	beq.n	8001dfa <HAL_GPIO_Init+0xf2>
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	2b12      	cmp	r3, #18
 8001df8:	d123      	bne.n	8001e42 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	08da      	lsrs	r2, r3, #3
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	3208      	adds	r2, #8
 8001e02:	0092      	lsls	r2, r2, #2
 8001e04:	58d3      	ldr	r3, [r2, r3]
 8001e06:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	2207      	movs	r2, #7
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	220f      	movs	r2, #15
 8001e12:	409a      	lsls	r2, r3
 8001e14:	0013      	movs	r3, r2
 8001e16:	43da      	mvns	r2, r3
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	691a      	ldr	r2, [r3, #16]
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	2107      	movs	r1, #7
 8001e26:	400b      	ands	r3, r1
 8001e28:	009b      	lsls	r3, r3, #2
 8001e2a:	409a      	lsls	r2, r3
 8001e2c:	0013      	movs	r3, r2
 8001e2e:	693a      	ldr	r2, [r7, #16]
 8001e30:	4313      	orrs	r3, r2
 8001e32:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	08da      	lsrs	r2, r3, #3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	3208      	adds	r2, #8
 8001e3c:	0092      	lsls	r2, r2, #2
 8001e3e:	6939      	ldr	r1, [r7, #16]
 8001e40:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	005b      	lsls	r3, r3, #1
 8001e4c:	2203      	movs	r2, #3
 8001e4e:	409a      	lsls	r2, r3
 8001e50:	0013      	movs	r3, r2
 8001e52:	43da      	mvns	r2, r3
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	4013      	ands	r3, r2
 8001e58:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	2203      	movs	r2, #3
 8001e60:	401a      	ands	r2, r3
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	005b      	lsls	r3, r3, #1
 8001e66:	409a      	lsls	r2, r3
 8001e68:	0013      	movs	r3, r2
 8001e6a:	693a      	ldr	r2, [r7, #16]
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	693a      	ldr	r2, [r7, #16]
 8001e74:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	685a      	ldr	r2, [r3, #4]
 8001e7a:	2380      	movs	r3, #128	; 0x80
 8001e7c:	055b      	lsls	r3, r3, #21
 8001e7e:	4013      	ands	r3, r2
 8001e80:	d100      	bne.n	8001e84 <HAL_GPIO_Init+0x17c>
 8001e82:	e09a      	b.n	8001fba <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e84:	4b54      	ldr	r3, [pc, #336]	; (8001fd8 <HAL_GPIO_Init+0x2d0>)
 8001e86:	4a54      	ldr	r2, [pc, #336]	; (8001fd8 <HAL_GPIO_Init+0x2d0>)
 8001e88:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001e8a:	2101      	movs	r1, #1
 8001e8c:	430a      	orrs	r2, r1
 8001e8e:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e90:	4a52      	ldr	r2, [pc, #328]	; (8001fdc <HAL_GPIO_Init+0x2d4>)
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	089b      	lsrs	r3, r3, #2
 8001e96:	3302      	adds	r3, #2
 8001e98:	009b      	lsls	r3, r3, #2
 8001e9a:	589b      	ldr	r3, [r3, r2]
 8001e9c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	2203      	movs	r2, #3
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	009b      	lsls	r3, r3, #2
 8001ea6:	220f      	movs	r2, #15
 8001ea8:	409a      	lsls	r2, r3
 8001eaa:	0013      	movs	r3, r2
 8001eac:	43da      	mvns	r2, r3
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001eb4:	687a      	ldr	r2, [r7, #4]
 8001eb6:	23a0      	movs	r3, #160	; 0xa0
 8001eb8:	05db      	lsls	r3, r3, #23
 8001eba:	429a      	cmp	r2, r3
 8001ebc:	d019      	beq.n	8001ef2 <HAL_GPIO_Init+0x1ea>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	4a47      	ldr	r2, [pc, #284]	; (8001fe0 <HAL_GPIO_Init+0x2d8>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d013      	beq.n	8001eee <HAL_GPIO_Init+0x1e6>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	4a46      	ldr	r2, [pc, #280]	; (8001fe4 <HAL_GPIO_Init+0x2dc>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d00d      	beq.n	8001eea <HAL_GPIO_Init+0x1e2>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	4a45      	ldr	r2, [pc, #276]	; (8001fe8 <HAL_GPIO_Init+0x2e0>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d007      	beq.n	8001ee6 <HAL_GPIO_Init+0x1de>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4a44      	ldr	r2, [pc, #272]	; (8001fec <HAL_GPIO_Init+0x2e4>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d101      	bne.n	8001ee2 <HAL_GPIO_Init+0x1da>
 8001ede:	2305      	movs	r3, #5
 8001ee0:	e008      	b.n	8001ef4 <HAL_GPIO_Init+0x1ec>
 8001ee2:	2306      	movs	r3, #6
 8001ee4:	e006      	b.n	8001ef4 <HAL_GPIO_Init+0x1ec>
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	e004      	b.n	8001ef4 <HAL_GPIO_Init+0x1ec>
 8001eea:	2302      	movs	r3, #2
 8001eec:	e002      	b.n	8001ef4 <HAL_GPIO_Init+0x1ec>
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e000      	b.n	8001ef4 <HAL_GPIO_Init+0x1ec>
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	697a      	ldr	r2, [r7, #20]
 8001ef6:	2103      	movs	r1, #3
 8001ef8:	400a      	ands	r2, r1
 8001efa:	0092      	lsls	r2, r2, #2
 8001efc:	4093      	lsls	r3, r2
 8001efe:	693a      	ldr	r2, [r7, #16]
 8001f00:	4313      	orrs	r3, r2
 8001f02:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f04:	4935      	ldr	r1, [pc, #212]	; (8001fdc <HAL_GPIO_Init+0x2d4>)
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	089b      	lsrs	r3, r3, #2
 8001f0a:	3302      	adds	r3, #2
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	693a      	ldr	r2, [r7, #16]
 8001f10:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f12:	4b37      	ldr	r3, [pc, #220]	; (8001ff0 <HAL_GPIO_Init+0x2e8>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	43da      	mvns	r2, r3
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	4013      	ands	r3, r2
 8001f20:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	685a      	ldr	r2, [r3, #4]
 8001f26:	2380      	movs	r3, #128	; 0x80
 8001f28:	025b      	lsls	r3, r3, #9
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	d003      	beq.n	8001f36 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8001f2e:	693a      	ldr	r2, [r7, #16]
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	4313      	orrs	r3, r2
 8001f34:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001f36:	4b2e      	ldr	r3, [pc, #184]	; (8001ff0 <HAL_GPIO_Init+0x2e8>)
 8001f38:	693a      	ldr	r2, [r7, #16]
 8001f3a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001f3c:	4b2c      	ldr	r3, [pc, #176]	; (8001ff0 <HAL_GPIO_Init+0x2e8>)
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	43da      	mvns	r2, r3
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	4013      	ands	r3, r2
 8001f4a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	685a      	ldr	r2, [r3, #4]
 8001f50:	2380      	movs	r3, #128	; 0x80
 8001f52:	029b      	lsls	r3, r3, #10
 8001f54:	4013      	ands	r3, r2
 8001f56:	d003      	beq.n	8001f60 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8001f58:	693a      	ldr	r2, [r7, #16]
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001f60:	4b23      	ldr	r3, [pc, #140]	; (8001ff0 <HAL_GPIO_Init+0x2e8>)
 8001f62:	693a      	ldr	r2, [r7, #16]
 8001f64:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f66:	4b22      	ldr	r3, [pc, #136]	; (8001ff0 <HAL_GPIO_Init+0x2e8>)
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	43da      	mvns	r2, r3
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	4013      	ands	r3, r2
 8001f74:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	685a      	ldr	r2, [r3, #4]
 8001f7a:	2380      	movs	r3, #128	; 0x80
 8001f7c:	035b      	lsls	r3, r3, #13
 8001f7e:	4013      	ands	r3, r2
 8001f80:	d003      	beq.n	8001f8a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001f82:	693a      	ldr	r2, [r7, #16]
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	4313      	orrs	r3, r2
 8001f88:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001f8a:	4b19      	ldr	r3, [pc, #100]	; (8001ff0 <HAL_GPIO_Init+0x2e8>)
 8001f8c:	693a      	ldr	r2, [r7, #16]
 8001f8e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001f90:	4b17      	ldr	r3, [pc, #92]	; (8001ff0 <HAL_GPIO_Init+0x2e8>)
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	43da      	mvns	r2, r3
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	685a      	ldr	r2, [r3, #4]
 8001fa4:	2380      	movs	r3, #128	; 0x80
 8001fa6:	039b      	lsls	r3, r3, #14
 8001fa8:	4013      	ands	r3, r2
 8001faa:	d003      	beq.n	8001fb4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001fac:	693a      	ldr	r2, [r7, #16]
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001fb4:	4b0e      	ldr	r3, [pc, #56]	; (8001ff0 <HAL_GPIO_Init+0x2e8>)
 8001fb6:	693a      	ldr	r2, [r7, #16]
 8001fb8:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	3301      	adds	r3, #1
 8001fbe:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	40da      	lsrs	r2, r3
 8001fc8:	1e13      	subs	r3, r2, #0
 8001fca:	d000      	beq.n	8001fce <HAL_GPIO_Init+0x2c6>
 8001fcc:	e6a8      	b.n	8001d20 <HAL_GPIO_Init+0x18>
  }
}
 8001fce:	46c0      	nop			; (mov r8, r8)
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	b006      	add	sp, #24
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	46c0      	nop			; (mov r8, r8)
 8001fd8:	40021000 	.word	0x40021000
 8001fdc:	40010000 	.word	0x40010000
 8001fe0:	50000400 	.word	0x50000400
 8001fe4:	50000800 	.word	0x50000800
 8001fe8:	50000c00 	.word	0x50000c00
 8001fec:	50001c00 	.word	0x50001c00
 8001ff0:	40010400 	.word	0x40010400

08001ff4 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
 8001ffc:	0008      	movs	r0, r1
 8001ffe:	0011      	movs	r1, r2
 8002000:	1cbb      	adds	r3, r7, #2
 8002002:	1c02      	adds	r2, r0, #0
 8002004:	801a      	strh	r2, [r3, #0]
 8002006:	1c7b      	adds	r3, r7, #1
 8002008:	1c0a      	adds	r2, r1, #0
 800200a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800200c:	1c7b      	adds	r3, r7, #1
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d004      	beq.n	800201e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002014:	1cbb      	adds	r3, r7, #2
 8002016:	881a      	ldrh	r2, [r3, #0]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800201c:	e003      	b.n	8002026 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800201e:	1cbb      	adds	r3, r7, #2
 8002020:	881a      	ldrh	r2, [r3, #0]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002026:	46c0      	nop			; (mov r8, r8)
 8002028:	46bd      	mov	sp, r7
 800202a:	b002      	add	sp, #8
 800202c:	bd80      	pop	{r7, pc}
	...

08002030 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002030:	b590      	push	{r4, r7, lr}
 8002032:	b08b      	sub	sp, #44	; 0x2c
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d102      	bne.n	8002044 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	f000 fb5a 	bl	80026f8 <HAL_RCC_OscConfig+0x6c8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002044:	4bce      	ldr	r3, [pc, #824]	; (8002380 <HAL_RCC_OscConfig+0x350>)
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	220c      	movs	r2, #12
 800204a:	4013      	ands	r3, r2
 800204c:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800204e:	4bcc      	ldr	r3, [pc, #816]	; (8002380 <HAL_RCC_OscConfig+0x350>)
 8002050:	68da      	ldr	r2, [r3, #12]
 8002052:	2380      	movs	r3, #128	; 0x80
 8002054:	025b      	lsls	r3, r3, #9
 8002056:	4013      	ands	r3, r2
 8002058:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	2201      	movs	r2, #1
 8002060:	4013      	ands	r3, r2
 8002062:	d100      	bne.n	8002066 <HAL_RCC_OscConfig+0x36>
 8002064:	e07c      	b.n	8002160 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002066:	6a3b      	ldr	r3, [r7, #32]
 8002068:	2b08      	cmp	r3, #8
 800206a:	d007      	beq.n	800207c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800206c:	6a3b      	ldr	r3, [r7, #32]
 800206e:	2b0c      	cmp	r3, #12
 8002070:	d111      	bne.n	8002096 <HAL_RCC_OscConfig+0x66>
 8002072:	69fa      	ldr	r2, [r7, #28]
 8002074:	2380      	movs	r3, #128	; 0x80
 8002076:	025b      	lsls	r3, r3, #9
 8002078:	429a      	cmp	r2, r3
 800207a:	d10c      	bne.n	8002096 <HAL_RCC_OscConfig+0x66>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800207c:	4bc0      	ldr	r3, [pc, #768]	; (8002380 <HAL_RCC_OscConfig+0x350>)
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	2380      	movs	r3, #128	; 0x80
 8002082:	029b      	lsls	r3, r3, #10
 8002084:	4013      	ands	r3, r2
 8002086:	d100      	bne.n	800208a <HAL_RCC_OscConfig+0x5a>
 8002088:	e069      	b.n	800215e <HAL_RCC_OscConfig+0x12e>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d165      	bne.n	800215e <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e330      	b.n	80026f8 <HAL_RCC_OscConfig+0x6c8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	685a      	ldr	r2, [r3, #4]
 800209a:	2380      	movs	r3, #128	; 0x80
 800209c:	025b      	lsls	r3, r3, #9
 800209e:	429a      	cmp	r2, r3
 80020a0:	d107      	bne.n	80020b2 <HAL_RCC_OscConfig+0x82>
 80020a2:	4bb7      	ldr	r3, [pc, #732]	; (8002380 <HAL_RCC_OscConfig+0x350>)
 80020a4:	4ab6      	ldr	r2, [pc, #728]	; (8002380 <HAL_RCC_OscConfig+0x350>)
 80020a6:	6812      	ldr	r2, [r2, #0]
 80020a8:	2180      	movs	r1, #128	; 0x80
 80020aa:	0249      	lsls	r1, r1, #9
 80020ac:	430a      	orrs	r2, r1
 80020ae:	601a      	str	r2, [r3, #0]
 80020b0:	e027      	b.n	8002102 <HAL_RCC_OscConfig+0xd2>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	685a      	ldr	r2, [r3, #4]
 80020b6:	23a0      	movs	r3, #160	; 0xa0
 80020b8:	02db      	lsls	r3, r3, #11
 80020ba:	429a      	cmp	r2, r3
 80020bc:	d10e      	bne.n	80020dc <HAL_RCC_OscConfig+0xac>
 80020be:	4bb0      	ldr	r3, [pc, #704]	; (8002380 <HAL_RCC_OscConfig+0x350>)
 80020c0:	4aaf      	ldr	r2, [pc, #700]	; (8002380 <HAL_RCC_OscConfig+0x350>)
 80020c2:	6812      	ldr	r2, [r2, #0]
 80020c4:	2180      	movs	r1, #128	; 0x80
 80020c6:	02c9      	lsls	r1, r1, #11
 80020c8:	430a      	orrs	r2, r1
 80020ca:	601a      	str	r2, [r3, #0]
 80020cc:	4bac      	ldr	r3, [pc, #688]	; (8002380 <HAL_RCC_OscConfig+0x350>)
 80020ce:	4aac      	ldr	r2, [pc, #688]	; (8002380 <HAL_RCC_OscConfig+0x350>)
 80020d0:	6812      	ldr	r2, [r2, #0]
 80020d2:	2180      	movs	r1, #128	; 0x80
 80020d4:	0249      	lsls	r1, r1, #9
 80020d6:	430a      	orrs	r2, r1
 80020d8:	601a      	str	r2, [r3, #0]
 80020da:	e012      	b.n	8002102 <HAL_RCC_OscConfig+0xd2>
 80020dc:	4ba8      	ldr	r3, [pc, #672]	; (8002380 <HAL_RCC_OscConfig+0x350>)
 80020de:	4aa8      	ldr	r2, [pc, #672]	; (8002380 <HAL_RCC_OscConfig+0x350>)
 80020e0:	6812      	ldr	r2, [r2, #0]
 80020e2:	49a8      	ldr	r1, [pc, #672]	; (8002384 <HAL_RCC_OscConfig+0x354>)
 80020e4:	400a      	ands	r2, r1
 80020e6:	601a      	str	r2, [r3, #0]
 80020e8:	4ba5      	ldr	r3, [pc, #660]	; (8002380 <HAL_RCC_OscConfig+0x350>)
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	2380      	movs	r3, #128	; 0x80
 80020ee:	025b      	lsls	r3, r3, #9
 80020f0:	4013      	ands	r3, r2
 80020f2:	60fb      	str	r3, [r7, #12]
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	4ba2      	ldr	r3, [pc, #648]	; (8002380 <HAL_RCC_OscConfig+0x350>)
 80020f8:	4aa1      	ldr	r2, [pc, #644]	; (8002380 <HAL_RCC_OscConfig+0x350>)
 80020fa:	6812      	ldr	r2, [r2, #0]
 80020fc:	49a2      	ldr	r1, [pc, #648]	; (8002388 <HAL_RCC_OscConfig+0x358>)
 80020fe:	400a      	ands	r2, r1
 8002100:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d014      	beq.n	8002134 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800210a:	f7ff f813 	bl	8001134 <HAL_GetTick>
 800210e:	0003      	movs	r3, r0
 8002110:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002112:	e008      	b.n	8002126 <HAL_RCC_OscConfig+0xf6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002114:	f7ff f80e 	bl	8001134 <HAL_GetTick>
 8002118:	0002      	movs	r2, r0
 800211a:	69bb      	ldr	r3, [r7, #24]
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	2b64      	cmp	r3, #100	; 0x64
 8002120:	d901      	bls.n	8002126 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002122:	2303      	movs	r3, #3
 8002124:	e2e8      	b.n	80026f8 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002126:	4b96      	ldr	r3, [pc, #600]	; (8002380 <HAL_RCC_OscConfig+0x350>)
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	2380      	movs	r3, #128	; 0x80
 800212c:	029b      	lsls	r3, r3, #10
 800212e:	4013      	ands	r3, r2
 8002130:	d0f0      	beq.n	8002114 <HAL_RCC_OscConfig+0xe4>
 8002132:	e015      	b.n	8002160 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002134:	f7fe fffe 	bl	8001134 <HAL_GetTick>
 8002138:	0003      	movs	r3, r0
 800213a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800213c:	e008      	b.n	8002150 <HAL_RCC_OscConfig+0x120>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800213e:	f7fe fff9 	bl	8001134 <HAL_GetTick>
 8002142:	0002      	movs	r2, r0
 8002144:	69bb      	ldr	r3, [r7, #24]
 8002146:	1ad3      	subs	r3, r2, r3
 8002148:	2b64      	cmp	r3, #100	; 0x64
 800214a:	d901      	bls.n	8002150 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 800214c:	2303      	movs	r3, #3
 800214e:	e2d3      	b.n	80026f8 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002150:	4b8b      	ldr	r3, [pc, #556]	; (8002380 <HAL_RCC_OscConfig+0x350>)
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	2380      	movs	r3, #128	; 0x80
 8002156:	029b      	lsls	r3, r3, #10
 8002158:	4013      	ands	r3, r2
 800215a:	d1f0      	bne.n	800213e <HAL_RCC_OscConfig+0x10e>
 800215c:	e000      	b.n	8002160 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800215e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	2202      	movs	r2, #2
 8002166:	4013      	ands	r3, r2
 8002168:	d100      	bne.n	800216c <HAL_RCC_OscConfig+0x13c>
 800216a:	e08b      	b.n	8002284 <HAL_RCC_OscConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002172:	6a3b      	ldr	r3, [r7, #32]
 8002174:	2b04      	cmp	r3, #4
 8002176:	d005      	beq.n	8002184 <HAL_RCC_OscConfig+0x154>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002178:	6a3b      	ldr	r3, [r7, #32]
 800217a:	2b0c      	cmp	r3, #12
 800217c:	d13f      	bne.n	80021fe <HAL_RCC_OscConfig+0x1ce>
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d13c      	bne.n	80021fe <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8002184:	4b7e      	ldr	r3, [pc, #504]	; (8002380 <HAL_RCC_OscConfig+0x350>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	2204      	movs	r2, #4
 800218a:	4013      	ands	r3, r2
 800218c:	d004      	beq.n	8002198 <HAL_RCC_OscConfig+0x168>
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d101      	bne.n	8002198 <HAL_RCC_OscConfig+0x168>
      {
        return HAL_ERROR;
 8002194:	2301      	movs	r3, #1
 8002196:	e2af      	b.n	80026f8 <HAL_RCC_OscConfig+0x6c8>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002198:	4a79      	ldr	r2, [pc, #484]	; (8002380 <HAL_RCC_OscConfig+0x350>)
 800219a:	4b79      	ldr	r3, [pc, #484]	; (8002380 <HAL_RCC_OscConfig+0x350>)
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	497b      	ldr	r1, [pc, #492]	; (800238c <HAL_RCC_OscConfig+0x35c>)
 80021a0:	4019      	ands	r1, r3
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	691b      	ldr	r3, [r3, #16]
 80021a6:	021b      	lsls	r3, r3, #8
 80021a8:	430b      	orrs	r3, r1
 80021aa:	6053      	str	r3, [r2, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80021ac:	4b74      	ldr	r3, [pc, #464]	; (8002380 <HAL_RCC_OscConfig+0x350>)
 80021ae:	4a74      	ldr	r2, [pc, #464]	; (8002380 <HAL_RCC_OscConfig+0x350>)
 80021b0:	6812      	ldr	r2, [r2, #0]
 80021b2:	2109      	movs	r1, #9
 80021b4:	438a      	bics	r2, r1
 80021b6:	0011      	movs	r1, r2
 80021b8:	697a      	ldr	r2, [r7, #20]
 80021ba:	430a      	orrs	r2, r1
 80021bc:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80021be:	f000 fbe9 	bl	8002994 <HAL_RCC_GetSysClockFreq>
 80021c2:	0001      	movs	r1, r0
 80021c4:	4b6e      	ldr	r3, [pc, #440]	; (8002380 <HAL_RCC_OscConfig+0x350>)
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	091b      	lsrs	r3, r3, #4
 80021ca:	220f      	movs	r2, #15
 80021cc:	4013      	ands	r3, r2
 80021ce:	4a70      	ldr	r2, [pc, #448]	; (8002390 <HAL_RCC_OscConfig+0x360>)
 80021d0:	5cd3      	ldrb	r3, [r2, r3]
 80021d2:	000a      	movs	r2, r1
 80021d4:	40da      	lsrs	r2, r3
 80021d6:	4b6f      	ldr	r3, [pc, #444]	; (8002394 <HAL_RCC_OscConfig+0x364>)
 80021d8:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80021da:	4b6f      	ldr	r3, [pc, #444]	; (8002398 <HAL_RCC_OscConfig+0x368>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	2213      	movs	r2, #19
 80021e0:	18bc      	adds	r4, r7, r2
 80021e2:	0018      	movs	r0, r3
 80021e4:	f7fe ff60 	bl	80010a8 <HAL_InitTick>
 80021e8:	0003      	movs	r3, r0
 80021ea:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80021ec:	2313      	movs	r3, #19
 80021ee:	18fb      	adds	r3, r7, r3
 80021f0:	781b      	ldrb	r3, [r3, #0]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d046      	beq.n	8002284 <HAL_RCC_OscConfig+0x254>
      {
        return status;
 80021f6:	2313      	movs	r3, #19
 80021f8:	18fb      	adds	r3, r7, r3
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	e27c      	b.n	80026f8 <HAL_RCC_OscConfig+0x6c8>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d026      	beq.n	8002252 <HAL_RCC_OscConfig+0x222>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002204:	4b5e      	ldr	r3, [pc, #376]	; (8002380 <HAL_RCC_OscConfig+0x350>)
 8002206:	4a5e      	ldr	r2, [pc, #376]	; (8002380 <HAL_RCC_OscConfig+0x350>)
 8002208:	6812      	ldr	r2, [r2, #0]
 800220a:	2109      	movs	r1, #9
 800220c:	438a      	bics	r2, r1
 800220e:	0011      	movs	r1, r2
 8002210:	697a      	ldr	r2, [r7, #20]
 8002212:	430a      	orrs	r2, r1
 8002214:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002216:	f7fe ff8d 	bl	8001134 <HAL_GetTick>
 800221a:	0003      	movs	r3, r0
 800221c:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800221e:	e008      	b.n	8002232 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002220:	f7fe ff88 	bl	8001134 <HAL_GetTick>
 8002224:	0002      	movs	r2, r0
 8002226:	69bb      	ldr	r3, [r7, #24]
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	2b02      	cmp	r3, #2
 800222c:	d901      	bls.n	8002232 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 800222e:	2303      	movs	r3, #3
 8002230:	e262      	b.n	80026f8 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002232:	4b53      	ldr	r3, [pc, #332]	; (8002380 <HAL_RCC_OscConfig+0x350>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	2204      	movs	r2, #4
 8002238:	4013      	ands	r3, r2
 800223a:	d0f1      	beq.n	8002220 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800223c:	4a50      	ldr	r2, [pc, #320]	; (8002380 <HAL_RCC_OscConfig+0x350>)
 800223e:	4b50      	ldr	r3, [pc, #320]	; (8002380 <HAL_RCC_OscConfig+0x350>)
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	4952      	ldr	r1, [pc, #328]	; (800238c <HAL_RCC_OscConfig+0x35c>)
 8002244:	4019      	ands	r1, r3
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	691b      	ldr	r3, [r3, #16]
 800224a:	021b      	lsls	r3, r3, #8
 800224c:	430b      	orrs	r3, r1
 800224e:	6053      	str	r3, [r2, #4]
 8002250:	e018      	b.n	8002284 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002252:	4b4b      	ldr	r3, [pc, #300]	; (8002380 <HAL_RCC_OscConfig+0x350>)
 8002254:	4a4a      	ldr	r2, [pc, #296]	; (8002380 <HAL_RCC_OscConfig+0x350>)
 8002256:	6812      	ldr	r2, [r2, #0]
 8002258:	2101      	movs	r1, #1
 800225a:	438a      	bics	r2, r1
 800225c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800225e:	f7fe ff69 	bl	8001134 <HAL_GetTick>
 8002262:	0003      	movs	r3, r0
 8002264:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002266:	e008      	b.n	800227a <HAL_RCC_OscConfig+0x24a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002268:	f7fe ff64 	bl	8001134 <HAL_GetTick>
 800226c:	0002      	movs	r2, r0
 800226e:	69bb      	ldr	r3, [r7, #24]
 8002270:	1ad3      	subs	r3, r2, r3
 8002272:	2b02      	cmp	r3, #2
 8002274:	d901      	bls.n	800227a <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 8002276:	2303      	movs	r3, #3
 8002278:	e23e      	b.n	80026f8 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800227a:	4b41      	ldr	r3, [pc, #260]	; (8002380 <HAL_RCC_OscConfig+0x350>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	2204      	movs	r2, #4
 8002280:	4013      	ands	r3, r2
 8002282:	d1f1      	bne.n	8002268 <HAL_RCC_OscConfig+0x238>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	2210      	movs	r2, #16
 800228a:	4013      	ands	r3, r2
 800228c:	d100      	bne.n	8002290 <HAL_RCC_OscConfig+0x260>
 800228e:	e0a1      	b.n	80023d4 <HAL_RCC_OscConfig+0x3a4>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002290:	6a3b      	ldr	r3, [r7, #32]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d141      	bne.n	800231a <HAL_RCC_OscConfig+0x2ea>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002296:	4b3a      	ldr	r3, [pc, #232]	; (8002380 <HAL_RCC_OscConfig+0x350>)
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	2380      	movs	r3, #128	; 0x80
 800229c:	009b      	lsls	r3, r3, #2
 800229e:	4013      	ands	r3, r2
 80022a0:	d005      	beq.n	80022ae <HAL_RCC_OscConfig+0x27e>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	699b      	ldr	r3, [r3, #24]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d101      	bne.n	80022ae <HAL_RCC_OscConfig+0x27e>
      {
        return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e224      	b.n	80026f8 <HAL_RCC_OscConfig+0x6c8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022ae:	4a34      	ldr	r2, [pc, #208]	; (8002380 <HAL_RCC_OscConfig+0x350>)
 80022b0:	4b33      	ldr	r3, [pc, #204]	; (8002380 <HAL_RCC_OscConfig+0x350>)
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	4939      	ldr	r1, [pc, #228]	; (800239c <HAL_RCC_OscConfig+0x36c>)
 80022b6:	4019      	ands	r1, r3
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6a1b      	ldr	r3, [r3, #32]
 80022bc:	430b      	orrs	r3, r1
 80022be:	6053      	str	r3, [r2, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022c0:	4a2f      	ldr	r2, [pc, #188]	; (8002380 <HAL_RCC_OscConfig+0x350>)
 80022c2:	4b2f      	ldr	r3, [pc, #188]	; (8002380 <HAL_RCC_OscConfig+0x350>)
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	021b      	lsls	r3, r3, #8
 80022c8:	0a19      	lsrs	r1, r3, #8
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	69db      	ldr	r3, [r3, #28]
 80022ce:	061b      	lsls	r3, r3, #24
 80022d0:	430b      	orrs	r3, r1
 80022d2:	6053      	str	r3, [r2, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6a1b      	ldr	r3, [r3, #32]
 80022d8:	0b5b      	lsrs	r3, r3, #13
 80022da:	3301      	adds	r3, #1
 80022dc:	2280      	movs	r2, #128	; 0x80
 80022de:	0212      	lsls	r2, r2, #8
 80022e0:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80022e2:	4b27      	ldr	r3, [pc, #156]	; (8002380 <HAL_RCC_OscConfig+0x350>)
 80022e4:	68db      	ldr	r3, [r3, #12]
 80022e6:	091b      	lsrs	r3, r3, #4
 80022e8:	210f      	movs	r1, #15
 80022ea:	400b      	ands	r3, r1
 80022ec:	4928      	ldr	r1, [pc, #160]	; (8002390 <HAL_RCC_OscConfig+0x360>)
 80022ee:	5ccb      	ldrb	r3, [r1, r3]
 80022f0:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80022f2:	4b28      	ldr	r3, [pc, #160]	; (8002394 <HAL_RCC_OscConfig+0x364>)
 80022f4:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80022f6:	4b28      	ldr	r3, [pc, #160]	; (8002398 <HAL_RCC_OscConfig+0x368>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	2213      	movs	r2, #19
 80022fc:	18bc      	adds	r4, r7, r2
 80022fe:	0018      	movs	r0, r3
 8002300:	f7fe fed2 	bl	80010a8 <HAL_InitTick>
 8002304:	0003      	movs	r3, r0
 8002306:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8002308:	2313      	movs	r3, #19
 800230a:	18fb      	adds	r3, r7, r3
 800230c:	781b      	ldrb	r3, [r3, #0]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d060      	beq.n	80023d4 <HAL_RCC_OscConfig+0x3a4>
        {
          return status;
 8002312:	2313      	movs	r3, #19
 8002314:	18fb      	adds	r3, r7, r3
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	e1ee      	b.n	80026f8 <HAL_RCC_OscConfig+0x6c8>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	699b      	ldr	r3, [r3, #24]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d03e      	beq.n	80023a0 <HAL_RCC_OscConfig+0x370>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002322:	4b17      	ldr	r3, [pc, #92]	; (8002380 <HAL_RCC_OscConfig+0x350>)
 8002324:	4a16      	ldr	r2, [pc, #88]	; (8002380 <HAL_RCC_OscConfig+0x350>)
 8002326:	6812      	ldr	r2, [r2, #0]
 8002328:	2180      	movs	r1, #128	; 0x80
 800232a:	0049      	lsls	r1, r1, #1
 800232c:	430a      	orrs	r2, r1
 800232e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002330:	f7fe ff00 	bl	8001134 <HAL_GetTick>
 8002334:	0003      	movs	r3, r0
 8002336:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002338:	e008      	b.n	800234c <HAL_RCC_OscConfig+0x31c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800233a:	f7fe fefb 	bl	8001134 <HAL_GetTick>
 800233e:	0002      	movs	r2, r0
 8002340:	69bb      	ldr	r3, [r7, #24]
 8002342:	1ad3      	subs	r3, r2, r3
 8002344:	2b02      	cmp	r3, #2
 8002346:	d901      	bls.n	800234c <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 8002348:	2303      	movs	r3, #3
 800234a:	e1d5      	b.n	80026f8 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800234c:	4b0c      	ldr	r3, [pc, #48]	; (8002380 <HAL_RCC_OscConfig+0x350>)
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	2380      	movs	r3, #128	; 0x80
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	4013      	ands	r3, r2
 8002356:	d0f0      	beq.n	800233a <HAL_RCC_OscConfig+0x30a>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002358:	4a09      	ldr	r2, [pc, #36]	; (8002380 <HAL_RCC_OscConfig+0x350>)
 800235a:	4b09      	ldr	r3, [pc, #36]	; (8002380 <HAL_RCC_OscConfig+0x350>)
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	490f      	ldr	r1, [pc, #60]	; (800239c <HAL_RCC_OscConfig+0x36c>)
 8002360:	4019      	ands	r1, r3
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6a1b      	ldr	r3, [r3, #32]
 8002366:	430b      	orrs	r3, r1
 8002368:	6053      	str	r3, [r2, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800236a:	4a05      	ldr	r2, [pc, #20]	; (8002380 <HAL_RCC_OscConfig+0x350>)
 800236c:	4b04      	ldr	r3, [pc, #16]	; (8002380 <HAL_RCC_OscConfig+0x350>)
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	021b      	lsls	r3, r3, #8
 8002372:	0a19      	lsrs	r1, r3, #8
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	69db      	ldr	r3, [r3, #28]
 8002378:	061b      	lsls	r3, r3, #24
 800237a:	430b      	orrs	r3, r1
 800237c:	6053      	str	r3, [r2, #4]
 800237e:	e029      	b.n	80023d4 <HAL_RCC_OscConfig+0x3a4>
 8002380:	40021000 	.word	0x40021000
 8002384:	fffeffff 	.word	0xfffeffff
 8002388:	fffbffff 	.word	0xfffbffff
 800238c:	ffffe0ff 	.word	0xffffe0ff
 8002390:	0800419c 	.word	0x0800419c
 8002394:	20000000 	.word	0x20000000
 8002398:	20000004 	.word	0x20000004
 800239c:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80023a0:	4bbe      	ldr	r3, [pc, #760]	; (800269c <HAL_RCC_OscConfig+0x66c>)
 80023a2:	4abe      	ldr	r2, [pc, #760]	; (800269c <HAL_RCC_OscConfig+0x66c>)
 80023a4:	6812      	ldr	r2, [r2, #0]
 80023a6:	49be      	ldr	r1, [pc, #760]	; (80026a0 <HAL_RCC_OscConfig+0x670>)
 80023a8:	400a      	ands	r2, r1
 80023aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ac:	f7fe fec2 	bl	8001134 <HAL_GetTick>
 80023b0:	0003      	movs	r3, r0
 80023b2:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80023b4:	e008      	b.n	80023c8 <HAL_RCC_OscConfig+0x398>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80023b6:	f7fe febd 	bl	8001134 <HAL_GetTick>
 80023ba:	0002      	movs	r2, r0
 80023bc:	69bb      	ldr	r3, [r7, #24]
 80023be:	1ad3      	subs	r3, r2, r3
 80023c0:	2b02      	cmp	r3, #2
 80023c2:	d901      	bls.n	80023c8 <HAL_RCC_OscConfig+0x398>
          {
            return HAL_TIMEOUT;
 80023c4:	2303      	movs	r3, #3
 80023c6:	e197      	b.n	80026f8 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80023c8:	4bb4      	ldr	r3, [pc, #720]	; (800269c <HAL_RCC_OscConfig+0x66c>)
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	2380      	movs	r3, #128	; 0x80
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	4013      	ands	r3, r2
 80023d2:	d1f0      	bne.n	80023b6 <HAL_RCC_OscConfig+0x386>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	2208      	movs	r2, #8
 80023da:	4013      	ands	r3, r2
 80023dc:	d036      	beq.n	800244c <HAL_RCC_OscConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	695b      	ldr	r3, [r3, #20]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d019      	beq.n	800241a <HAL_RCC_OscConfig+0x3ea>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023e6:	4bad      	ldr	r3, [pc, #692]	; (800269c <HAL_RCC_OscConfig+0x66c>)
 80023e8:	4aac      	ldr	r2, [pc, #688]	; (800269c <HAL_RCC_OscConfig+0x66c>)
 80023ea:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80023ec:	2101      	movs	r1, #1
 80023ee:	430a      	orrs	r2, r1
 80023f0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023f2:	f7fe fe9f 	bl	8001134 <HAL_GetTick>
 80023f6:	0003      	movs	r3, r0
 80023f8:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80023fa:	e008      	b.n	800240e <HAL_RCC_OscConfig+0x3de>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023fc:	f7fe fe9a 	bl	8001134 <HAL_GetTick>
 8002400:	0002      	movs	r2, r0
 8002402:	69bb      	ldr	r3, [r7, #24]
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	2b02      	cmp	r3, #2
 8002408:	d901      	bls.n	800240e <HAL_RCC_OscConfig+0x3de>
        {
          return HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	e174      	b.n	80026f8 <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800240e:	4ba3      	ldr	r3, [pc, #652]	; (800269c <HAL_RCC_OscConfig+0x66c>)
 8002410:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002412:	2202      	movs	r2, #2
 8002414:	4013      	ands	r3, r2
 8002416:	d0f1      	beq.n	80023fc <HAL_RCC_OscConfig+0x3cc>
 8002418:	e018      	b.n	800244c <HAL_RCC_OscConfig+0x41c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800241a:	4ba0      	ldr	r3, [pc, #640]	; (800269c <HAL_RCC_OscConfig+0x66c>)
 800241c:	4a9f      	ldr	r2, [pc, #636]	; (800269c <HAL_RCC_OscConfig+0x66c>)
 800241e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002420:	2101      	movs	r1, #1
 8002422:	438a      	bics	r2, r1
 8002424:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002426:	f7fe fe85 	bl	8001134 <HAL_GetTick>
 800242a:	0003      	movs	r3, r0
 800242c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800242e:	e008      	b.n	8002442 <HAL_RCC_OscConfig+0x412>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002430:	f7fe fe80 	bl	8001134 <HAL_GetTick>
 8002434:	0002      	movs	r2, r0
 8002436:	69bb      	ldr	r3, [r7, #24]
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	2b02      	cmp	r3, #2
 800243c:	d901      	bls.n	8002442 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800243e:	2303      	movs	r3, #3
 8002440:	e15a      	b.n	80026f8 <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002442:	4b96      	ldr	r3, [pc, #600]	; (800269c <HAL_RCC_OscConfig+0x66c>)
 8002444:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002446:	2202      	movs	r2, #2
 8002448:	4013      	ands	r3, r2
 800244a:	d1f1      	bne.n	8002430 <HAL_RCC_OscConfig+0x400>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	2204      	movs	r2, #4
 8002452:	4013      	ands	r3, r2
 8002454:	d100      	bne.n	8002458 <HAL_RCC_OscConfig+0x428>
 8002456:	e0af      	b.n	80025b8 <HAL_RCC_OscConfig+0x588>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002458:	2327      	movs	r3, #39	; 0x27
 800245a:	18fb      	adds	r3, r7, r3
 800245c:	2200      	movs	r2, #0
 800245e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002460:	4b8e      	ldr	r3, [pc, #568]	; (800269c <HAL_RCC_OscConfig+0x66c>)
 8002462:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002464:	2380      	movs	r3, #128	; 0x80
 8002466:	055b      	lsls	r3, r3, #21
 8002468:	4013      	ands	r3, r2
 800246a:	d10a      	bne.n	8002482 <HAL_RCC_OscConfig+0x452>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800246c:	4b8b      	ldr	r3, [pc, #556]	; (800269c <HAL_RCC_OscConfig+0x66c>)
 800246e:	4a8b      	ldr	r2, [pc, #556]	; (800269c <HAL_RCC_OscConfig+0x66c>)
 8002470:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002472:	2180      	movs	r1, #128	; 0x80
 8002474:	0549      	lsls	r1, r1, #21
 8002476:	430a      	orrs	r2, r1
 8002478:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800247a:	2327      	movs	r3, #39	; 0x27
 800247c:	18fb      	adds	r3, r7, r3
 800247e:	2201      	movs	r2, #1
 8002480:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002482:	4b88      	ldr	r3, [pc, #544]	; (80026a4 <HAL_RCC_OscConfig+0x674>)
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	2380      	movs	r3, #128	; 0x80
 8002488:	005b      	lsls	r3, r3, #1
 800248a:	4013      	ands	r3, r2
 800248c:	d11a      	bne.n	80024c4 <HAL_RCC_OscConfig+0x494>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800248e:	4b85      	ldr	r3, [pc, #532]	; (80026a4 <HAL_RCC_OscConfig+0x674>)
 8002490:	4a84      	ldr	r2, [pc, #528]	; (80026a4 <HAL_RCC_OscConfig+0x674>)
 8002492:	6812      	ldr	r2, [r2, #0]
 8002494:	2180      	movs	r1, #128	; 0x80
 8002496:	0049      	lsls	r1, r1, #1
 8002498:	430a      	orrs	r2, r1
 800249a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800249c:	f7fe fe4a 	bl	8001134 <HAL_GetTick>
 80024a0:	0003      	movs	r3, r0
 80024a2:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024a4:	e008      	b.n	80024b8 <HAL_RCC_OscConfig+0x488>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024a6:	f7fe fe45 	bl	8001134 <HAL_GetTick>
 80024aa:	0002      	movs	r2, r0
 80024ac:	69bb      	ldr	r3, [r7, #24]
 80024ae:	1ad3      	subs	r3, r2, r3
 80024b0:	2b64      	cmp	r3, #100	; 0x64
 80024b2:	d901      	bls.n	80024b8 <HAL_RCC_OscConfig+0x488>
        {
          return HAL_TIMEOUT;
 80024b4:	2303      	movs	r3, #3
 80024b6:	e11f      	b.n	80026f8 <HAL_RCC_OscConfig+0x6c8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024b8:	4b7a      	ldr	r3, [pc, #488]	; (80026a4 <HAL_RCC_OscConfig+0x674>)
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	2380      	movs	r3, #128	; 0x80
 80024be:	005b      	lsls	r3, r3, #1
 80024c0:	4013      	ands	r3, r2
 80024c2:	d0f0      	beq.n	80024a6 <HAL_RCC_OscConfig+0x476>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	689a      	ldr	r2, [r3, #8]
 80024c8:	2380      	movs	r3, #128	; 0x80
 80024ca:	005b      	lsls	r3, r3, #1
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d107      	bne.n	80024e0 <HAL_RCC_OscConfig+0x4b0>
 80024d0:	4b72      	ldr	r3, [pc, #456]	; (800269c <HAL_RCC_OscConfig+0x66c>)
 80024d2:	4a72      	ldr	r2, [pc, #456]	; (800269c <HAL_RCC_OscConfig+0x66c>)
 80024d4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80024d6:	2180      	movs	r1, #128	; 0x80
 80024d8:	0049      	lsls	r1, r1, #1
 80024da:	430a      	orrs	r2, r1
 80024dc:	651a      	str	r2, [r3, #80]	; 0x50
 80024de:	e031      	b.n	8002544 <HAL_RCC_OscConfig+0x514>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d10c      	bne.n	8002502 <HAL_RCC_OscConfig+0x4d2>
 80024e8:	4b6c      	ldr	r3, [pc, #432]	; (800269c <HAL_RCC_OscConfig+0x66c>)
 80024ea:	4a6c      	ldr	r2, [pc, #432]	; (800269c <HAL_RCC_OscConfig+0x66c>)
 80024ec:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80024ee:	496c      	ldr	r1, [pc, #432]	; (80026a0 <HAL_RCC_OscConfig+0x670>)
 80024f0:	400a      	ands	r2, r1
 80024f2:	651a      	str	r2, [r3, #80]	; 0x50
 80024f4:	4b69      	ldr	r3, [pc, #420]	; (800269c <HAL_RCC_OscConfig+0x66c>)
 80024f6:	4a69      	ldr	r2, [pc, #420]	; (800269c <HAL_RCC_OscConfig+0x66c>)
 80024f8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80024fa:	496b      	ldr	r1, [pc, #428]	; (80026a8 <HAL_RCC_OscConfig+0x678>)
 80024fc:	400a      	ands	r2, r1
 80024fe:	651a      	str	r2, [r3, #80]	; 0x50
 8002500:	e020      	b.n	8002544 <HAL_RCC_OscConfig+0x514>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	689a      	ldr	r2, [r3, #8]
 8002506:	23a0      	movs	r3, #160	; 0xa0
 8002508:	00db      	lsls	r3, r3, #3
 800250a:	429a      	cmp	r2, r3
 800250c:	d10e      	bne.n	800252c <HAL_RCC_OscConfig+0x4fc>
 800250e:	4b63      	ldr	r3, [pc, #396]	; (800269c <HAL_RCC_OscConfig+0x66c>)
 8002510:	4a62      	ldr	r2, [pc, #392]	; (800269c <HAL_RCC_OscConfig+0x66c>)
 8002512:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002514:	2180      	movs	r1, #128	; 0x80
 8002516:	00c9      	lsls	r1, r1, #3
 8002518:	430a      	orrs	r2, r1
 800251a:	651a      	str	r2, [r3, #80]	; 0x50
 800251c:	4b5f      	ldr	r3, [pc, #380]	; (800269c <HAL_RCC_OscConfig+0x66c>)
 800251e:	4a5f      	ldr	r2, [pc, #380]	; (800269c <HAL_RCC_OscConfig+0x66c>)
 8002520:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002522:	2180      	movs	r1, #128	; 0x80
 8002524:	0049      	lsls	r1, r1, #1
 8002526:	430a      	orrs	r2, r1
 8002528:	651a      	str	r2, [r3, #80]	; 0x50
 800252a:	e00b      	b.n	8002544 <HAL_RCC_OscConfig+0x514>
 800252c:	4b5b      	ldr	r3, [pc, #364]	; (800269c <HAL_RCC_OscConfig+0x66c>)
 800252e:	4a5b      	ldr	r2, [pc, #364]	; (800269c <HAL_RCC_OscConfig+0x66c>)
 8002530:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002532:	495b      	ldr	r1, [pc, #364]	; (80026a0 <HAL_RCC_OscConfig+0x670>)
 8002534:	400a      	ands	r2, r1
 8002536:	651a      	str	r2, [r3, #80]	; 0x50
 8002538:	4b58      	ldr	r3, [pc, #352]	; (800269c <HAL_RCC_OscConfig+0x66c>)
 800253a:	4a58      	ldr	r2, [pc, #352]	; (800269c <HAL_RCC_OscConfig+0x66c>)
 800253c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800253e:	495a      	ldr	r1, [pc, #360]	; (80026a8 <HAL_RCC_OscConfig+0x678>)
 8002540:	400a      	ands	r2, r1
 8002542:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d015      	beq.n	8002578 <HAL_RCC_OscConfig+0x548>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800254c:	f7fe fdf2 	bl	8001134 <HAL_GetTick>
 8002550:	0003      	movs	r3, r0
 8002552:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002554:	e009      	b.n	800256a <HAL_RCC_OscConfig+0x53a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002556:	f7fe fded 	bl	8001134 <HAL_GetTick>
 800255a:	0002      	movs	r2, r0
 800255c:	69bb      	ldr	r3, [r7, #24]
 800255e:	1ad3      	subs	r3, r2, r3
 8002560:	4a52      	ldr	r2, [pc, #328]	; (80026ac <HAL_RCC_OscConfig+0x67c>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d901      	bls.n	800256a <HAL_RCC_OscConfig+0x53a>
        {
          return HAL_TIMEOUT;
 8002566:	2303      	movs	r3, #3
 8002568:	e0c6      	b.n	80026f8 <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800256a:	4b4c      	ldr	r3, [pc, #304]	; (800269c <HAL_RCC_OscConfig+0x66c>)
 800256c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800256e:	2380      	movs	r3, #128	; 0x80
 8002570:	009b      	lsls	r3, r3, #2
 8002572:	4013      	ands	r3, r2
 8002574:	d0ef      	beq.n	8002556 <HAL_RCC_OscConfig+0x526>
 8002576:	e014      	b.n	80025a2 <HAL_RCC_OscConfig+0x572>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002578:	f7fe fddc 	bl	8001134 <HAL_GetTick>
 800257c:	0003      	movs	r3, r0
 800257e:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002580:	e009      	b.n	8002596 <HAL_RCC_OscConfig+0x566>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002582:	f7fe fdd7 	bl	8001134 <HAL_GetTick>
 8002586:	0002      	movs	r2, r0
 8002588:	69bb      	ldr	r3, [r7, #24]
 800258a:	1ad3      	subs	r3, r2, r3
 800258c:	4a47      	ldr	r2, [pc, #284]	; (80026ac <HAL_RCC_OscConfig+0x67c>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d901      	bls.n	8002596 <HAL_RCC_OscConfig+0x566>
        {
          return HAL_TIMEOUT;
 8002592:	2303      	movs	r3, #3
 8002594:	e0b0      	b.n	80026f8 <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002596:	4b41      	ldr	r3, [pc, #260]	; (800269c <HAL_RCC_OscConfig+0x66c>)
 8002598:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800259a:	2380      	movs	r3, #128	; 0x80
 800259c:	009b      	lsls	r3, r3, #2
 800259e:	4013      	ands	r3, r2
 80025a0:	d1ef      	bne.n	8002582 <HAL_RCC_OscConfig+0x552>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80025a2:	2327      	movs	r3, #39	; 0x27
 80025a4:	18fb      	adds	r3, r7, r3
 80025a6:	781b      	ldrb	r3, [r3, #0]
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d105      	bne.n	80025b8 <HAL_RCC_OscConfig+0x588>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025ac:	4b3b      	ldr	r3, [pc, #236]	; (800269c <HAL_RCC_OscConfig+0x66c>)
 80025ae:	4a3b      	ldr	r2, [pc, #236]	; (800269c <HAL_RCC_OscConfig+0x66c>)
 80025b0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80025b2:	493f      	ldr	r1, [pc, #252]	; (80026b0 <HAL_RCC_OscConfig+0x680>)
 80025b4:	400a      	ands	r2, r1
 80025b6:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d100      	bne.n	80025c2 <HAL_RCC_OscConfig+0x592>
 80025c0:	e099      	b.n	80026f6 <HAL_RCC_OscConfig+0x6c6>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025c2:	6a3b      	ldr	r3, [r7, #32]
 80025c4:	2b0c      	cmp	r3, #12
 80025c6:	d063      	beq.n	8002690 <HAL_RCC_OscConfig+0x660>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025cc:	2b02      	cmp	r3, #2
 80025ce:	d144      	bne.n	800265a <HAL_RCC_OscConfig+0x62a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025d0:	4b32      	ldr	r3, [pc, #200]	; (800269c <HAL_RCC_OscConfig+0x66c>)
 80025d2:	4a32      	ldr	r2, [pc, #200]	; (800269c <HAL_RCC_OscConfig+0x66c>)
 80025d4:	6812      	ldr	r2, [r2, #0]
 80025d6:	4937      	ldr	r1, [pc, #220]	; (80026b4 <HAL_RCC_OscConfig+0x684>)
 80025d8:	400a      	ands	r2, r1
 80025da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025dc:	f7fe fdaa 	bl	8001134 <HAL_GetTick>
 80025e0:	0003      	movs	r3, r0
 80025e2:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80025e4:	e008      	b.n	80025f8 <HAL_RCC_OscConfig+0x5c8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025e6:	f7fe fda5 	bl	8001134 <HAL_GetTick>
 80025ea:	0002      	movs	r2, r0
 80025ec:	69bb      	ldr	r3, [r7, #24]
 80025ee:	1ad3      	subs	r3, r2, r3
 80025f0:	2b02      	cmp	r3, #2
 80025f2:	d901      	bls.n	80025f8 <HAL_RCC_OscConfig+0x5c8>
          {
            return HAL_TIMEOUT;
 80025f4:	2303      	movs	r3, #3
 80025f6:	e07f      	b.n	80026f8 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80025f8:	4b28      	ldr	r3, [pc, #160]	; (800269c <HAL_RCC_OscConfig+0x66c>)
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	2380      	movs	r3, #128	; 0x80
 80025fe:	049b      	lsls	r3, r3, #18
 8002600:	4013      	ands	r3, r2
 8002602:	d1f0      	bne.n	80025e6 <HAL_RCC_OscConfig+0x5b6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002604:	4a25      	ldr	r2, [pc, #148]	; (800269c <HAL_RCC_OscConfig+0x66c>)
 8002606:	4b25      	ldr	r3, [pc, #148]	; (800269c <HAL_RCC_OscConfig+0x66c>)
 8002608:	68db      	ldr	r3, [r3, #12]
 800260a:	492b      	ldr	r1, [pc, #172]	; (80026b8 <HAL_RCC_OscConfig+0x688>)
 800260c:	4019      	ands	r1, r3
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002616:	4318      	orrs	r0, r3
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800261c:	4303      	orrs	r3, r0
 800261e:	430b      	orrs	r3, r1
 8002620:	60d3      	str	r3, [r2, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002622:	4b1e      	ldr	r3, [pc, #120]	; (800269c <HAL_RCC_OscConfig+0x66c>)
 8002624:	4a1d      	ldr	r2, [pc, #116]	; (800269c <HAL_RCC_OscConfig+0x66c>)
 8002626:	6812      	ldr	r2, [r2, #0]
 8002628:	2180      	movs	r1, #128	; 0x80
 800262a:	0449      	lsls	r1, r1, #17
 800262c:	430a      	orrs	r2, r1
 800262e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002630:	f7fe fd80 	bl	8001134 <HAL_GetTick>
 8002634:	0003      	movs	r3, r0
 8002636:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002638:	e008      	b.n	800264c <HAL_RCC_OscConfig+0x61c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800263a:	f7fe fd7b 	bl	8001134 <HAL_GetTick>
 800263e:	0002      	movs	r2, r0
 8002640:	69bb      	ldr	r3, [r7, #24]
 8002642:	1ad3      	subs	r3, r2, r3
 8002644:	2b02      	cmp	r3, #2
 8002646:	d901      	bls.n	800264c <HAL_RCC_OscConfig+0x61c>
          {
            return HAL_TIMEOUT;
 8002648:	2303      	movs	r3, #3
 800264a:	e055      	b.n	80026f8 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800264c:	4b13      	ldr	r3, [pc, #76]	; (800269c <HAL_RCC_OscConfig+0x66c>)
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	2380      	movs	r3, #128	; 0x80
 8002652:	049b      	lsls	r3, r3, #18
 8002654:	4013      	ands	r3, r2
 8002656:	d0f0      	beq.n	800263a <HAL_RCC_OscConfig+0x60a>
 8002658:	e04d      	b.n	80026f6 <HAL_RCC_OscConfig+0x6c6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800265a:	4b10      	ldr	r3, [pc, #64]	; (800269c <HAL_RCC_OscConfig+0x66c>)
 800265c:	4a0f      	ldr	r2, [pc, #60]	; (800269c <HAL_RCC_OscConfig+0x66c>)
 800265e:	6812      	ldr	r2, [r2, #0]
 8002660:	4914      	ldr	r1, [pc, #80]	; (80026b4 <HAL_RCC_OscConfig+0x684>)
 8002662:	400a      	ands	r2, r1
 8002664:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002666:	f7fe fd65 	bl	8001134 <HAL_GetTick>
 800266a:	0003      	movs	r3, r0
 800266c:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800266e:	e008      	b.n	8002682 <HAL_RCC_OscConfig+0x652>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002670:	f7fe fd60 	bl	8001134 <HAL_GetTick>
 8002674:	0002      	movs	r2, r0
 8002676:	69bb      	ldr	r3, [r7, #24]
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	2b02      	cmp	r3, #2
 800267c:	d901      	bls.n	8002682 <HAL_RCC_OscConfig+0x652>
          {
            return HAL_TIMEOUT;
 800267e:	2303      	movs	r3, #3
 8002680:	e03a      	b.n	80026f8 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002682:	4b06      	ldr	r3, [pc, #24]	; (800269c <HAL_RCC_OscConfig+0x66c>)
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	2380      	movs	r3, #128	; 0x80
 8002688:	049b      	lsls	r3, r3, #18
 800268a:	4013      	ands	r3, r2
 800268c:	d1f0      	bne.n	8002670 <HAL_RCC_OscConfig+0x640>
 800268e:	e032      	b.n	80026f6 <HAL_RCC_OscConfig+0x6c6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002694:	2b01      	cmp	r3, #1
 8002696:	d111      	bne.n	80026bc <HAL_RCC_OscConfig+0x68c>
      {
        return HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	e02d      	b.n	80026f8 <HAL_RCC_OscConfig+0x6c8>
 800269c:	40021000 	.word	0x40021000
 80026a0:	fffffeff 	.word	0xfffffeff
 80026a4:	40007000 	.word	0x40007000
 80026a8:	fffffbff 	.word	0xfffffbff
 80026ac:	00001388 	.word	0x00001388
 80026b0:	efffffff 	.word	0xefffffff
 80026b4:	feffffff 	.word	0xfeffffff
 80026b8:	ff02ffff 	.word	0xff02ffff
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80026bc:	4b10      	ldr	r3, [pc, #64]	; (8002700 <HAL_RCC_OscConfig+0x6d0>)
 80026be:	68db      	ldr	r3, [r3, #12]
 80026c0:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026c2:	69fa      	ldr	r2, [r7, #28]
 80026c4:	2380      	movs	r3, #128	; 0x80
 80026c6:	025b      	lsls	r3, r3, #9
 80026c8:	401a      	ands	r2, r3
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ce:	429a      	cmp	r2, r3
 80026d0:	d10f      	bne.n	80026f2 <HAL_RCC_OscConfig+0x6c2>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80026d2:	69fa      	ldr	r2, [r7, #28]
 80026d4:	23f0      	movs	r3, #240	; 0xf0
 80026d6:	039b      	lsls	r3, r3, #14
 80026d8:	401a      	ands	r2, r3
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026de:	429a      	cmp	r2, r3
 80026e0:	d107      	bne.n	80026f2 <HAL_RCC_OscConfig+0x6c2>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80026e2:	69fa      	ldr	r2, [r7, #28]
 80026e4:	23c0      	movs	r3, #192	; 0xc0
 80026e6:	041b      	lsls	r3, r3, #16
 80026e8:	401a      	ands	r2, r3
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80026ee:	429a      	cmp	r2, r3
 80026f0:	d001      	beq.n	80026f6 <HAL_RCC_OscConfig+0x6c6>
        {
          return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e000      	b.n	80026f8 <HAL_RCC_OscConfig+0x6c8>
        }
      }
    }
  }
  return HAL_OK;
 80026f6:	2300      	movs	r3, #0
}
 80026f8:	0018      	movs	r0, r3
 80026fa:	46bd      	mov	sp, r7
 80026fc:	b00b      	add	sp, #44	; 0x2c
 80026fe:	bd90      	pop	{r4, r7, pc}
 8002700:	40021000 	.word	0x40021000

08002704 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002704:	b590      	push	{r4, r7, lr}
 8002706:	b085      	sub	sp, #20
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
 800270c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d101      	bne.n	8002718 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	e128      	b.n	800296a <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002718:	4b96      	ldr	r3, [pc, #600]	; (8002974 <HAL_RCC_ClockConfig+0x270>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	2201      	movs	r2, #1
 800271e:	401a      	ands	r2, r3
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	429a      	cmp	r2, r3
 8002724:	d21e      	bcs.n	8002764 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002726:	4b93      	ldr	r3, [pc, #588]	; (8002974 <HAL_RCC_ClockConfig+0x270>)
 8002728:	4a92      	ldr	r2, [pc, #584]	; (8002974 <HAL_RCC_ClockConfig+0x270>)
 800272a:	6812      	ldr	r2, [r2, #0]
 800272c:	2101      	movs	r1, #1
 800272e:	438a      	bics	r2, r1
 8002730:	0011      	movs	r1, r2
 8002732:	683a      	ldr	r2, [r7, #0]
 8002734:	430a      	orrs	r2, r1
 8002736:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002738:	f7fe fcfc 	bl	8001134 <HAL_GetTick>
 800273c:	0003      	movs	r3, r0
 800273e:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002740:	e009      	b.n	8002756 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002742:	f7fe fcf7 	bl	8001134 <HAL_GetTick>
 8002746:	0002      	movs	r2, r0
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	1ad3      	subs	r3, r2, r3
 800274c:	4a8a      	ldr	r2, [pc, #552]	; (8002978 <HAL_RCC_ClockConfig+0x274>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d901      	bls.n	8002756 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002752:	2303      	movs	r3, #3
 8002754:	e109      	b.n	800296a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002756:	4b87      	ldr	r3, [pc, #540]	; (8002974 <HAL_RCC_ClockConfig+0x270>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	2201      	movs	r2, #1
 800275c:	401a      	ands	r2, r3
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	429a      	cmp	r2, r3
 8002762:	d1ee      	bne.n	8002742 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	2202      	movs	r2, #2
 800276a:	4013      	ands	r3, r2
 800276c:	d009      	beq.n	8002782 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800276e:	4a83      	ldr	r2, [pc, #524]	; (800297c <HAL_RCC_ClockConfig+0x278>)
 8002770:	4b82      	ldr	r3, [pc, #520]	; (800297c <HAL_RCC_ClockConfig+0x278>)
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	21f0      	movs	r1, #240	; 0xf0
 8002776:	438b      	bics	r3, r1
 8002778:	0019      	movs	r1, r3
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	430b      	orrs	r3, r1
 8002780:	60d3      	str	r3, [r2, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	2201      	movs	r2, #1
 8002788:	4013      	ands	r3, r2
 800278a:	d100      	bne.n	800278e <HAL_RCC_ClockConfig+0x8a>
 800278c:	e089      	b.n	80028a2 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	2b02      	cmp	r3, #2
 8002794:	d107      	bne.n	80027a6 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002796:	4b79      	ldr	r3, [pc, #484]	; (800297c <HAL_RCC_ClockConfig+0x278>)
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	2380      	movs	r3, #128	; 0x80
 800279c:	029b      	lsls	r3, r3, #10
 800279e:	4013      	ands	r3, r2
 80027a0:	d120      	bne.n	80027e4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e0e1      	b.n	800296a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	2b03      	cmp	r3, #3
 80027ac:	d107      	bne.n	80027be <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80027ae:	4b73      	ldr	r3, [pc, #460]	; (800297c <HAL_RCC_ClockConfig+0x278>)
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	2380      	movs	r3, #128	; 0x80
 80027b4:	049b      	lsls	r3, r3, #18
 80027b6:	4013      	ands	r3, r2
 80027b8:	d114      	bne.n	80027e4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e0d5      	b.n	800296a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d106      	bne.n	80027d4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80027c6:	4b6d      	ldr	r3, [pc, #436]	; (800297c <HAL_RCC_ClockConfig+0x278>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	2204      	movs	r2, #4
 80027cc:	4013      	ands	r3, r2
 80027ce:	d109      	bne.n	80027e4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e0ca      	b.n	800296a <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80027d4:	4b69      	ldr	r3, [pc, #420]	; (800297c <HAL_RCC_ClockConfig+0x278>)
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	2380      	movs	r3, #128	; 0x80
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	4013      	ands	r3, r2
 80027de:	d101      	bne.n	80027e4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	e0c2      	b.n	800296a <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027e4:	4a65      	ldr	r2, [pc, #404]	; (800297c <HAL_RCC_ClockConfig+0x278>)
 80027e6:	4b65      	ldr	r3, [pc, #404]	; (800297c <HAL_RCC_ClockConfig+0x278>)
 80027e8:	68db      	ldr	r3, [r3, #12]
 80027ea:	2103      	movs	r1, #3
 80027ec:	438b      	bics	r3, r1
 80027ee:	0019      	movs	r1, r3
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	430b      	orrs	r3, r1
 80027f6:	60d3      	str	r3, [r2, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027f8:	f7fe fc9c 	bl	8001134 <HAL_GetTick>
 80027fc:	0003      	movs	r3, r0
 80027fe:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	2b02      	cmp	r3, #2
 8002806:	d111      	bne.n	800282c <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002808:	e009      	b.n	800281e <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800280a:	f7fe fc93 	bl	8001134 <HAL_GetTick>
 800280e:	0002      	movs	r2, r0
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	1ad3      	subs	r3, r2, r3
 8002814:	4a58      	ldr	r2, [pc, #352]	; (8002978 <HAL_RCC_ClockConfig+0x274>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d901      	bls.n	800281e <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	e0a5      	b.n	800296a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800281e:	4b57      	ldr	r3, [pc, #348]	; (800297c <HAL_RCC_ClockConfig+0x278>)
 8002820:	68db      	ldr	r3, [r3, #12]
 8002822:	220c      	movs	r2, #12
 8002824:	4013      	ands	r3, r2
 8002826:	2b08      	cmp	r3, #8
 8002828:	d1ef      	bne.n	800280a <HAL_RCC_ClockConfig+0x106>
 800282a:	e03a      	b.n	80028a2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	2b03      	cmp	r3, #3
 8002832:	d111      	bne.n	8002858 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002834:	e009      	b.n	800284a <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002836:	f7fe fc7d 	bl	8001134 <HAL_GetTick>
 800283a:	0002      	movs	r2, r0
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	1ad3      	subs	r3, r2, r3
 8002840:	4a4d      	ldr	r2, [pc, #308]	; (8002978 <HAL_RCC_ClockConfig+0x274>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d901      	bls.n	800284a <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8002846:	2303      	movs	r3, #3
 8002848:	e08f      	b.n	800296a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800284a:	4b4c      	ldr	r3, [pc, #304]	; (800297c <HAL_RCC_ClockConfig+0x278>)
 800284c:	68db      	ldr	r3, [r3, #12]
 800284e:	220c      	movs	r2, #12
 8002850:	4013      	ands	r3, r2
 8002852:	2b0c      	cmp	r3, #12
 8002854:	d1ef      	bne.n	8002836 <HAL_RCC_ClockConfig+0x132>
 8002856:	e024      	b.n	80028a2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	2b01      	cmp	r3, #1
 800285e:	d11b      	bne.n	8002898 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002860:	e009      	b.n	8002876 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002862:	f7fe fc67 	bl	8001134 <HAL_GetTick>
 8002866:	0002      	movs	r2, r0
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	1ad3      	subs	r3, r2, r3
 800286c:	4a42      	ldr	r2, [pc, #264]	; (8002978 <HAL_RCC_ClockConfig+0x274>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d901      	bls.n	8002876 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8002872:	2303      	movs	r3, #3
 8002874:	e079      	b.n	800296a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002876:	4b41      	ldr	r3, [pc, #260]	; (800297c <HAL_RCC_ClockConfig+0x278>)
 8002878:	68db      	ldr	r3, [r3, #12]
 800287a:	220c      	movs	r2, #12
 800287c:	4013      	ands	r3, r2
 800287e:	2b04      	cmp	r3, #4
 8002880:	d1ef      	bne.n	8002862 <HAL_RCC_ClockConfig+0x15e>
 8002882:	e00e      	b.n	80028a2 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002884:	f7fe fc56 	bl	8001134 <HAL_GetTick>
 8002888:	0002      	movs	r2, r0
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	4a3a      	ldr	r2, [pc, #232]	; (8002978 <HAL_RCC_ClockConfig+0x274>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d901      	bls.n	8002898 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8002894:	2303      	movs	r3, #3
 8002896:	e068      	b.n	800296a <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002898:	4b38      	ldr	r3, [pc, #224]	; (800297c <HAL_RCC_ClockConfig+0x278>)
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	220c      	movs	r2, #12
 800289e:	4013      	ands	r3, r2
 80028a0:	d1f0      	bne.n	8002884 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028a2:	4b34      	ldr	r3, [pc, #208]	; (8002974 <HAL_RCC_ClockConfig+0x270>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	2201      	movs	r2, #1
 80028a8:	401a      	ands	r2, r3
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d91e      	bls.n	80028ee <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028b0:	4b30      	ldr	r3, [pc, #192]	; (8002974 <HAL_RCC_ClockConfig+0x270>)
 80028b2:	4a30      	ldr	r2, [pc, #192]	; (8002974 <HAL_RCC_ClockConfig+0x270>)
 80028b4:	6812      	ldr	r2, [r2, #0]
 80028b6:	2101      	movs	r1, #1
 80028b8:	438a      	bics	r2, r1
 80028ba:	0011      	movs	r1, r2
 80028bc:	683a      	ldr	r2, [r7, #0]
 80028be:	430a      	orrs	r2, r1
 80028c0:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80028c2:	f7fe fc37 	bl	8001134 <HAL_GetTick>
 80028c6:	0003      	movs	r3, r0
 80028c8:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028ca:	e009      	b.n	80028e0 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028cc:	f7fe fc32 	bl	8001134 <HAL_GetTick>
 80028d0:	0002      	movs	r2, r0
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	4a28      	ldr	r2, [pc, #160]	; (8002978 <HAL_RCC_ClockConfig+0x274>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d901      	bls.n	80028e0 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80028dc:	2303      	movs	r3, #3
 80028de:	e044      	b.n	800296a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028e0:	4b24      	ldr	r3, [pc, #144]	; (8002974 <HAL_RCC_ClockConfig+0x270>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	2201      	movs	r2, #1
 80028e6:	401a      	ands	r2, r3
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	429a      	cmp	r2, r3
 80028ec:	d1ee      	bne.n	80028cc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	2204      	movs	r2, #4
 80028f4:	4013      	ands	r3, r2
 80028f6:	d008      	beq.n	800290a <HAL_RCC_ClockConfig+0x206>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028f8:	4a20      	ldr	r2, [pc, #128]	; (800297c <HAL_RCC_ClockConfig+0x278>)
 80028fa:	4b20      	ldr	r3, [pc, #128]	; (800297c <HAL_RCC_ClockConfig+0x278>)
 80028fc:	68db      	ldr	r3, [r3, #12]
 80028fe:	4920      	ldr	r1, [pc, #128]	; (8002980 <HAL_RCC_ClockConfig+0x27c>)
 8002900:	4019      	ands	r1, r3
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	68db      	ldr	r3, [r3, #12]
 8002906:	430b      	orrs	r3, r1
 8002908:	60d3      	str	r3, [r2, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	2208      	movs	r2, #8
 8002910:	4013      	ands	r3, r2
 8002912:	d009      	beq.n	8002928 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002914:	4a19      	ldr	r2, [pc, #100]	; (800297c <HAL_RCC_ClockConfig+0x278>)
 8002916:	4b19      	ldr	r3, [pc, #100]	; (800297c <HAL_RCC_ClockConfig+0x278>)
 8002918:	68db      	ldr	r3, [r3, #12]
 800291a:	491a      	ldr	r1, [pc, #104]	; (8002984 <HAL_RCC_ClockConfig+0x280>)
 800291c:	4019      	ands	r1, r3
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	691b      	ldr	r3, [r3, #16]
 8002922:	00db      	lsls	r3, r3, #3
 8002924:	430b      	orrs	r3, r1
 8002926:	60d3      	str	r3, [r2, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002928:	f000 f834 	bl	8002994 <HAL_RCC_GetSysClockFreq>
 800292c:	0001      	movs	r1, r0
 800292e:	4b13      	ldr	r3, [pc, #76]	; (800297c <HAL_RCC_ClockConfig+0x278>)
 8002930:	68db      	ldr	r3, [r3, #12]
 8002932:	091b      	lsrs	r3, r3, #4
 8002934:	220f      	movs	r2, #15
 8002936:	4013      	ands	r3, r2
 8002938:	4a13      	ldr	r2, [pc, #76]	; (8002988 <HAL_RCC_ClockConfig+0x284>)
 800293a:	5cd3      	ldrb	r3, [r2, r3]
 800293c:	000a      	movs	r2, r1
 800293e:	40da      	lsrs	r2, r3
 8002940:	4b12      	ldr	r3, [pc, #72]	; (800298c <HAL_RCC_ClockConfig+0x288>)
 8002942:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002944:	4b12      	ldr	r3, [pc, #72]	; (8002990 <HAL_RCC_ClockConfig+0x28c>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	220b      	movs	r2, #11
 800294a:	18bc      	adds	r4, r7, r2
 800294c:	0018      	movs	r0, r3
 800294e:	f7fe fbab 	bl	80010a8 <HAL_InitTick>
 8002952:	0003      	movs	r3, r0
 8002954:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8002956:	230b      	movs	r3, #11
 8002958:	18fb      	adds	r3, r7, r3
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d003      	beq.n	8002968 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8002960:	230b      	movs	r3, #11
 8002962:	18fb      	adds	r3, r7, r3
 8002964:	781b      	ldrb	r3, [r3, #0]
 8002966:	e000      	b.n	800296a <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8002968:	2300      	movs	r3, #0
}
 800296a:	0018      	movs	r0, r3
 800296c:	46bd      	mov	sp, r7
 800296e:	b005      	add	sp, #20
 8002970:	bd90      	pop	{r4, r7, pc}
 8002972:	46c0      	nop			; (mov r8, r8)
 8002974:	40022000 	.word	0x40022000
 8002978:	00001388 	.word	0x00001388
 800297c:	40021000 	.word	0x40021000
 8002980:	fffff8ff 	.word	0xfffff8ff
 8002984:	ffffc7ff 	.word	0xffffc7ff
 8002988:	0800419c 	.word	0x0800419c
 800298c:	20000000 	.word	0x20000000
 8002990:	20000004 	.word	0x20000004

08002994 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002994:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002996:	b08f      	sub	sp, #60	; 0x3c
 8002998:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800299a:	4b4a      	ldr	r3, [pc, #296]	; (8002ac4 <HAL_RCC_GetSysClockFreq+0x130>)
 800299c:	68db      	ldr	r3, [r3, #12]
 800299e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80029a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029a2:	230c      	movs	r3, #12
 80029a4:	4013      	ands	r3, r2
 80029a6:	2b08      	cmp	r3, #8
 80029a8:	d00f      	beq.n	80029ca <HAL_RCC_GetSysClockFreq+0x36>
 80029aa:	2b0c      	cmp	r3, #12
 80029ac:	d010      	beq.n	80029d0 <HAL_RCC_GetSysClockFreq+0x3c>
 80029ae:	2b04      	cmp	r3, #4
 80029b0:	d000      	beq.n	80029b4 <HAL_RCC_GetSysClockFreq+0x20>
 80029b2:	e073      	b.n	8002a9c <HAL_RCC_GetSysClockFreq+0x108>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80029b4:	4b43      	ldr	r3, [pc, #268]	; (8002ac4 <HAL_RCC_GetSysClockFreq+0x130>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	2210      	movs	r2, #16
 80029ba:	4013      	ands	r3, r2
 80029bc:	d002      	beq.n	80029c4 <HAL_RCC_GetSysClockFreq+0x30>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80029be:	4b42      	ldr	r3, [pc, #264]	; (8002ac8 <HAL_RCC_GetSysClockFreq+0x134>)
 80029c0:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80029c2:	e079      	b.n	8002ab8 <HAL_RCC_GetSysClockFreq+0x124>
        sysclockfreq =  HSI_VALUE;
 80029c4:	4b41      	ldr	r3, [pc, #260]	; (8002acc <HAL_RCC_GetSysClockFreq+0x138>)
 80029c6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80029c8:	e076      	b.n	8002ab8 <HAL_RCC_GetSysClockFreq+0x124>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80029ca:	4b41      	ldr	r3, [pc, #260]	; (8002ad0 <HAL_RCC_GetSysClockFreq+0x13c>)
 80029cc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80029ce:	e073      	b.n	8002ab8 <HAL_RCC_GetSysClockFreq+0x124>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80029d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029d2:	0c9a      	lsrs	r2, r3, #18
 80029d4:	230f      	movs	r3, #15
 80029d6:	401a      	ands	r2, r3
 80029d8:	4b3e      	ldr	r3, [pc, #248]	; (8002ad4 <HAL_RCC_GetSysClockFreq+0x140>)
 80029da:	5c9b      	ldrb	r3, [r3, r2]
 80029dc:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80029de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029e0:	0d9a      	lsrs	r2, r3, #22
 80029e2:	2303      	movs	r3, #3
 80029e4:	4013      	ands	r3, r2
 80029e6:	3301      	adds	r3, #1
 80029e8:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80029ea:	4b36      	ldr	r3, [pc, #216]	; (8002ac4 <HAL_RCC_GetSysClockFreq+0x130>)
 80029ec:	68da      	ldr	r2, [r3, #12]
 80029ee:	2380      	movs	r3, #128	; 0x80
 80029f0:	025b      	lsls	r3, r3, #9
 80029f2:	4013      	ands	r3, r2
 80029f4:	d019      	beq.n	8002a2a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80029f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029f8:	61bb      	str	r3, [r7, #24]
 80029fa:	2300      	movs	r3, #0
 80029fc:	61fb      	str	r3, [r7, #28]
 80029fe:	4a34      	ldr	r2, [pc, #208]	; (8002ad0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002a00:	2300      	movs	r3, #0
 8002a02:	69b8      	ldr	r0, [r7, #24]
 8002a04:	69f9      	ldr	r1, [r7, #28]
 8002a06:	f7fd fc2b 	bl	8000260 <__aeabi_lmul>
 8002a0a:	0003      	movs	r3, r0
 8002a0c:	000c      	movs	r4, r1
 8002a0e:	0018      	movs	r0, r3
 8002a10:	0021      	movs	r1, r4
 8002a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a14:	613b      	str	r3, [r7, #16]
 8002a16:	2300      	movs	r3, #0
 8002a18:	617b      	str	r3, [r7, #20]
 8002a1a:	693a      	ldr	r2, [r7, #16]
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	f7fd fbff 	bl	8000220 <__aeabi_uldivmod>
 8002a22:	0003      	movs	r3, r0
 8002a24:	000c      	movs	r4, r1
 8002a26:	637b      	str	r3, [r7, #52]	; 0x34
 8002a28:	e035      	b.n	8002a96 <HAL_RCC_GetSysClockFreq+0x102>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002a2a:	4b26      	ldr	r3, [pc, #152]	; (8002ac4 <HAL_RCC_GetSysClockFreq+0x130>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	2210      	movs	r2, #16
 8002a30:	4013      	ands	r3, r2
 8002a32:	d019      	beq.n	8002a68 <HAL_RCC_GetSysClockFreq+0xd4>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8002a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a36:	60bb      	str	r3, [r7, #8]
 8002a38:	2300      	movs	r3, #0
 8002a3a:	60fb      	str	r3, [r7, #12]
 8002a3c:	4a22      	ldr	r2, [pc, #136]	; (8002ac8 <HAL_RCC_GetSysClockFreq+0x134>)
 8002a3e:	2300      	movs	r3, #0
 8002a40:	68b8      	ldr	r0, [r7, #8]
 8002a42:	68f9      	ldr	r1, [r7, #12]
 8002a44:	f7fd fc0c 	bl	8000260 <__aeabi_lmul>
 8002a48:	0003      	movs	r3, r0
 8002a4a:	000c      	movs	r4, r1
 8002a4c:	0018      	movs	r0, r3
 8002a4e:	0021      	movs	r1, r4
 8002a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a52:	603b      	str	r3, [r7, #0]
 8002a54:	2300      	movs	r3, #0
 8002a56:	607b      	str	r3, [r7, #4]
 8002a58:	683a      	ldr	r2, [r7, #0]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	f7fd fbe0 	bl	8000220 <__aeabi_uldivmod>
 8002a60:	0003      	movs	r3, r0
 8002a62:	000c      	movs	r4, r1
 8002a64:	637b      	str	r3, [r7, #52]	; 0x34
 8002a66:	e016      	b.n	8002a96 <HAL_RCC_GetSysClockFreq+0x102>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a6a:	0018      	movs	r0, r3
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	0019      	movs	r1, r3
 8002a70:	4a16      	ldr	r2, [pc, #88]	; (8002acc <HAL_RCC_GetSysClockFreq+0x138>)
 8002a72:	2300      	movs	r3, #0
 8002a74:	f7fd fbf4 	bl	8000260 <__aeabi_lmul>
 8002a78:	0003      	movs	r3, r0
 8002a7a:	000c      	movs	r4, r1
 8002a7c:	0018      	movs	r0, r3
 8002a7e:	0021      	movs	r1, r4
 8002a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a82:	001d      	movs	r5, r3
 8002a84:	2300      	movs	r3, #0
 8002a86:	001e      	movs	r6, r3
 8002a88:	002a      	movs	r2, r5
 8002a8a:	0033      	movs	r3, r6
 8002a8c:	f7fd fbc8 	bl	8000220 <__aeabi_uldivmod>
 8002a90:	0003      	movs	r3, r0
 8002a92:	000c      	movs	r4, r1
 8002a94:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8002a96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a98:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002a9a:	e00d      	b.n	8002ab8 <HAL_RCC_GetSysClockFreq+0x124>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002a9c:	4b09      	ldr	r3, [pc, #36]	; (8002ac4 <HAL_RCC_GetSysClockFreq+0x130>)
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	0b5b      	lsrs	r3, r3, #13
 8002aa2:	2207      	movs	r2, #7
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002aa8:	6a3b      	ldr	r3, [r7, #32]
 8002aaa:	3301      	adds	r3, #1
 8002aac:	2280      	movs	r2, #128	; 0x80
 8002aae:	0212      	lsls	r2, r2, #8
 8002ab0:	409a      	lsls	r2, r3
 8002ab2:	0013      	movs	r3, r2
 8002ab4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002ab6:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002aba:	0018      	movs	r0, r3
 8002abc:	46bd      	mov	sp, r7
 8002abe:	b00f      	add	sp, #60	; 0x3c
 8002ac0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ac2:	46c0      	nop			; (mov r8, r8)
 8002ac4:	40021000 	.word	0x40021000
 8002ac8:	003d0900 	.word	0x003d0900
 8002acc:	00f42400 	.word	0x00f42400
 8002ad0:	007a1200 	.word	0x007a1200
 8002ad4:	080041b4 	.word	0x080041b4

08002ad8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002adc:	4b02      	ldr	r3, [pc, #8]	; (8002ae8 <HAL_RCC_GetHCLKFreq+0x10>)
 8002ade:	681b      	ldr	r3, [r3, #0]
}
 8002ae0:	0018      	movs	r0, r3
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	46c0      	nop			; (mov r8, r8)
 8002ae8:	20000000 	.word	0x20000000

08002aec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002af0:	f7ff fff2 	bl	8002ad8 <HAL_RCC_GetHCLKFreq>
 8002af4:	0001      	movs	r1, r0
 8002af6:	4b06      	ldr	r3, [pc, #24]	; (8002b10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002af8:	68db      	ldr	r3, [r3, #12]
 8002afa:	0a1b      	lsrs	r3, r3, #8
 8002afc:	2207      	movs	r2, #7
 8002afe:	4013      	ands	r3, r2
 8002b00:	4a04      	ldr	r2, [pc, #16]	; (8002b14 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002b02:	5cd3      	ldrb	r3, [r2, r3]
 8002b04:	40d9      	lsrs	r1, r3
 8002b06:	000b      	movs	r3, r1
}
 8002b08:	0018      	movs	r0, r3
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	46c0      	nop			; (mov r8, r8)
 8002b10:	40021000 	.word	0x40021000
 8002b14:	080041ac 	.word	0x080041ac

08002b18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002b1c:	f7ff ffdc 	bl	8002ad8 <HAL_RCC_GetHCLKFreq>
 8002b20:	0001      	movs	r1, r0
 8002b22:	4b06      	ldr	r3, [pc, #24]	; (8002b3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b24:	68db      	ldr	r3, [r3, #12]
 8002b26:	0adb      	lsrs	r3, r3, #11
 8002b28:	2207      	movs	r2, #7
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	4a04      	ldr	r2, [pc, #16]	; (8002b40 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002b2e:	5cd3      	ldrb	r3, [r2, r3]
 8002b30:	40d9      	lsrs	r1, r3
 8002b32:	000b      	movs	r3, r1
}
 8002b34:	0018      	movs	r0, r3
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	46c0      	nop			; (mov r8, r8)
 8002b3c:	40021000 	.word	0x40021000
 8002b40:	080041ac 	.word	0x080041ac

08002b44 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b086      	sub	sp, #24
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8002b4c:	2317      	movs	r3, #23
 8002b4e:	18fb      	adds	r3, r7, r3
 8002b50:	2200      	movs	r2, #0
 8002b52:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	2220      	movs	r2, #32
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	d100      	bne.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8002b5e:	e0c2      	b.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b60:	4b87      	ldr	r3, [pc, #540]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002b62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b64:	2380      	movs	r3, #128	; 0x80
 8002b66:	055b      	lsls	r3, r3, #21
 8002b68:	4013      	ands	r3, r2
 8002b6a:	d10a      	bne.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x3e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b6c:	4b84      	ldr	r3, [pc, #528]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002b6e:	4a84      	ldr	r2, [pc, #528]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002b70:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002b72:	2180      	movs	r1, #128	; 0x80
 8002b74:	0549      	lsls	r1, r1, #21
 8002b76:	430a      	orrs	r2, r1
 8002b78:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002b7a:	2317      	movs	r3, #23
 8002b7c:	18fb      	adds	r3, r7, r3
 8002b7e:	2201      	movs	r2, #1
 8002b80:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b82:	4b80      	ldr	r3, [pc, #512]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	2380      	movs	r3, #128	; 0x80
 8002b88:	005b      	lsls	r3, r3, #1
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	d11a      	bne.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b8e:	4b7d      	ldr	r3, [pc, #500]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002b90:	4a7c      	ldr	r2, [pc, #496]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002b92:	6812      	ldr	r2, [r2, #0]
 8002b94:	2180      	movs	r1, #128	; 0x80
 8002b96:	0049      	lsls	r1, r1, #1
 8002b98:	430a      	orrs	r2, r1
 8002b9a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b9c:	f7fe faca 	bl	8001134 <HAL_GetTick>
 8002ba0:	0003      	movs	r3, r0
 8002ba2:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ba4:	e008      	b.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x74>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ba6:	f7fe fac5 	bl	8001134 <HAL_GetTick>
 8002baa:	0002      	movs	r2, r0
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	1ad3      	subs	r3, r2, r3
 8002bb0:	2b64      	cmp	r3, #100	; 0x64
 8002bb2:	d901      	bls.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x74>
        {
          return HAL_TIMEOUT;
 8002bb4:	2303      	movs	r3, #3
 8002bb6:	e0df      	b.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x234>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bb8:	4b72      	ldr	r3, [pc, #456]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	2380      	movs	r3, #128	; 0x80
 8002bbe:	005b      	lsls	r3, r3, #1
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	d0f0      	beq.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0x62>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002bc4:	4b6e      	ldr	r3, [pc, #440]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	23c0      	movs	r3, #192	; 0xc0
 8002bca:	039b      	lsls	r3, r3, #14
 8002bcc:	4013      	ands	r3, r2
 8002bce:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	685a      	ldr	r2, [r3, #4]
 8002bd4:	23c0      	movs	r3, #192	; 0xc0
 8002bd6:	039b      	lsls	r3, r3, #14
 8002bd8:	401a      	ands	r2, r3
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d013      	beq.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0xc4>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	685a      	ldr	r2, [r3, #4]
 8002be4:	23c0      	movs	r3, #192	; 0xc0
 8002be6:	029b      	lsls	r3, r3, #10
 8002be8:	401a      	ands	r2, r3
 8002bea:	23c0      	movs	r3, #192	; 0xc0
 8002bec:	029b      	lsls	r3, r3, #10
 8002bee:	429a      	cmp	r2, r3
 8002bf0:	d10a      	bne.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0xc4>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002bf2:	4b63      	ldr	r3, [pc, #396]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	2380      	movs	r3, #128	; 0x80
 8002bf8:	029b      	lsls	r3, r3, #10
 8002bfa:	401a      	ands	r2, r3
 8002bfc:	2380      	movs	r3, #128	; 0x80
 8002bfe:	029b      	lsls	r3, r3, #10
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d101      	bne.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0xc4>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	e0b7      	b.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x234>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002c08:	4b5d      	ldr	r3, [pc, #372]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002c0a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002c0c:	23c0      	movs	r3, #192	; 0xc0
 8002c0e:	029b      	lsls	r3, r3, #10
 8002c10:	4013      	ands	r3, r2
 8002c12:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d03b      	beq.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	685a      	ldr	r2, [r3, #4]
 8002c1e:	23c0      	movs	r3, #192	; 0xc0
 8002c20:	029b      	lsls	r3, r3, #10
 8002c22:	401a      	ands	r2, r3
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d033      	beq.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	2220      	movs	r2, #32
 8002c30:	4013      	ands	r3, r2
 8002c32:	d02e      	beq.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x14e>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002c34:	4b52      	ldr	r3, [pc, #328]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002c36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c38:	4a53      	ldr	r2, [pc, #332]	; (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c3e:	4b50      	ldr	r3, [pc, #320]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002c40:	4a4f      	ldr	r2, [pc, #316]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002c42:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002c44:	2180      	movs	r1, #128	; 0x80
 8002c46:	0309      	lsls	r1, r1, #12
 8002c48:	430a      	orrs	r2, r1
 8002c4a:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002c4c:	4b4c      	ldr	r3, [pc, #304]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002c4e:	4a4c      	ldr	r2, [pc, #304]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002c50:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002c52:	494e      	ldr	r1, [pc, #312]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002c54:	400a      	ands	r2, r1
 8002c56:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002c58:	4b49      	ldr	r3, [pc, #292]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002c5a:	68fa      	ldr	r2, [r7, #12]
 8002c5c:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002c5e:	68fa      	ldr	r2, [r7, #12]
 8002c60:	2380      	movs	r3, #128	; 0x80
 8002c62:	005b      	lsls	r3, r3, #1
 8002c64:	4013      	ands	r3, r2
 8002c66:	d014      	beq.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c68:	f7fe fa64 	bl	8001134 <HAL_GetTick>
 8002c6c:	0003      	movs	r3, r0
 8002c6e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c70:	e009      	b.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x142>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c72:	f7fe fa5f 	bl	8001134 <HAL_GetTick>
 8002c76:	0002      	movs	r2, r0
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	1ad3      	subs	r3, r2, r3
 8002c7c:	4a44      	ldr	r2, [pc, #272]	; (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d901      	bls.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x142>
          {
            return HAL_TIMEOUT;
 8002c82:	2303      	movs	r3, #3
 8002c84:	e078      	b.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x234>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c86:	4b3e      	ldr	r3, [pc, #248]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002c88:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002c8a:	2380      	movs	r3, #128	; 0x80
 8002c8c:	009b      	lsls	r3, r3, #2
 8002c8e:	4013      	ands	r3, r2
 8002c90:	d0ef      	beq.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x12e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	685a      	ldr	r2, [r3, #4]
 8002c96:	23c0      	movs	r3, #192	; 0xc0
 8002c98:	029b      	lsls	r3, r3, #10
 8002c9a:	401a      	ands	r2, r3
 8002c9c:	23c0      	movs	r3, #192	; 0xc0
 8002c9e:	029b      	lsls	r3, r3, #10
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d10b      	bne.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x178>
 8002ca4:	4a36      	ldr	r2, [pc, #216]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002ca6:	4b36      	ldr	r3, [pc, #216]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	493a      	ldr	r1, [pc, #232]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002cac:	4019      	ands	r1, r3
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6858      	ldr	r0, [r3, #4]
 8002cb2:	23c0      	movs	r3, #192	; 0xc0
 8002cb4:	039b      	lsls	r3, r3, #14
 8002cb6:	4003      	ands	r3, r0
 8002cb8:	430b      	orrs	r3, r1
 8002cba:	6013      	str	r3, [r2, #0]
 8002cbc:	4a30      	ldr	r2, [pc, #192]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002cbe:	4b30      	ldr	r3, [pc, #192]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002cc0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6858      	ldr	r0, [r3, #4]
 8002cc6:	23c0      	movs	r3, #192	; 0xc0
 8002cc8:	029b      	lsls	r3, r3, #10
 8002cca:	4003      	ands	r3, r0
 8002ccc:	430b      	orrs	r3, r1
 8002cce:	6513      	str	r3, [r2, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002cd0:	2317      	movs	r3, #23
 8002cd2:	18fb      	adds	r3, r7, r3
 8002cd4:	781b      	ldrb	r3, [r3, #0]
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	d105      	bne.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cda:	4b29      	ldr	r3, [pc, #164]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002cdc:	4a28      	ldr	r2, [pc, #160]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002cde:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002ce0:	492d      	ldr	r1, [pc, #180]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002ce2:	400a      	ands	r2, r1
 8002ce4:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	2201      	movs	r2, #1
 8002cec:	4013      	ands	r3, r2
 8002cee:	d009      	beq.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002cf0:	4a23      	ldr	r2, [pc, #140]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002cf2:	4b23      	ldr	r3, [pc, #140]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002cf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cf6:	2103      	movs	r1, #3
 8002cf8:	438b      	bics	r3, r1
 8002cfa:	0019      	movs	r1, r3
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	430b      	orrs	r3, r1
 8002d02:	64d3      	str	r3, [r2, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	2202      	movs	r2, #2
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	d009      	beq.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d0e:	4a1c      	ldr	r2, [pc, #112]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002d10:	4b1b      	ldr	r3, [pc, #108]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002d12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d14:	210c      	movs	r1, #12
 8002d16:	438b      	bics	r3, r1
 8002d18:	0019      	movs	r1, r3
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	68db      	ldr	r3, [r3, #12]
 8002d1e:	430b      	orrs	r3, r1
 8002d20:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	2204      	movs	r2, #4
 8002d28:	4013      	ands	r3, r2
 8002d2a:	d008      	beq.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002d2c:	4a14      	ldr	r2, [pc, #80]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002d2e:	4b14      	ldr	r3, [pc, #80]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002d30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d32:	491a      	ldr	r1, [pc, #104]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002d34:	4019      	ands	r1, r3
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	691b      	ldr	r3, [r3, #16]
 8002d3a:	430b      	orrs	r3, r1
 8002d3c:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	2208      	movs	r2, #8
 8002d44:	4013      	ands	r3, r2
 8002d46:	d008      	beq.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d48:	4a0d      	ldr	r2, [pc, #52]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002d4a:	4b0d      	ldr	r3, [pc, #52]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002d4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d4e:	4914      	ldr	r1, [pc, #80]	; (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002d50:	4019      	ands	r1, r3
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	695b      	ldr	r3, [r3, #20]
 8002d56:	430b      	orrs	r3, r1
 8002d58:	64d3      	str	r3, [r2, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	2280      	movs	r2, #128	; 0x80
 8002d60:	4013      	ands	r3, r2
 8002d62:	d008      	beq.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x232>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002d64:	4a06      	ldr	r2, [pc, #24]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002d66:	4b06      	ldr	r3, [pc, #24]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002d68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d6a:	490e      	ldr	r1, [pc, #56]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d6c:	4019      	ands	r1, r3
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	699b      	ldr	r3, [r3, #24]
 8002d72:	430b      	orrs	r3, r1
 8002d74:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  return HAL_OK;
 8002d76:	2300      	movs	r3, #0
}
 8002d78:	0018      	movs	r0, r3
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	b006      	add	sp, #24
 8002d7e:	bd80      	pop	{r7, pc}
 8002d80:	40021000 	.word	0x40021000
 8002d84:	40007000 	.word	0x40007000
 8002d88:	fffcffff 	.word	0xfffcffff
 8002d8c:	fff7ffff 	.word	0xfff7ffff
 8002d90:	00001388 	.word	0x00001388
 8002d94:	ffcfffff 	.word	0xffcfffff
 8002d98:	efffffff 	.word	0xefffffff
 8002d9c:	fffff3ff 	.word	0xfffff3ff
 8002da0:	ffffcfff 	.word	0xffffcfff
 8002da4:	fff3ffff 	.word	0xfff3ffff

08002da8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b082      	sub	sp, #8
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d101      	bne.n	8002dba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e044      	b.n	8002e44 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d107      	bne.n	8002dd2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2274      	movs	r2, #116	; 0x74
 8002dc6:	2100      	movs	r1, #0
 8002dc8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	0018      	movs	r0, r3
 8002dce:	f7fe f8d1 	bl	8000f74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2224      	movs	r2, #36	; 0x24
 8002dd6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	687a      	ldr	r2, [r7, #4]
 8002dde:	6812      	ldr	r2, [r2, #0]
 8002de0:	6812      	ldr	r2, [r2, #0]
 8002de2:	2101      	movs	r1, #1
 8002de4:	438a      	bics	r2, r1
 8002de6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	0018      	movs	r0, r3
 8002dec:	f000 fb1e 	bl	800342c <UART_SetConfig>
 8002df0:	0003      	movs	r3, r0
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d101      	bne.n	8002dfa <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e024      	b.n	8002e44 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d003      	beq.n	8002e0a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	0018      	movs	r0, r3
 8002e06:	f000 fdb5 	bl	8003974 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	6812      	ldr	r2, [r2, #0]
 8002e12:	6852      	ldr	r2, [r2, #4]
 8002e14:	490d      	ldr	r1, [pc, #52]	; (8002e4c <HAL_UART_Init+0xa4>)
 8002e16:	400a      	ands	r2, r1
 8002e18:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	687a      	ldr	r2, [r7, #4]
 8002e20:	6812      	ldr	r2, [r2, #0]
 8002e22:	6892      	ldr	r2, [r2, #8]
 8002e24:	212a      	movs	r1, #42	; 0x2a
 8002e26:	438a      	bics	r2, r1
 8002e28:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	6812      	ldr	r2, [r2, #0]
 8002e32:	6812      	ldr	r2, [r2, #0]
 8002e34:	2101      	movs	r1, #1
 8002e36:	430a      	orrs	r2, r1
 8002e38:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	0018      	movs	r0, r3
 8002e3e:	f000 fe45 	bl	8003acc <UART_CheckIdleState>
 8002e42:	0003      	movs	r3, r0
}
 8002e44:	0018      	movs	r0, r3
 8002e46:	46bd      	mov	sp, r7
 8002e48:	b002      	add	sp, #8
 8002e4a:	bd80      	pop	{r7, pc}
 8002e4c:	ffffb7ff 	.word	0xffffb7ff

08002e50 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b084      	sub	sp, #16
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	60f8      	str	r0, [r7, #12]
 8002e58:	60b9      	str	r1, [r7, #8]
 8002e5a:	1dbb      	adds	r3, r7, #6
 8002e5c:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e62:	2b20      	cmp	r3, #32
 8002e64:	d159      	bne.n	8002f1a <HAL_UART_Transmit_IT+0xca>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d003      	beq.n	8002e74 <HAL_UART_Transmit_IT+0x24>
 8002e6c:	1dbb      	adds	r3, r7, #6
 8002e6e:	881b      	ldrh	r3, [r3, #0]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d101      	bne.n	8002e78 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	e051      	b.n	8002f1c <HAL_UART_Transmit_IT+0xcc>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	689a      	ldr	r2, [r3, #8]
 8002e7c:	2380      	movs	r3, #128	; 0x80
 8002e7e:	015b      	lsls	r3, r3, #5
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d109      	bne.n	8002e98 <HAL_UART_Transmit_IT+0x48>
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	691b      	ldr	r3, [r3, #16]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d105      	bne.n	8002e98 <HAL_UART_Transmit_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	2201      	movs	r2, #1
 8002e90:	4013      	ands	r3, r2
 8002e92:	d001      	beq.n	8002e98 <HAL_UART_Transmit_IT+0x48>
      {
        return  HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	e041      	b.n	8002f1c <HAL_UART_Transmit_IT+0xcc>
      }
    }

    __HAL_LOCK(huart);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2274      	movs	r2, #116	; 0x74
 8002e9c:	5c9b      	ldrb	r3, [r3, r2]
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d101      	bne.n	8002ea6 <HAL_UART_Transmit_IT+0x56>
 8002ea2:	2302      	movs	r3, #2
 8002ea4:	e03a      	b.n	8002f1c <HAL_UART_Transmit_IT+0xcc>
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2274      	movs	r2, #116	; 0x74
 8002eaa:	2101      	movs	r1, #1
 8002eac:	5499      	strb	r1, [r3, r2]

    huart->pTxBuffPtr  = pData;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	68ba      	ldr	r2, [r7, #8]
 8002eb2:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	1dba      	adds	r2, r7, #6
 8002eb8:	2150      	movs	r1, #80	; 0x50
 8002eba:	8812      	ldrh	r2, [r2, #0]
 8002ebc:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	1dba      	adds	r2, r7, #6
 8002ec2:	2152      	movs	r1, #82	; 0x52
 8002ec4:	8812      	ldrh	r2, [r2, #0]
 8002ec6:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2280      	movs	r2, #128	; 0x80
 8002ed2:	2100      	movs	r1, #0
 8002ed4:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2221      	movs	r2, #33	; 0x21
 8002eda:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	689a      	ldr	r2, [r3, #8]
 8002ee0:	2380      	movs	r3, #128	; 0x80
 8002ee2:	015b      	lsls	r3, r3, #5
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d107      	bne.n	8002ef8 <HAL_UART_Transmit_IT+0xa8>
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	691b      	ldr	r3, [r3, #16]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d103      	bne.n	8002ef8 <HAL_UART_Transmit_IT+0xa8>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	4a0c      	ldr	r2, [pc, #48]	; (8002f24 <HAL_UART_Transmit_IT+0xd4>)
 8002ef4:	669a      	str	r2, [r3, #104]	; 0x68
 8002ef6:	e002      	b.n	8002efe <HAL_UART_Transmit_IT+0xae>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	4a0b      	ldr	r2, [pc, #44]	; (8002f28 <HAL_UART_Transmit_IT+0xd8>)
 8002efc:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2274      	movs	r2, #116	; 0x74
 8002f02:	2100      	movs	r1, #0
 8002f04:	5499      	strb	r1, [r3, r2]

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	68fa      	ldr	r2, [r7, #12]
 8002f0c:	6812      	ldr	r2, [r2, #0]
 8002f0e:	6812      	ldr	r2, [r2, #0]
 8002f10:	2180      	movs	r1, #128	; 0x80
 8002f12:	430a      	orrs	r2, r1
 8002f14:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8002f16:	2300      	movs	r3, #0
 8002f18:	e000      	b.n	8002f1c <HAL_UART_Transmit_IT+0xcc>
  }
  else
  {
    return HAL_BUSY;
 8002f1a:	2302      	movs	r3, #2
  }
}
 8002f1c:	0018      	movs	r0, r3
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	b004      	add	sp, #16
 8002f22:	bd80      	pop	{r7, pc}
 8002f24:	08003e75 	.word	0x08003e75
 8002f28:	08003e07 	.word	0x08003e07

08002f2c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b084      	sub	sp, #16
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	60f8      	str	r0, [r7, #12]
 8002f34:	60b9      	str	r1, [r7, #8]
 8002f36:	1dbb      	adds	r3, r7, #6
 8002f38:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f3e:	2b20      	cmp	r3, #32
 8002f40:	d144      	bne.n	8002fcc <HAL_UART_Receive_IT+0xa0>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d003      	beq.n	8002f50 <HAL_UART_Receive_IT+0x24>
 8002f48:	1dbb      	adds	r3, r7, #6
 8002f4a:	881b      	ldrh	r3, [r3, #0]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d101      	bne.n	8002f54 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	e03c      	b.n	8002fce <HAL_UART_Receive_IT+0xa2>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	689a      	ldr	r2, [r3, #8]
 8002f58:	2380      	movs	r3, #128	; 0x80
 8002f5a:	015b      	lsls	r3, r3, #5
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	d109      	bne.n	8002f74 <HAL_UART_Receive_IT+0x48>
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	691b      	ldr	r3, [r3, #16]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d105      	bne.n	8002f74 <HAL_UART_Receive_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	d001      	beq.n	8002f74 <HAL_UART_Receive_IT+0x48>
      {
        return  HAL_ERROR;
 8002f70:	2301      	movs	r3, #1
 8002f72:	e02c      	b.n	8002fce <HAL_UART_Receive_IT+0xa2>
      }
    }

    __HAL_LOCK(huart);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2274      	movs	r2, #116	; 0x74
 8002f78:	5c9b      	ldrb	r3, [r3, r2]
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	d101      	bne.n	8002f82 <HAL_UART_Receive_IT+0x56>
 8002f7e:	2302      	movs	r3, #2
 8002f80:	e025      	b.n	8002fce <HAL_UART_Receive_IT+0xa2>
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2274      	movs	r2, #116	; 0x74
 8002f86:	2101      	movs	r1, #1
 8002f88:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a10      	ldr	r2, [pc, #64]	; (8002fd8 <HAL_UART_Receive_IT+0xac>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d00f      	beq.n	8002fba <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	685a      	ldr	r2, [r3, #4]
 8002fa0:	2380      	movs	r3, #128	; 0x80
 8002fa2:	041b      	lsls	r3, r3, #16
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	d008      	beq.n	8002fba <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	68fa      	ldr	r2, [r7, #12]
 8002fae:	6812      	ldr	r2, [r2, #0]
 8002fb0:	6812      	ldr	r2, [r2, #0]
 8002fb2:	2180      	movs	r1, #128	; 0x80
 8002fb4:	04c9      	lsls	r1, r1, #19
 8002fb6:	430a      	orrs	r2, r1
 8002fb8:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 8002fba:	1dbb      	adds	r3, r7, #6
 8002fbc:	881a      	ldrh	r2, [r3, #0]
 8002fbe:	68b9      	ldr	r1, [r7, #8]
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	0018      	movs	r0, r3
 8002fc4:	f000 fe4a 	bl	8003c5c <UART_Start_Receive_IT>
 8002fc8:	0003      	movs	r3, r0
 8002fca:	e000      	b.n	8002fce <HAL_UART_Receive_IT+0xa2>
  }
  else
  {
    return HAL_BUSY;
 8002fcc:	2302      	movs	r3, #2
  }
}
 8002fce:	0018      	movs	r0, r3
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	b004      	add	sp, #16
 8002fd4:	bd80      	pop	{r7, pc}
 8002fd6:	46c0      	nop			; (mov r8, r8)
 8002fd8:	40004800 	.word	0x40004800

08002fdc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b088      	sub	sp, #32
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	69db      	ldr	r3, [r3, #28]
 8002fea:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002ffc:	69fb      	ldr	r3, [r7, #28]
 8002ffe:	4ab7      	ldr	r2, [pc, #732]	; (80032dc <HAL_UART_IRQHandler+0x300>)
 8003000:	4013      	ands	r3, r2
 8003002:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d112      	bne.n	8003030 <HAL_UART_IRQHandler+0x54>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800300a:	69fb      	ldr	r3, [r7, #28]
 800300c:	2220      	movs	r2, #32
 800300e:	4013      	ands	r3, r2
 8003010:	d00e      	beq.n	8003030 <HAL_UART_IRQHandler+0x54>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003012:	69bb      	ldr	r3, [r7, #24]
 8003014:	2220      	movs	r2, #32
 8003016:	4013      	ands	r3, r2
 8003018:	d00a      	beq.n	8003030 <HAL_UART_IRQHandler+0x54>
    {
      if (huart->RxISR != NULL)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800301e:	2b00      	cmp	r3, #0
 8003020:	d100      	bne.n	8003024 <HAL_UART_IRQHandler+0x48>
 8003022:	e1d8      	b.n	80033d6 <HAL_UART_IRQHandler+0x3fa>
      {
        huart->RxISR(huart);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003028:	687a      	ldr	r2, [r7, #4]
 800302a:	0010      	movs	r0, r2
 800302c:	4798      	blx	r3
      }
      return;
 800302e:	e1d2      	b.n	80033d6 <HAL_UART_IRQHandler+0x3fa>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d100      	bne.n	8003038 <HAL_UART_IRQHandler+0x5c>
 8003036:	e0d9      	b.n	80031ec <HAL_UART_IRQHandler+0x210>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	2201      	movs	r2, #1
 800303c:	4013      	ands	r3, r2
 800303e:	d104      	bne.n	800304a <HAL_UART_IRQHandler+0x6e>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003040:	69bb      	ldr	r3, [r7, #24]
 8003042:	4aa7      	ldr	r2, [pc, #668]	; (80032e0 <HAL_UART_IRQHandler+0x304>)
 8003044:	4013      	ands	r3, r2
 8003046:	d100      	bne.n	800304a <HAL_UART_IRQHandler+0x6e>
 8003048:	e0d0      	b.n	80031ec <HAL_UART_IRQHandler+0x210>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800304a:	69fb      	ldr	r3, [r7, #28]
 800304c:	2201      	movs	r2, #1
 800304e:	4013      	ands	r3, r2
 8003050:	d010      	beq.n	8003074 <HAL_UART_IRQHandler+0x98>
 8003052:	69ba      	ldr	r2, [r7, #24]
 8003054:	2380      	movs	r3, #128	; 0x80
 8003056:	005b      	lsls	r3, r3, #1
 8003058:	4013      	ands	r3, r2
 800305a:	d00b      	beq.n	8003074 <HAL_UART_IRQHandler+0x98>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	2201      	movs	r2, #1
 8003062:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2280      	movs	r2, #128	; 0x80
 8003068:	589b      	ldr	r3, [r3, r2]
 800306a:	2201      	movs	r2, #1
 800306c:	431a      	orrs	r2, r3
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2180      	movs	r1, #128	; 0x80
 8003072:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003074:	69fb      	ldr	r3, [r7, #28]
 8003076:	2202      	movs	r2, #2
 8003078:	4013      	ands	r3, r2
 800307a:	d00f      	beq.n	800309c <HAL_UART_IRQHandler+0xc0>
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	2201      	movs	r2, #1
 8003080:	4013      	ands	r3, r2
 8003082:	d00b      	beq.n	800309c <HAL_UART_IRQHandler+0xc0>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	2202      	movs	r2, #2
 800308a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2280      	movs	r2, #128	; 0x80
 8003090:	589b      	ldr	r3, [r3, r2]
 8003092:	2204      	movs	r2, #4
 8003094:	431a      	orrs	r2, r3
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2180      	movs	r1, #128	; 0x80
 800309a:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800309c:	69fb      	ldr	r3, [r7, #28]
 800309e:	2204      	movs	r2, #4
 80030a0:	4013      	ands	r3, r2
 80030a2:	d00f      	beq.n	80030c4 <HAL_UART_IRQHandler+0xe8>
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	2201      	movs	r2, #1
 80030a8:	4013      	ands	r3, r2
 80030aa:	d00b      	beq.n	80030c4 <HAL_UART_IRQHandler+0xe8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	2204      	movs	r2, #4
 80030b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2280      	movs	r2, #128	; 0x80
 80030b8:	589b      	ldr	r3, [r3, r2]
 80030ba:	2202      	movs	r2, #2
 80030bc:	431a      	orrs	r2, r3
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2180      	movs	r1, #128	; 0x80
 80030c2:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80030c4:	69fb      	ldr	r3, [r7, #28]
 80030c6:	2208      	movs	r2, #8
 80030c8:	4013      	ands	r3, r2
 80030ca:	d013      	beq.n	80030f4 <HAL_UART_IRQHandler+0x118>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80030cc:	69bb      	ldr	r3, [r7, #24]
 80030ce:	2220      	movs	r2, #32
 80030d0:	4013      	ands	r3, r2
 80030d2:	d103      	bne.n	80030dc <HAL_UART_IRQHandler+0x100>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	2201      	movs	r2, #1
 80030d8:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80030da:	d00b      	beq.n	80030f4 <HAL_UART_IRQHandler+0x118>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	2208      	movs	r2, #8
 80030e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2280      	movs	r2, #128	; 0x80
 80030e8:	589b      	ldr	r3, [r3, r2]
 80030ea:	2208      	movs	r2, #8
 80030ec:	431a      	orrs	r2, r3
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2180      	movs	r1, #128	; 0x80
 80030f2:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80030f4:	69fa      	ldr	r2, [r7, #28]
 80030f6:	2380      	movs	r3, #128	; 0x80
 80030f8:	011b      	lsls	r3, r3, #4
 80030fa:	4013      	ands	r3, r2
 80030fc:	d011      	beq.n	8003122 <HAL_UART_IRQHandler+0x146>
 80030fe:	69ba      	ldr	r2, [r7, #24]
 8003100:	2380      	movs	r3, #128	; 0x80
 8003102:	04db      	lsls	r3, r3, #19
 8003104:	4013      	ands	r3, r2
 8003106:	d00c      	beq.n	8003122 <HAL_UART_IRQHandler+0x146>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	2280      	movs	r2, #128	; 0x80
 800310e:	0112      	lsls	r2, r2, #4
 8003110:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2280      	movs	r2, #128	; 0x80
 8003116:	589b      	ldr	r3, [r3, r2]
 8003118:	2220      	movs	r2, #32
 800311a:	431a      	orrs	r2, r3
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2180      	movs	r1, #128	; 0x80
 8003120:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2280      	movs	r2, #128	; 0x80
 8003126:	589b      	ldr	r3, [r3, r2]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d100      	bne.n	800312e <HAL_UART_IRQHandler+0x152>
 800312c:	e155      	b.n	80033da <HAL_UART_IRQHandler+0x3fe>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800312e:	69fb      	ldr	r3, [r7, #28]
 8003130:	2220      	movs	r2, #32
 8003132:	4013      	ands	r3, r2
 8003134:	d00c      	beq.n	8003150 <HAL_UART_IRQHandler+0x174>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003136:	69bb      	ldr	r3, [r7, #24]
 8003138:	2220      	movs	r2, #32
 800313a:	4013      	ands	r3, r2
 800313c:	d008      	beq.n	8003150 <HAL_UART_IRQHandler+0x174>
      {
        if (huart->RxISR != NULL)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003142:	2b00      	cmp	r3, #0
 8003144:	d004      	beq.n	8003150 <HAL_UART_IRQHandler+0x174>
        {
          huart->RxISR(huart);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800314a:	687a      	ldr	r2, [r7, #4]
 800314c:	0010      	movs	r0, r2
 800314e:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2280      	movs	r2, #128	; 0x80
 8003154:	589b      	ldr	r3, [r3, r2]
 8003156:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	2240      	movs	r2, #64	; 0x40
 8003160:	4013      	ands	r3, r2
 8003162:	2b40      	cmp	r3, #64	; 0x40
 8003164:	d003      	beq.n	800316e <HAL_UART_IRQHandler+0x192>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2228      	movs	r2, #40	; 0x28
 800316a:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800316c:	d033      	beq.n	80031d6 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	0018      	movs	r0, r3
 8003172:	f000 fe01 	bl	8003d78 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	2240      	movs	r2, #64	; 0x40
 800317e:	4013      	ands	r3, r2
 8003180:	2b40      	cmp	r3, #64	; 0x40
 8003182:	d123      	bne.n	80031cc <HAL_UART_IRQHandler+0x1f0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	687a      	ldr	r2, [r7, #4]
 800318a:	6812      	ldr	r2, [r2, #0]
 800318c:	6892      	ldr	r2, [r2, #8]
 800318e:	2140      	movs	r1, #64	; 0x40
 8003190:	438a      	bics	r2, r1
 8003192:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003198:	2b00      	cmp	r3, #0
 800319a:	d012      	beq.n	80031c2 <HAL_UART_IRQHandler+0x1e6>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031a0:	4a50      	ldr	r2, [pc, #320]	; (80032e4 <HAL_UART_IRQHandler+0x308>)
 80031a2:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031a8:	0018      	movs	r0, r3
 80031aa:	f7fe fd64 	bl	8001c76 <HAL_DMA_Abort_IT>
 80031ae:	1e03      	subs	r3, r0, #0
 80031b0:	d01a      	beq.n	80031e8 <HAL_UART_IRQHandler+0x20c>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031bc:	0018      	movs	r0, r3
 80031be:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031c0:	e012      	b.n	80031e8 <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	0018      	movs	r0, r3
 80031c6:	f000 f91d 	bl	8003404 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031ca:	e00d      	b.n	80031e8 <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	0018      	movs	r0, r3
 80031d0:	f000 f918 	bl	8003404 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031d4:	e008      	b.n	80031e8 <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	0018      	movs	r0, r3
 80031da:	f000 f913 	bl	8003404 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2280      	movs	r2, #128	; 0x80
 80031e2:	2100      	movs	r1, #0
 80031e4:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80031e6:	e0f8      	b.n	80033da <HAL_UART_IRQHandler+0x3fe>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031e8:	46c0      	nop			; (mov r8, r8)
    return;
 80031ea:	e0f6      	b.n	80033da <HAL_UART_IRQHandler+0x3fe>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d000      	beq.n	80031f6 <HAL_UART_IRQHandler+0x21a>
 80031f4:	e0bb      	b.n	800336e <HAL_UART_IRQHandler+0x392>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 80031f6:	69fb      	ldr	r3, [r7, #28]
 80031f8:	2210      	movs	r2, #16
 80031fa:	4013      	ands	r3, r2
 80031fc:	d100      	bne.n	8003200 <HAL_UART_IRQHandler+0x224>
 80031fe:	e0b6      	b.n	800336e <HAL_UART_IRQHandler+0x392>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8003200:	69bb      	ldr	r3, [r7, #24]
 8003202:	2210      	movs	r2, #16
 8003204:	4013      	ands	r3, r2
 8003206:	d100      	bne.n	800320a <HAL_UART_IRQHandler+0x22e>
 8003208:	e0b1      	b.n	800336e <HAL_UART_IRQHandler+0x392>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	2210      	movs	r2, #16
 8003210:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	2240      	movs	r2, #64	; 0x40
 800321a:	4013      	ands	r3, r2
 800321c:	2b40      	cmp	r3, #64	; 0x40
 800321e:	d165      	bne.n	80032ec <HAL_UART_IRQHandler+0x310>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	685a      	ldr	r2, [r3, #4]
 8003228:	230a      	movs	r3, #10
 800322a:	18fb      	adds	r3, r7, r3
 800322c:	801a      	strh	r2, [r3, #0]
      if (  (nb_remaining_rx_data > 0U)
 800322e:	230a      	movs	r3, #10
 8003230:	18fb      	adds	r3, r7, r3
 8003232:	881b      	ldrh	r3, [r3, #0]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d100      	bne.n	800323a <HAL_UART_IRQHandler+0x25e>
 8003238:	e0d1      	b.n	80033de <HAL_UART_IRQHandler+0x402>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2258      	movs	r2, #88	; 0x58
 800323e:	5a9b      	ldrh	r3, [r3, r2]
 8003240:	220a      	movs	r2, #10
 8003242:	18ba      	adds	r2, r7, r2
 8003244:	8812      	ldrh	r2, [r2, #0]
 8003246:	429a      	cmp	r2, r3
 8003248:	d300      	bcc.n	800324c <HAL_UART_IRQHandler+0x270>
 800324a:	e0c8      	b.n	80033de <HAL_UART_IRQHandler+0x402>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	220a      	movs	r2, #10
 8003250:	18ba      	adds	r2, r7, r2
 8003252:	215a      	movs	r1, #90	; 0x5a
 8003254:	8812      	ldrh	r2, [r2, #0]
 8003256:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	2220      	movs	r2, #32
 8003262:	4013      	ands	r3, r2
 8003264:	d12a      	bne.n	80032bc <HAL_UART_IRQHandler+0x2e0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	687a      	ldr	r2, [r7, #4]
 800326c:	6812      	ldr	r2, [r2, #0]
 800326e:	6812      	ldr	r2, [r2, #0]
 8003270:	491d      	ldr	r1, [pc, #116]	; (80032e8 <HAL_UART_IRQHandler+0x30c>)
 8003272:	400a      	ands	r2, r1
 8003274:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	687a      	ldr	r2, [r7, #4]
 800327c:	6812      	ldr	r2, [r2, #0]
 800327e:	6892      	ldr	r2, [r2, #8]
 8003280:	2101      	movs	r1, #1
 8003282:	438a      	bics	r2, r1
 8003284:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	687a      	ldr	r2, [r7, #4]
 800328c:	6812      	ldr	r2, [r2, #0]
 800328e:	6892      	ldr	r2, [r2, #8]
 8003290:	2140      	movs	r1, #64	; 0x40
 8003292:	438a      	bics	r2, r1
 8003294:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2220      	movs	r2, #32
 800329a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2200      	movs	r2, #0
 80032a0:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	687a      	ldr	r2, [r7, #4]
 80032a8:	6812      	ldr	r2, [r2, #0]
 80032aa:	6812      	ldr	r2, [r2, #0]
 80032ac:	2110      	movs	r1, #16
 80032ae:	438a      	bics	r2, r1
 80032b0:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032b6:	0018      	movs	r0, r3
 80032b8:	f7fe fc9d 	bl	8001bf6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2258      	movs	r2, #88	; 0x58
 80032c0:	5a9a      	ldrh	r2, [r3, r2]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	215a      	movs	r1, #90	; 0x5a
 80032c6:	5a5b      	ldrh	r3, [r3, r1]
 80032c8:	b29b      	uxth	r3, r3
 80032ca:	1ad3      	subs	r3, r2, r3
 80032cc:	b29a      	uxth	r2, r3
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	0011      	movs	r1, r2
 80032d2:	0018      	movs	r0, r3
 80032d4:	f000 f89e 	bl	8003414 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80032d8:	e081      	b.n	80033de <HAL_UART_IRQHandler+0x402>
 80032da:	46c0      	nop			; (mov r8, r8)
 80032dc:	0000080f 	.word	0x0000080f
 80032e0:	04000120 	.word	0x04000120
 80032e4:	08003dd9 	.word	0x08003dd9
 80032e8:	fffffeff 	.word	0xfffffeff
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2258      	movs	r2, #88	; 0x58
 80032f0:	5a99      	ldrh	r1, [r3, r2]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	225a      	movs	r2, #90	; 0x5a
 80032f6:	5a9b      	ldrh	r3, [r3, r2]
 80032f8:	b29a      	uxth	r2, r3
 80032fa:	2308      	movs	r3, #8
 80032fc:	18fb      	adds	r3, r7, r3
 80032fe:	1a8a      	subs	r2, r1, r2
 8003300:	801a      	strh	r2, [r3, #0]
      if (  (huart->RxXferCount > 0U)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	225a      	movs	r2, #90	; 0x5a
 8003306:	5a9b      	ldrh	r3, [r3, r2]
 8003308:	b29b      	uxth	r3, r3
 800330a:	2b00      	cmp	r3, #0
 800330c:	d100      	bne.n	8003310 <HAL_UART_IRQHandler+0x334>
 800330e:	e068      	b.n	80033e2 <HAL_UART_IRQHandler+0x406>
          &&(nb_rx_data > 0U) )
 8003310:	2308      	movs	r3, #8
 8003312:	18fb      	adds	r3, r7, r3
 8003314:	881b      	ldrh	r3, [r3, #0]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d063      	beq.n	80033e2 <HAL_UART_IRQHandler+0x406>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	687a      	ldr	r2, [r7, #4]
 8003320:	6812      	ldr	r2, [r2, #0]
 8003322:	6812      	ldr	r2, [r2, #0]
 8003324:	4932      	ldr	r1, [pc, #200]	; (80033f0 <HAL_UART_IRQHandler+0x414>)
 8003326:	400a      	ands	r2, r1
 8003328:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	687a      	ldr	r2, [r7, #4]
 8003330:	6812      	ldr	r2, [r2, #0]
 8003332:	6892      	ldr	r2, [r2, #8]
 8003334:	2101      	movs	r1, #1
 8003336:	438a      	bics	r2, r1
 8003338:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2220      	movs	r2, #32
 800333e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2200      	movs	r2, #0
 8003344:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2200      	movs	r2, #0
 800334a:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	687a      	ldr	r2, [r7, #4]
 8003352:	6812      	ldr	r2, [r2, #0]
 8003354:	6812      	ldr	r2, [r2, #0]
 8003356:	2110      	movs	r1, #16
 8003358:	438a      	bics	r2, r1
 800335a:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800335c:	2308      	movs	r3, #8
 800335e:	18fb      	adds	r3, r7, r3
 8003360:	881a      	ldrh	r2, [r3, #0]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	0011      	movs	r1, r2
 8003366:	0018      	movs	r0, r3
 8003368:	f000 f854 	bl	8003414 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800336c:	e039      	b.n	80033e2 <HAL_UART_IRQHandler+0x406>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800336e:	69fa      	ldr	r2, [r7, #28]
 8003370:	2380      	movs	r3, #128	; 0x80
 8003372:	035b      	lsls	r3, r3, #13
 8003374:	4013      	ands	r3, r2
 8003376:	d00e      	beq.n	8003396 <HAL_UART_IRQHandler+0x3ba>
 8003378:	697a      	ldr	r2, [r7, #20]
 800337a:	2380      	movs	r3, #128	; 0x80
 800337c:	03db      	lsls	r3, r3, #15
 800337e:	4013      	ands	r3, r2
 8003380:	d009      	beq.n	8003396 <HAL_UART_IRQHandler+0x3ba>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	2280      	movs	r2, #128	; 0x80
 8003388:	0352      	lsls	r2, r2, #13
 800338a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	0018      	movs	r0, r3
 8003390:	f000 feb2 	bl	80040f8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003394:	e028      	b.n	80033e8 <HAL_UART_IRQHandler+0x40c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003396:	69fb      	ldr	r3, [r7, #28]
 8003398:	2280      	movs	r2, #128	; 0x80
 800339a:	4013      	ands	r3, r2
 800339c:	d00d      	beq.n	80033ba <HAL_UART_IRQHandler+0x3de>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800339e:	69bb      	ldr	r3, [r7, #24]
 80033a0:	2280      	movs	r2, #128	; 0x80
 80033a2:	4013      	ands	r3, r2
 80033a4:	d009      	beq.n	80033ba <HAL_UART_IRQHandler+0x3de>
  {
    if (huart->TxISR != NULL)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d01b      	beq.n	80033e6 <HAL_UART_IRQHandler+0x40a>
    {
      huart->TxISR(huart);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80033b2:	687a      	ldr	r2, [r7, #4]
 80033b4:	0010      	movs	r0, r2
 80033b6:	4798      	blx	r3
    }
    return;
 80033b8:	e015      	b.n	80033e6 <HAL_UART_IRQHandler+0x40a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80033ba:	69fb      	ldr	r3, [r7, #28]
 80033bc:	2240      	movs	r2, #64	; 0x40
 80033be:	4013      	ands	r3, r2
 80033c0:	d012      	beq.n	80033e8 <HAL_UART_IRQHandler+0x40c>
 80033c2:	69bb      	ldr	r3, [r7, #24]
 80033c4:	2240      	movs	r2, #64	; 0x40
 80033c6:	4013      	ands	r3, r2
 80033c8:	d00e      	beq.n	80033e8 <HAL_UART_IRQHandler+0x40c>
  {
    UART_EndTransmit_IT(huart);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	0018      	movs	r0, r3
 80033ce:	f000 fd8c 	bl	8003eea <UART_EndTransmit_IT>
    return;
 80033d2:	46c0      	nop			; (mov r8, r8)
 80033d4:	e008      	b.n	80033e8 <HAL_UART_IRQHandler+0x40c>
      return;
 80033d6:	46c0      	nop			; (mov r8, r8)
 80033d8:	e006      	b.n	80033e8 <HAL_UART_IRQHandler+0x40c>
    return;
 80033da:	46c0      	nop			; (mov r8, r8)
 80033dc:	e004      	b.n	80033e8 <HAL_UART_IRQHandler+0x40c>
      return;
 80033de:	46c0      	nop			; (mov r8, r8)
 80033e0:	e002      	b.n	80033e8 <HAL_UART_IRQHandler+0x40c>
      return;
 80033e2:	46c0      	nop			; (mov r8, r8)
 80033e4:	e000      	b.n	80033e8 <HAL_UART_IRQHandler+0x40c>
    return;
 80033e6:	46c0      	nop			; (mov r8, r8)
  }

}
 80033e8:	46bd      	mov	sp, r7
 80033ea:	b008      	add	sp, #32
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	46c0      	nop			; (mov r8, r8)
 80033f0:	fffffedf 	.word	0xfffffedf

080033f4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b082      	sub	sp, #8
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80033fc:	46c0      	nop			; (mov r8, r8)
 80033fe:	46bd      	mov	sp, r7
 8003400:	b002      	add	sp, #8
 8003402:	bd80      	pop	{r7, pc}

08003404 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b082      	sub	sp, #8
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800340c:	46c0      	nop			; (mov r8, r8)
 800340e:	46bd      	mov	sp, r7
 8003410:	b002      	add	sp, #8
 8003412:	bd80      	pop	{r7, pc}

08003414 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b082      	sub	sp, #8
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
 800341c:	000a      	movs	r2, r1
 800341e:	1cbb      	adds	r3, r7, #2
 8003420:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003422:	46c0      	nop			; (mov r8, r8)
 8003424:	46bd      	mov	sp, r7
 8003426:	b002      	add	sp, #8
 8003428:	bd80      	pop	{r7, pc}
	...

0800342c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800342c:	b5b0      	push	{r4, r5, r7, lr}
 800342e:	b08e      	sub	sp, #56	; 0x38
 8003430:	af00      	add	r7, sp, #0
 8003432:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003434:	231a      	movs	r3, #26
 8003436:	2218      	movs	r2, #24
 8003438:	4694      	mov	ip, r2
 800343a:	44bc      	add	ip, r7
 800343c:	4463      	add	r3, ip
 800343e:	2200      	movs	r2, #0
 8003440:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003442:	69fb      	ldr	r3, [r7, #28]
 8003444:	689a      	ldr	r2, [r3, #8]
 8003446:	69fb      	ldr	r3, [r7, #28]
 8003448:	691b      	ldr	r3, [r3, #16]
 800344a:	431a      	orrs	r2, r3
 800344c:	69fb      	ldr	r3, [r7, #28]
 800344e:	695b      	ldr	r3, [r3, #20]
 8003450:	431a      	orrs	r2, r3
 8003452:	69fb      	ldr	r3, [r7, #28]
 8003454:	69db      	ldr	r3, [r3, #28]
 8003456:	4313      	orrs	r3, r2
 8003458:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800345a:	69fb      	ldr	r3, [r7, #28]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	69fa      	ldr	r2, [r7, #28]
 8003460:	6812      	ldr	r2, [r2, #0]
 8003462:	6812      	ldr	r2, [r2, #0]
 8003464:	49ca      	ldr	r1, [pc, #808]	; (8003790 <UART_SetConfig+0x364>)
 8003466:	4011      	ands	r1, r2
 8003468:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800346a:	430a      	orrs	r2, r1
 800346c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800346e:	69fb      	ldr	r3, [r7, #28]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	69fa      	ldr	r2, [r7, #28]
 8003474:	6812      	ldr	r2, [r2, #0]
 8003476:	6852      	ldr	r2, [r2, #4]
 8003478:	49c6      	ldr	r1, [pc, #792]	; (8003794 <UART_SetConfig+0x368>)
 800347a:	4011      	ands	r1, r2
 800347c:	69fa      	ldr	r2, [r7, #28]
 800347e:	68d2      	ldr	r2, [r2, #12]
 8003480:	430a      	orrs	r2, r1
 8003482:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003484:	69fb      	ldr	r3, [r7, #28]
 8003486:	699b      	ldr	r3, [r3, #24]
 8003488:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800348a:	69fb      	ldr	r3, [r7, #28]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4ac2      	ldr	r2, [pc, #776]	; (8003798 <UART_SetConfig+0x36c>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d004      	beq.n	800349e <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003494:	69fb      	ldr	r3, [r7, #28]
 8003496:	6a1b      	ldr	r3, [r3, #32]
 8003498:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800349a:	4313      	orrs	r3, r2
 800349c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800349e:	69fb      	ldr	r3, [r7, #28]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	69fa      	ldr	r2, [r7, #28]
 80034a4:	6812      	ldr	r2, [r2, #0]
 80034a6:	6892      	ldr	r2, [r2, #8]
 80034a8:	49bc      	ldr	r1, [pc, #752]	; (800379c <UART_SetConfig+0x370>)
 80034aa:	4011      	ands	r1, r2
 80034ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80034ae:	430a      	orrs	r2, r1
 80034b0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80034b2:	69fb      	ldr	r3, [r7, #28]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4aba      	ldr	r2, [pc, #744]	; (80037a0 <UART_SetConfig+0x374>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d134      	bne.n	8003526 <UART_SetConfig+0xfa>
 80034bc:	4bb9      	ldr	r3, [pc, #740]	; (80037a4 <UART_SetConfig+0x378>)
 80034be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034c0:	2203      	movs	r2, #3
 80034c2:	4013      	ands	r3, r2
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	d015      	beq.n	80034f4 <UART_SetConfig+0xc8>
 80034c8:	d304      	bcc.n	80034d4 <UART_SetConfig+0xa8>
 80034ca:	2b02      	cmp	r3, #2
 80034cc:	d00a      	beq.n	80034e4 <UART_SetConfig+0xb8>
 80034ce:	2b03      	cmp	r3, #3
 80034d0:	d018      	beq.n	8003504 <UART_SetConfig+0xd8>
 80034d2:	e01f      	b.n	8003514 <UART_SetConfig+0xe8>
 80034d4:	231b      	movs	r3, #27
 80034d6:	2218      	movs	r2, #24
 80034d8:	4694      	mov	ip, r2
 80034da:	44bc      	add	ip, r7
 80034dc:	4463      	add	r3, ip
 80034de:	2201      	movs	r2, #1
 80034e0:	701a      	strb	r2, [r3, #0]
 80034e2:	e0ab      	b.n	800363c <UART_SetConfig+0x210>
 80034e4:	231b      	movs	r3, #27
 80034e6:	2218      	movs	r2, #24
 80034e8:	4694      	mov	ip, r2
 80034ea:	44bc      	add	ip, r7
 80034ec:	4463      	add	r3, ip
 80034ee:	2202      	movs	r2, #2
 80034f0:	701a      	strb	r2, [r3, #0]
 80034f2:	e0a3      	b.n	800363c <UART_SetConfig+0x210>
 80034f4:	231b      	movs	r3, #27
 80034f6:	2218      	movs	r2, #24
 80034f8:	4694      	mov	ip, r2
 80034fa:	44bc      	add	ip, r7
 80034fc:	4463      	add	r3, ip
 80034fe:	2204      	movs	r2, #4
 8003500:	701a      	strb	r2, [r3, #0]
 8003502:	e09b      	b.n	800363c <UART_SetConfig+0x210>
 8003504:	231b      	movs	r3, #27
 8003506:	2218      	movs	r2, #24
 8003508:	4694      	mov	ip, r2
 800350a:	44bc      	add	ip, r7
 800350c:	4463      	add	r3, ip
 800350e:	2208      	movs	r2, #8
 8003510:	701a      	strb	r2, [r3, #0]
 8003512:	e093      	b.n	800363c <UART_SetConfig+0x210>
 8003514:	231b      	movs	r3, #27
 8003516:	2218      	movs	r2, #24
 8003518:	4694      	mov	ip, r2
 800351a:	44bc      	add	ip, r7
 800351c:	4463      	add	r3, ip
 800351e:	2210      	movs	r2, #16
 8003520:	701a      	strb	r2, [r3, #0]
 8003522:	46c0      	nop			; (mov r8, r8)
 8003524:	e08a      	b.n	800363c <UART_SetConfig+0x210>
 8003526:	69fb      	ldr	r3, [r7, #28]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a9f      	ldr	r2, [pc, #636]	; (80037a8 <UART_SetConfig+0x37c>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d137      	bne.n	80035a0 <UART_SetConfig+0x174>
 8003530:	4b9c      	ldr	r3, [pc, #624]	; (80037a4 <UART_SetConfig+0x378>)
 8003532:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003534:	220c      	movs	r2, #12
 8003536:	4013      	ands	r3, r2
 8003538:	2b04      	cmp	r3, #4
 800353a:	d018      	beq.n	800356e <UART_SetConfig+0x142>
 800353c:	d802      	bhi.n	8003544 <UART_SetConfig+0x118>
 800353e:	2b00      	cmp	r3, #0
 8003540:	d005      	beq.n	800354e <UART_SetConfig+0x122>
 8003542:	e024      	b.n	800358e <UART_SetConfig+0x162>
 8003544:	2b08      	cmp	r3, #8
 8003546:	d00a      	beq.n	800355e <UART_SetConfig+0x132>
 8003548:	2b0c      	cmp	r3, #12
 800354a:	d018      	beq.n	800357e <UART_SetConfig+0x152>
 800354c:	e01f      	b.n	800358e <UART_SetConfig+0x162>
 800354e:	231b      	movs	r3, #27
 8003550:	2218      	movs	r2, #24
 8003552:	4694      	mov	ip, r2
 8003554:	44bc      	add	ip, r7
 8003556:	4463      	add	r3, ip
 8003558:	2200      	movs	r2, #0
 800355a:	701a      	strb	r2, [r3, #0]
 800355c:	e06e      	b.n	800363c <UART_SetConfig+0x210>
 800355e:	231b      	movs	r3, #27
 8003560:	2218      	movs	r2, #24
 8003562:	4694      	mov	ip, r2
 8003564:	44bc      	add	ip, r7
 8003566:	4463      	add	r3, ip
 8003568:	2202      	movs	r2, #2
 800356a:	701a      	strb	r2, [r3, #0]
 800356c:	e066      	b.n	800363c <UART_SetConfig+0x210>
 800356e:	231b      	movs	r3, #27
 8003570:	2218      	movs	r2, #24
 8003572:	4694      	mov	ip, r2
 8003574:	44bc      	add	ip, r7
 8003576:	4463      	add	r3, ip
 8003578:	2204      	movs	r2, #4
 800357a:	701a      	strb	r2, [r3, #0]
 800357c:	e05e      	b.n	800363c <UART_SetConfig+0x210>
 800357e:	231b      	movs	r3, #27
 8003580:	2218      	movs	r2, #24
 8003582:	4694      	mov	ip, r2
 8003584:	44bc      	add	ip, r7
 8003586:	4463      	add	r3, ip
 8003588:	2208      	movs	r2, #8
 800358a:	701a      	strb	r2, [r3, #0]
 800358c:	e056      	b.n	800363c <UART_SetConfig+0x210>
 800358e:	231b      	movs	r3, #27
 8003590:	2218      	movs	r2, #24
 8003592:	4694      	mov	ip, r2
 8003594:	44bc      	add	ip, r7
 8003596:	4463      	add	r3, ip
 8003598:	2210      	movs	r2, #16
 800359a:	701a      	strb	r2, [r3, #0]
 800359c:	46c0      	nop			; (mov r8, r8)
 800359e:	e04d      	b.n	800363c <UART_SetConfig+0x210>
 80035a0:	69fb      	ldr	r3, [r7, #28]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a7c      	ldr	r2, [pc, #496]	; (8003798 <UART_SetConfig+0x36c>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d141      	bne.n	800362e <UART_SetConfig+0x202>
 80035aa:	4b7e      	ldr	r3, [pc, #504]	; (80037a4 <UART_SetConfig+0x378>)
 80035ac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80035ae:	23c0      	movs	r3, #192	; 0xc0
 80035b0:	011b      	lsls	r3, r3, #4
 80035b2:	4013      	ands	r3, r2
 80035b4:	2280      	movs	r2, #128	; 0x80
 80035b6:	00d2      	lsls	r2, r2, #3
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d01f      	beq.n	80035fc <UART_SetConfig+0x1d0>
 80035bc:	2280      	movs	r2, #128	; 0x80
 80035be:	00d2      	lsls	r2, r2, #3
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d802      	bhi.n	80035ca <UART_SetConfig+0x19e>
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d009      	beq.n	80035dc <UART_SetConfig+0x1b0>
 80035c8:	e028      	b.n	800361c <UART_SetConfig+0x1f0>
 80035ca:	2280      	movs	r2, #128	; 0x80
 80035cc:	0112      	lsls	r2, r2, #4
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d00c      	beq.n	80035ec <UART_SetConfig+0x1c0>
 80035d2:	22c0      	movs	r2, #192	; 0xc0
 80035d4:	0112      	lsls	r2, r2, #4
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d018      	beq.n	800360c <UART_SetConfig+0x1e0>
 80035da:	e01f      	b.n	800361c <UART_SetConfig+0x1f0>
 80035dc:	231b      	movs	r3, #27
 80035de:	2218      	movs	r2, #24
 80035e0:	4694      	mov	ip, r2
 80035e2:	44bc      	add	ip, r7
 80035e4:	4463      	add	r3, ip
 80035e6:	2200      	movs	r2, #0
 80035e8:	701a      	strb	r2, [r3, #0]
 80035ea:	e027      	b.n	800363c <UART_SetConfig+0x210>
 80035ec:	231b      	movs	r3, #27
 80035ee:	2218      	movs	r2, #24
 80035f0:	4694      	mov	ip, r2
 80035f2:	44bc      	add	ip, r7
 80035f4:	4463      	add	r3, ip
 80035f6:	2202      	movs	r2, #2
 80035f8:	701a      	strb	r2, [r3, #0]
 80035fa:	e01f      	b.n	800363c <UART_SetConfig+0x210>
 80035fc:	231b      	movs	r3, #27
 80035fe:	2218      	movs	r2, #24
 8003600:	4694      	mov	ip, r2
 8003602:	44bc      	add	ip, r7
 8003604:	4463      	add	r3, ip
 8003606:	2204      	movs	r2, #4
 8003608:	701a      	strb	r2, [r3, #0]
 800360a:	e017      	b.n	800363c <UART_SetConfig+0x210>
 800360c:	231b      	movs	r3, #27
 800360e:	2218      	movs	r2, #24
 8003610:	4694      	mov	ip, r2
 8003612:	44bc      	add	ip, r7
 8003614:	4463      	add	r3, ip
 8003616:	2208      	movs	r2, #8
 8003618:	701a      	strb	r2, [r3, #0]
 800361a:	e00f      	b.n	800363c <UART_SetConfig+0x210>
 800361c:	231b      	movs	r3, #27
 800361e:	2218      	movs	r2, #24
 8003620:	4694      	mov	ip, r2
 8003622:	44bc      	add	ip, r7
 8003624:	4463      	add	r3, ip
 8003626:	2210      	movs	r2, #16
 8003628:	701a      	strb	r2, [r3, #0]
 800362a:	46c0      	nop			; (mov r8, r8)
 800362c:	e006      	b.n	800363c <UART_SetConfig+0x210>
 800362e:	231b      	movs	r3, #27
 8003630:	2218      	movs	r2, #24
 8003632:	4694      	mov	ip, r2
 8003634:	44bc      	add	ip, r7
 8003636:	4463      	add	r3, ip
 8003638:	2210      	movs	r2, #16
 800363a:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800363c:	69fb      	ldr	r3, [r7, #28]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a55      	ldr	r2, [pc, #340]	; (8003798 <UART_SetConfig+0x36c>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d000      	beq.n	8003648 <UART_SetConfig+0x21c>
 8003646:	e085      	b.n	8003754 <UART_SetConfig+0x328>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003648:	231b      	movs	r3, #27
 800364a:	2218      	movs	r2, #24
 800364c:	4694      	mov	ip, r2
 800364e:	44bc      	add	ip, r7
 8003650:	4463      	add	r3, ip
 8003652:	781b      	ldrb	r3, [r3, #0]
 8003654:	2b02      	cmp	r3, #2
 8003656:	d00d      	beq.n	8003674 <UART_SetConfig+0x248>
 8003658:	dc02      	bgt.n	8003660 <UART_SetConfig+0x234>
 800365a:	2b00      	cmp	r3, #0
 800365c:	d005      	beq.n	800366a <UART_SetConfig+0x23e>
 800365e:	e01d      	b.n	800369c <UART_SetConfig+0x270>
 8003660:	2b04      	cmp	r3, #4
 8003662:	d012      	beq.n	800368a <UART_SetConfig+0x25e>
 8003664:	2b08      	cmp	r3, #8
 8003666:	d015      	beq.n	8003694 <UART_SetConfig+0x268>
 8003668:	e018      	b.n	800369c <UART_SetConfig+0x270>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800366a:	f7ff fa3f 	bl	8002aec <HAL_RCC_GetPCLK1Freq>
 800366e:	0003      	movs	r3, r0
 8003670:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003672:	e01d      	b.n	80036b0 <UART_SetConfig+0x284>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003674:	4b4b      	ldr	r3, [pc, #300]	; (80037a4 <UART_SetConfig+0x378>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	2210      	movs	r2, #16
 800367a:	4013      	ands	r3, r2
 800367c:	d002      	beq.n	8003684 <UART_SetConfig+0x258>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800367e:	4b4b      	ldr	r3, [pc, #300]	; (80037ac <UART_SetConfig+0x380>)
 8003680:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003682:	e015      	b.n	80036b0 <UART_SetConfig+0x284>
          pclk = (uint32_t) HSI_VALUE;
 8003684:	4b4a      	ldr	r3, [pc, #296]	; (80037b0 <UART_SetConfig+0x384>)
 8003686:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003688:	e012      	b.n	80036b0 <UART_SetConfig+0x284>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800368a:	f7ff f983 	bl	8002994 <HAL_RCC_GetSysClockFreq>
 800368e:	0003      	movs	r3, r0
 8003690:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003692:	e00d      	b.n	80036b0 <UART_SetConfig+0x284>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003694:	2380      	movs	r3, #128	; 0x80
 8003696:	021b      	lsls	r3, r3, #8
 8003698:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800369a:	e009      	b.n	80036b0 <UART_SetConfig+0x284>
      default:
        pclk = 0U;
 800369c:	2300      	movs	r3, #0
 800369e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80036a0:	231a      	movs	r3, #26
 80036a2:	2218      	movs	r2, #24
 80036a4:	4694      	mov	ip, r2
 80036a6:	44bc      	add	ip, r7
 80036a8:	4463      	add	r3, ip
 80036aa:	2201      	movs	r2, #1
 80036ac:	701a      	strb	r2, [r3, #0]
        break;
 80036ae:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80036b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d100      	bne.n	80036b8 <UART_SetConfig+0x28c>
 80036b6:	e143      	b.n	8003940 <UART_SetConfig+0x514>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80036b8:	69fb      	ldr	r3, [r7, #28]
 80036ba:	685a      	ldr	r2, [r3, #4]
 80036bc:	0013      	movs	r3, r2
 80036be:	005b      	lsls	r3, r3, #1
 80036c0:	189a      	adds	r2, r3, r2
 80036c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d805      	bhi.n	80036d4 <UART_SetConfig+0x2a8>
          (pclk > (4096U * huart->Init.BaudRate)))
 80036c8:	69fb      	ldr	r3, [r7, #28]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	031a      	lsls	r2, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80036ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d207      	bcs.n	80036e4 <UART_SetConfig+0x2b8>
      {
        ret = HAL_ERROR;
 80036d4:	231a      	movs	r3, #26
 80036d6:	2218      	movs	r2, #24
 80036d8:	4694      	mov	ip, r2
 80036da:	44bc      	add	ip, r7
 80036dc:	4463      	add	r3, ip
 80036de:	2201      	movs	r2, #1
 80036e0:	701a      	strb	r2, [r3, #0]
 80036e2:	e12d      	b.n	8003940 <UART_SetConfig+0x514>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80036e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036e6:	613b      	str	r3, [r7, #16]
 80036e8:	2300      	movs	r3, #0
 80036ea:	617b      	str	r3, [r7, #20]
 80036ec:	6939      	ldr	r1, [r7, #16]
 80036ee:	697a      	ldr	r2, [r7, #20]
 80036f0:	000b      	movs	r3, r1
 80036f2:	0e1b      	lsrs	r3, r3, #24
 80036f4:	0010      	movs	r0, r2
 80036f6:	0205      	lsls	r5, r0, #8
 80036f8:	431d      	orrs	r5, r3
 80036fa:	000b      	movs	r3, r1
 80036fc:	021c      	lsls	r4, r3, #8
 80036fe:	69fb      	ldr	r3, [r7, #28]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	085b      	lsrs	r3, r3, #1
 8003704:	60bb      	str	r3, [r7, #8]
 8003706:	2300      	movs	r3, #0
 8003708:	60fb      	str	r3, [r7, #12]
 800370a:	68b8      	ldr	r0, [r7, #8]
 800370c:	68f9      	ldr	r1, [r7, #12]
 800370e:	1900      	adds	r0, r0, r4
 8003710:	4169      	adcs	r1, r5
 8003712:	69fb      	ldr	r3, [r7, #28]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	603b      	str	r3, [r7, #0]
 8003718:	2300      	movs	r3, #0
 800371a:	607b      	str	r3, [r7, #4]
 800371c:	683a      	ldr	r2, [r7, #0]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	f7fc fd7e 	bl	8000220 <__aeabi_uldivmod>
 8003724:	0003      	movs	r3, r0
 8003726:	000c      	movs	r4, r1
 8003728:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800372a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800372c:	4a21      	ldr	r2, [pc, #132]	; (80037b4 <UART_SetConfig+0x388>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d908      	bls.n	8003744 <UART_SetConfig+0x318>
 8003732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003734:	4a20      	ldr	r2, [pc, #128]	; (80037b8 <UART_SetConfig+0x38c>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d804      	bhi.n	8003744 <UART_SetConfig+0x318>
        {
          huart->Instance->BRR = usartdiv;
 800373a:	69fb      	ldr	r3, [r7, #28]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003740:	60da      	str	r2, [r3, #12]
 8003742:	e0fd      	b.n	8003940 <UART_SetConfig+0x514>
        }
        else
        {
          ret = HAL_ERROR;
 8003744:	231a      	movs	r3, #26
 8003746:	2218      	movs	r2, #24
 8003748:	4694      	mov	ip, r2
 800374a:	44bc      	add	ip, r7
 800374c:	4463      	add	r3, ip
 800374e:	2201      	movs	r2, #1
 8003750:	701a      	strb	r2, [r3, #0]
 8003752:	e0f5      	b.n	8003940 <UART_SetConfig+0x514>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003754:	69fb      	ldr	r3, [r7, #28]
 8003756:	69da      	ldr	r2, [r3, #28]
 8003758:	2380      	movs	r3, #128	; 0x80
 800375a:	021b      	lsls	r3, r3, #8
 800375c:	429a      	cmp	r2, r3
 800375e:	d000      	beq.n	8003762 <UART_SetConfig+0x336>
 8003760:	e095      	b.n	800388e <UART_SetConfig+0x462>
  {
    switch (clocksource)
 8003762:	231b      	movs	r3, #27
 8003764:	2218      	movs	r2, #24
 8003766:	4694      	mov	ip, r2
 8003768:	44bc      	add	ip, r7
 800376a:	4463      	add	r3, ip
 800376c:	781b      	ldrb	r3, [r3, #0]
 800376e:	2b08      	cmp	r3, #8
 8003770:	d83a      	bhi.n	80037e8 <UART_SetConfig+0x3bc>
 8003772:	009a      	lsls	r2, r3, #2
 8003774:	4b11      	ldr	r3, [pc, #68]	; (80037bc <UART_SetConfig+0x390>)
 8003776:	18d3      	adds	r3, r2, r3
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800377c:	f7ff f9b6 	bl	8002aec <HAL_RCC_GetPCLK1Freq>
 8003780:	0003      	movs	r3, r0
 8003782:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003784:	e03a      	b.n	80037fc <UART_SetConfig+0x3d0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003786:	f7ff f9c7 	bl	8002b18 <HAL_RCC_GetPCLK2Freq>
 800378a:	0003      	movs	r3, r0
 800378c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800378e:	e035      	b.n	80037fc <UART_SetConfig+0x3d0>
 8003790:	efff69f3 	.word	0xefff69f3
 8003794:	ffffcfff 	.word	0xffffcfff
 8003798:	40004800 	.word	0x40004800
 800379c:	fffff4ff 	.word	0xfffff4ff
 80037a0:	40013800 	.word	0x40013800
 80037a4:	40021000 	.word	0x40021000
 80037a8:	40004400 	.word	0x40004400
 80037ac:	003d0900 	.word	0x003d0900
 80037b0:	00f42400 	.word	0x00f42400
 80037b4:	000002ff 	.word	0x000002ff
 80037b8:	000fffff 	.word	0x000fffff
 80037bc:	080041c0 	.word	0x080041c0
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80037c0:	4b67      	ldr	r3, [pc, #412]	; (8003960 <UART_SetConfig+0x534>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	2210      	movs	r2, #16
 80037c6:	4013      	ands	r3, r2
 80037c8:	d002      	beq.n	80037d0 <UART_SetConfig+0x3a4>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80037ca:	4b66      	ldr	r3, [pc, #408]	; (8003964 <UART_SetConfig+0x538>)
 80037cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80037ce:	e015      	b.n	80037fc <UART_SetConfig+0x3d0>
          pclk = (uint32_t) HSI_VALUE;
 80037d0:	4b65      	ldr	r3, [pc, #404]	; (8003968 <UART_SetConfig+0x53c>)
 80037d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80037d4:	e012      	b.n	80037fc <UART_SetConfig+0x3d0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80037d6:	f7ff f8dd 	bl	8002994 <HAL_RCC_GetSysClockFreq>
 80037da:	0003      	movs	r3, r0
 80037dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80037de:	e00d      	b.n	80037fc <UART_SetConfig+0x3d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80037e0:	2380      	movs	r3, #128	; 0x80
 80037e2:	021b      	lsls	r3, r3, #8
 80037e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80037e6:	e009      	b.n	80037fc <UART_SetConfig+0x3d0>
      default:
        pclk = 0U;
 80037e8:	2300      	movs	r3, #0
 80037ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80037ec:	231a      	movs	r3, #26
 80037ee:	2218      	movs	r2, #24
 80037f0:	4694      	mov	ip, r2
 80037f2:	44bc      	add	ip, r7
 80037f4:	4463      	add	r3, ip
 80037f6:	2201      	movs	r2, #1
 80037f8:	701a      	strb	r2, [r3, #0]
        break;
 80037fa:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80037fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d100      	bne.n	8003804 <UART_SetConfig+0x3d8>
 8003802:	e09d      	b.n	8003940 <UART_SetConfig+0x514>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003806:	005a      	lsls	r2, r3, #1
 8003808:	69fb      	ldr	r3, [r7, #28]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	085b      	lsrs	r3, r3, #1
 800380e:	18d2      	adds	r2, r2, r3
 8003810:	69fb      	ldr	r3, [r7, #28]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	0019      	movs	r1, r3
 8003816:	0010      	movs	r0, r2
 8003818:	f7fc fc76 	bl	8000108 <__udivsi3>
 800381c:	0003      	movs	r3, r0
 800381e:	b29b      	uxth	r3, r3
 8003820:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003824:	2b0f      	cmp	r3, #15
 8003826:	d92a      	bls.n	800387e <UART_SetConfig+0x452>
 8003828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800382a:	4a50      	ldr	r2, [pc, #320]	; (800396c <UART_SetConfig+0x540>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d826      	bhi.n	800387e <UART_SetConfig+0x452>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003832:	b29a      	uxth	r2, r3
 8003834:	230e      	movs	r3, #14
 8003836:	2118      	movs	r1, #24
 8003838:	468c      	mov	ip, r1
 800383a:	44bc      	add	ip, r7
 800383c:	4463      	add	r3, ip
 800383e:	210f      	movs	r1, #15
 8003840:	438a      	bics	r2, r1
 8003842:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003846:	085b      	lsrs	r3, r3, #1
 8003848:	b29b      	uxth	r3, r3
 800384a:	2207      	movs	r2, #7
 800384c:	4013      	ands	r3, r2
 800384e:	b299      	uxth	r1, r3
 8003850:	230e      	movs	r3, #14
 8003852:	2218      	movs	r2, #24
 8003854:	4694      	mov	ip, r2
 8003856:	44bc      	add	ip, r7
 8003858:	4463      	add	r3, ip
 800385a:	220e      	movs	r2, #14
 800385c:	2018      	movs	r0, #24
 800385e:	4684      	mov	ip, r0
 8003860:	44bc      	add	ip, r7
 8003862:	4462      	add	r2, ip
 8003864:	8812      	ldrh	r2, [r2, #0]
 8003866:	430a      	orrs	r2, r1
 8003868:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800386a:	69fb      	ldr	r3, [r7, #28]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	220e      	movs	r2, #14
 8003870:	2118      	movs	r1, #24
 8003872:	468c      	mov	ip, r1
 8003874:	44bc      	add	ip, r7
 8003876:	4462      	add	r2, ip
 8003878:	8812      	ldrh	r2, [r2, #0]
 800387a:	60da      	str	r2, [r3, #12]
 800387c:	e060      	b.n	8003940 <UART_SetConfig+0x514>
      }
      else
      {
        ret = HAL_ERROR;
 800387e:	231a      	movs	r3, #26
 8003880:	2218      	movs	r2, #24
 8003882:	4694      	mov	ip, r2
 8003884:	44bc      	add	ip, r7
 8003886:	4463      	add	r3, ip
 8003888:	2201      	movs	r2, #1
 800388a:	701a      	strb	r2, [r3, #0]
 800388c:	e058      	b.n	8003940 <UART_SetConfig+0x514>
      }
    }
  }
  else
  {
    switch (clocksource)
 800388e:	231b      	movs	r3, #27
 8003890:	2218      	movs	r2, #24
 8003892:	4694      	mov	ip, r2
 8003894:	44bc      	add	ip, r7
 8003896:	4463      	add	r3, ip
 8003898:	781b      	ldrb	r3, [r3, #0]
 800389a:	2b08      	cmp	r3, #8
 800389c:	d822      	bhi.n	80038e4 <UART_SetConfig+0x4b8>
 800389e:	009a      	lsls	r2, r3, #2
 80038a0:	4b33      	ldr	r3, [pc, #204]	; (8003970 <UART_SetConfig+0x544>)
 80038a2:	18d3      	adds	r3, r2, r3
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038a8:	f7ff f920 	bl	8002aec <HAL_RCC_GetPCLK1Freq>
 80038ac:	0003      	movs	r3, r0
 80038ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80038b0:	e022      	b.n	80038f8 <UART_SetConfig+0x4cc>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80038b2:	f7ff f931 	bl	8002b18 <HAL_RCC_GetPCLK2Freq>
 80038b6:	0003      	movs	r3, r0
 80038b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80038ba:	e01d      	b.n	80038f8 <UART_SetConfig+0x4cc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80038bc:	4b28      	ldr	r3, [pc, #160]	; (8003960 <UART_SetConfig+0x534>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	2210      	movs	r2, #16
 80038c2:	4013      	ands	r3, r2
 80038c4:	d002      	beq.n	80038cc <UART_SetConfig+0x4a0>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80038c6:	4b27      	ldr	r3, [pc, #156]	; (8003964 <UART_SetConfig+0x538>)
 80038c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80038ca:	e015      	b.n	80038f8 <UART_SetConfig+0x4cc>
          pclk = (uint32_t) HSI_VALUE;
 80038cc:	4b26      	ldr	r3, [pc, #152]	; (8003968 <UART_SetConfig+0x53c>)
 80038ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80038d0:	e012      	b.n	80038f8 <UART_SetConfig+0x4cc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038d2:	f7ff f85f 	bl	8002994 <HAL_RCC_GetSysClockFreq>
 80038d6:	0003      	movs	r3, r0
 80038d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80038da:	e00d      	b.n	80038f8 <UART_SetConfig+0x4cc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80038dc:	2380      	movs	r3, #128	; 0x80
 80038de:	021b      	lsls	r3, r3, #8
 80038e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80038e2:	e009      	b.n	80038f8 <UART_SetConfig+0x4cc>
      default:
        pclk = 0U;
 80038e4:	2300      	movs	r3, #0
 80038e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80038e8:	231a      	movs	r3, #26
 80038ea:	2218      	movs	r2, #24
 80038ec:	4694      	mov	ip, r2
 80038ee:	44bc      	add	ip, r7
 80038f0:	4463      	add	r3, ip
 80038f2:	2201      	movs	r2, #1
 80038f4:	701a      	strb	r2, [r3, #0]
        break;
 80038f6:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80038f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d020      	beq.n	8003940 <UART_SetConfig+0x514>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80038fe:	69fb      	ldr	r3, [r7, #28]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	085a      	lsrs	r2, r3, #1
 8003904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003906:	18d2      	adds	r2, r2, r3
 8003908:	69fb      	ldr	r3, [r7, #28]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	0019      	movs	r1, r3
 800390e:	0010      	movs	r0, r2
 8003910:	f7fc fbfa 	bl	8000108 <__udivsi3>
 8003914:	0003      	movs	r3, r0
 8003916:	b29b      	uxth	r3, r3
 8003918:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800391a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800391c:	2b0f      	cmp	r3, #15
 800391e:	d908      	bls.n	8003932 <UART_SetConfig+0x506>
 8003920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003922:	4a12      	ldr	r2, [pc, #72]	; (800396c <UART_SetConfig+0x540>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d804      	bhi.n	8003932 <UART_SetConfig+0x506>
      {
        huart->Instance->BRR = usartdiv;
 8003928:	69fb      	ldr	r3, [r7, #28]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800392e:	60da      	str	r2, [r3, #12]
 8003930:	e006      	b.n	8003940 <UART_SetConfig+0x514>
      }
      else
      {
        ret = HAL_ERROR;
 8003932:	231a      	movs	r3, #26
 8003934:	2218      	movs	r2, #24
 8003936:	4694      	mov	ip, r2
 8003938:	44bc      	add	ip, r7
 800393a:	4463      	add	r3, ip
 800393c:	2201      	movs	r2, #1
 800393e:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003940:	69fb      	ldr	r3, [r7, #28]
 8003942:	2200      	movs	r2, #0
 8003944:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003946:	69fb      	ldr	r3, [r7, #28]
 8003948:	2200      	movs	r2, #0
 800394a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800394c:	231a      	movs	r3, #26
 800394e:	2218      	movs	r2, #24
 8003950:	4694      	mov	ip, r2
 8003952:	44bc      	add	ip, r7
 8003954:	4463      	add	r3, ip
 8003956:	781b      	ldrb	r3, [r3, #0]
}
 8003958:	0018      	movs	r0, r3
 800395a:	46bd      	mov	sp, r7
 800395c:	b00e      	add	sp, #56	; 0x38
 800395e:	bdb0      	pop	{r4, r5, r7, pc}
 8003960:	40021000 	.word	0x40021000
 8003964:	003d0900 	.word	0x003d0900
 8003968:	00f42400 	.word	0x00f42400
 800396c:	0000ffff 	.word	0x0000ffff
 8003970:	080041e4 	.word	0x080041e4

08003974 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b082      	sub	sp, #8
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003980:	2201      	movs	r2, #1
 8003982:	4013      	ands	r3, r2
 8003984:	d00a      	beq.n	800399c <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	687a      	ldr	r2, [r7, #4]
 800398c:	6812      	ldr	r2, [r2, #0]
 800398e:	6852      	ldr	r2, [r2, #4]
 8003990:	4945      	ldr	r1, [pc, #276]	; (8003aa8 <UART_AdvFeatureConfig+0x134>)
 8003992:	4011      	ands	r1, r2
 8003994:	687a      	ldr	r2, [r7, #4]
 8003996:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003998:	430a      	orrs	r2, r1
 800399a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a0:	2202      	movs	r2, #2
 80039a2:	4013      	ands	r3, r2
 80039a4:	d00a      	beq.n	80039bc <UART_AdvFeatureConfig+0x48>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	687a      	ldr	r2, [r7, #4]
 80039ac:	6812      	ldr	r2, [r2, #0]
 80039ae:	6852      	ldr	r2, [r2, #4]
 80039b0:	493e      	ldr	r1, [pc, #248]	; (8003aac <UART_AdvFeatureConfig+0x138>)
 80039b2:	4011      	ands	r1, r2
 80039b4:	687a      	ldr	r2, [r7, #4]
 80039b6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80039b8:	430a      	orrs	r2, r1
 80039ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c0:	2204      	movs	r2, #4
 80039c2:	4013      	ands	r3, r2
 80039c4:	d00a      	beq.n	80039dc <UART_AdvFeatureConfig+0x68>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	6812      	ldr	r2, [r2, #0]
 80039ce:	6852      	ldr	r2, [r2, #4]
 80039d0:	4937      	ldr	r1, [pc, #220]	; (8003ab0 <UART_AdvFeatureConfig+0x13c>)
 80039d2:	4011      	ands	r1, r2
 80039d4:	687a      	ldr	r2, [r7, #4]
 80039d6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80039d8:	430a      	orrs	r2, r1
 80039da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e0:	2208      	movs	r2, #8
 80039e2:	4013      	ands	r3, r2
 80039e4:	d00a      	beq.n	80039fc <UART_AdvFeatureConfig+0x88>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	687a      	ldr	r2, [r7, #4]
 80039ec:	6812      	ldr	r2, [r2, #0]
 80039ee:	6852      	ldr	r2, [r2, #4]
 80039f0:	4930      	ldr	r1, [pc, #192]	; (8003ab4 <UART_AdvFeatureConfig+0x140>)
 80039f2:	4011      	ands	r1, r2
 80039f4:	687a      	ldr	r2, [r7, #4]
 80039f6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80039f8:	430a      	orrs	r2, r1
 80039fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a00:	2210      	movs	r2, #16
 8003a02:	4013      	ands	r3, r2
 8003a04:	d00a      	beq.n	8003a1c <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	687a      	ldr	r2, [r7, #4]
 8003a0c:	6812      	ldr	r2, [r2, #0]
 8003a0e:	6892      	ldr	r2, [r2, #8]
 8003a10:	4929      	ldr	r1, [pc, #164]	; (8003ab8 <UART_AdvFeatureConfig+0x144>)
 8003a12:	4011      	ands	r1, r2
 8003a14:	687a      	ldr	r2, [r7, #4]
 8003a16:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003a18:	430a      	orrs	r2, r1
 8003a1a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a20:	2220      	movs	r2, #32
 8003a22:	4013      	ands	r3, r2
 8003a24:	d00a      	beq.n	8003a3c <UART_AdvFeatureConfig+0xc8>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	687a      	ldr	r2, [r7, #4]
 8003a2c:	6812      	ldr	r2, [r2, #0]
 8003a2e:	6892      	ldr	r2, [r2, #8]
 8003a30:	4922      	ldr	r1, [pc, #136]	; (8003abc <UART_AdvFeatureConfig+0x148>)
 8003a32:	4011      	ands	r1, r2
 8003a34:	687a      	ldr	r2, [r7, #4]
 8003a36:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003a38:	430a      	orrs	r2, r1
 8003a3a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a40:	2240      	movs	r2, #64	; 0x40
 8003a42:	4013      	ands	r3, r2
 8003a44:	d01b      	beq.n	8003a7e <UART_AdvFeatureConfig+0x10a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	687a      	ldr	r2, [r7, #4]
 8003a4c:	6812      	ldr	r2, [r2, #0]
 8003a4e:	6852      	ldr	r2, [r2, #4]
 8003a50:	491b      	ldr	r1, [pc, #108]	; (8003ac0 <UART_AdvFeatureConfig+0x14c>)
 8003a52:	4011      	ands	r1, r2
 8003a54:	687a      	ldr	r2, [r7, #4]
 8003a56:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003a58:	430a      	orrs	r2, r1
 8003a5a:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a60:	2380      	movs	r3, #128	; 0x80
 8003a62:	035b      	lsls	r3, r3, #13
 8003a64:	429a      	cmp	r2, r3
 8003a66:	d10a      	bne.n	8003a7e <UART_AdvFeatureConfig+0x10a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	687a      	ldr	r2, [r7, #4]
 8003a6e:	6812      	ldr	r2, [r2, #0]
 8003a70:	6852      	ldr	r2, [r2, #4]
 8003a72:	4914      	ldr	r1, [pc, #80]	; (8003ac4 <UART_AdvFeatureConfig+0x150>)
 8003a74:	4011      	ands	r1, r2
 8003a76:	687a      	ldr	r2, [r7, #4]
 8003a78:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003a7a:	430a      	orrs	r2, r1
 8003a7c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a82:	2280      	movs	r2, #128	; 0x80
 8003a84:	4013      	ands	r3, r2
 8003a86:	d00a      	beq.n	8003a9e <UART_AdvFeatureConfig+0x12a>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	687a      	ldr	r2, [r7, #4]
 8003a8e:	6812      	ldr	r2, [r2, #0]
 8003a90:	6852      	ldr	r2, [r2, #4]
 8003a92:	490d      	ldr	r1, [pc, #52]	; (8003ac8 <UART_AdvFeatureConfig+0x154>)
 8003a94:	4011      	ands	r1, r2
 8003a96:	687a      	ldr	r2, [r7, #4]
 8003a98:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003a9a:	430a      	orrs	r2, r1
 8003a9c:	605a      	str	r2, [r3, #4]
  }
}
 8003a9e:	46c0      	nop			; (mov r8, r8)
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	b002      	add	sp, #8
 8003aa4:	bd80      	pop	{r7, pc}
 8003aa6:	46c0      	nop			; (mov r8, r8)
 8003aa8:	fffdffff 	.word	0xfffdffff
 8003aac:	fffeffff 	.word	0xfffeffff
 8003ab0:	fffbffff 	.word	0xfffbffff
 8003ab4:	ffff7fff 	.word	0xffff7fff
 8003ab8:	ffffefff 	.word	0xffffefff
 8003abc:	ffffdfff 	.word	0xffffdfff
 8003ac0:	ffefffff 	.word	0xffefffff
 8003ac4:	ff9fffff 	.word	0xff9fffff
 8003ac8:	fff7ffff 	.word	0xfff7ffff

08003acc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b086      	sub	sp, #24
 8003ad0:	af02      	add	r7, sp, #8
 8003ad2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2280      	movs	r2, #128	; 0x80
 8003ad8:	2100      	movs	r1, #0
 8003ada:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003adc:	f7fd fb2a 	bl	8001134 <HAL_GetTick>
 8003ae0:	0003      	movs	r3, r0
 8003ae2:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	2208      	movs	r2, #8
 8003aec:	4013      	ands	r3, r2
 8003aee:	2b08      	cmp	r3, #8
 8003af0:	d10d      	bne.n	8003b0e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003af2:	68fa      	ldr	r2, [r7, #12]
 8003af4:	2380      	movs	r3, #128	; 0x80
 8003af6:	0399      	lsls	r1, r3, #14
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	4b18      	ldr	r3, [pc, #96]	; (8003b5c <UART_CheckIdleState+0x90>)
 8003afc:	9300      	str	r3, [sp, #0]
 8003afe:	0013      	movs	r3, r2
 8003b00:	2200      	movs	r2, #0
 8003b02:	f000 f82d 	bl	8003b60 <UART_WaitOnFlagUntilTimeout>
 8003b06:	1e03      	subs	r3, r0, #0
 8003b08:	d001      	beq.n	8003b0e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b0a:	2303      	movs	r3, #3
 8003b0c:	e022      	b.n	8003b54 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	2204      	movs	r2, #4
 8003b16:	4013      	ands	r3, r2
 8003b18:	2b04      	cmp	r3, #4
 8003b1a:	d10d      	bne.n	8003b38 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b1c:	68fa      	ldr	r2, [r7, #12]
 8003b1e:	2380      	movs	r3, #128	; 0x80
 8003b20:	03d9      	lsls	r1, r3, #15
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	4b0d      	ldr	r3, [pc, #52]	; (8003b5c <UART_CheckIdleState+0x90>)
 8003b26:	9300      	str	r3, [sp, #0]
 8003b28:	0013      	movs	r3, r2
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	f000 f818 	bl	8003b60 <UART_WaitOnFlagUntilTimeout>
 8003b30:	1e03      	subs	r3, r0, #0
 8003b32:	d001      	beq.n	8003b38 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b34:	2303      	movs	r3, #3
 8003b36:	e00d      	b.n	8003b54 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2220      	movs	r2, #32
 8003b3c:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2220      	movs	r2, #32
 8003b42:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2200      	movs	r2, #0
 8003b48:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2274      	movs	r2, #116	; 0x74
 8003b4e:	2100      	movs	r1, #0
 8003b50:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003b52:	2300      	movs	r3, #0
}
 8003b54:	0018      	movs	r0, r3
 8003b56:	46bd      	mov	sp, r7
 8003b58:	b004      	add	sp, #16
 8003b5a:	bd80      	pop	{r7, pc}
 8003b5c:	01ffffff 	.word	0x01ffffff

08003b60 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b084      	sub	sp, #16
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	60f8      	str	r0, [r7, #12]
 8003b68:	60b9      	str	r1, [r7, #8]
 8003b6a:	603b      	str	r3, [r7, #0]
 8003b6c:	1dfb      	adds	r3, r7, #7
 8003b6e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b70:	e05e      	b.n	8003c30 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b72:	69bb      	ldr	r3, [r7, #24]
 8003b74:	3301      	adds	r3, #1
 8003b76:	d05b      	beq.n	8003c30 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b78:	f7fd fadc 	bl	8001134 <HAL_GetTick>
 8003b7c:	0002      	movs	r2, r0
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	1ad2      	subs	r2, r2, r3
 8003b82:	69bb      	ldr	r3, [r7, #24]
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d802      	bhi.n	8003b8e <UART_WaitOnFlagUntilTimeout+0x2e>
 8003b88:	69bb      	ldr	r3, [r7, #24]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d11b      	bne.n	8003bc6 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	68fa      	ldr	r2, [r7, #12]
 8003b94:	6812      	ldr	r2, [r2, #0]
 8003b96:	6812      	ldr	r2, [r2, #0]
 8003b98:	492f      	ldr	r1, [pc, #188]	; (8003c58 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8003b9a:	400a      	ands	r2, r1
 8003b9c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	68fa      	ldr	r2, [r7, #12]
 8003ba4:	6812      	ldr	r2, [r2, #0]
 8003ba6:	6892      	ldr	r2, [r2, #8]
 8003ba8:	2101      	movs	r1, #1
 8003baa:	438a      	bics	r2, r1
 8003bac:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2220      	movs	r2, #32
 8003bb2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2220      	movs	r2, #32
 8003bb8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2274      	movs	r2, #116	; 0x74
 8003bbe:	2100      	movs	r1, #0
 8003bc0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003bc2:	2303      	movs	r3, #3
 8003bc4:	e044      	b.n	8003c50 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	2204      	movs	r2, #4
 8003bce:	4013      	ands	r3, r2
 8003bd0:	d02e      	beq.n	8003c30 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	69da      	ldr	r2, [r3, #28]
 8003bd8:	2380      	movs	r3, #128	; 0x80
 8003bda:	011b      	lsls	r3, r3, #4
 8003bdc:	401a      	ands	r2, r3
 8003bde:	2380      	movs	r3, #128	; 0x80
 8003be0:	011b      	lsls	r3, r3, #4
 8003be2:	429a      	cmp	r2, r3
 8003be4:	d124      	bne.n	8003c30 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	2280      	movs	r2, #128	; 0x80
 8003bec:	0112      	lsls	r2, r2, #4
 8003bee:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	68fa      	ldr	r2, [r7, #12]
 8003bf6:	6812      	ldr	r2, [r2, #0]
 8003bf8:	6812      	ldr	r2, [r2, #0]
 8003bfa:	4917      	ldr	r1, [pc, #92]	; (8003c58 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8003bfc:	400a      	ands	r2, r1
 8003bfe:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	68fa      	ldr	r2, [r7, #12]
 8003c06:	6812      	ldr	r2, [r2, #0]
 8003c08:	6892      	ldr	r2, [r2, #8]
 8003c0a:	2101      	movs	r1, #1
 8003c0c:	438a      	bics	r2, r1
 8003c0e:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2220      	movs	r2, #32
 8003c14:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2220      	movs	r2, #32
 8003c1a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2280      	movs	r2, #128	; 0x80
 8003c20:	2120      	movs	r1, #32
 8003c22:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2274      	movs	r2, #116	; 0x74
 8003c28:	2100      	movs	r1, #0
 8003c2a:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003c2c:	2303      	movs	r3, #3
 8003c2e:	e00f      	b.n	8003c50 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	69db      	ldr	r3, [r3, #28]
 8003c36:	68ba      	ldr	r2, [r7, #8]
 8003c38:	401a      	ands	r2, r3
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	1ad3      	subs	r3, r2, r3
 8003c3e:	425a      	negs	r2, r3
 8003c40:	4153      	adcs	r3, r2
 8003c42:	b2db      	uxtb	r3, r3
 8003c44:	001a      	movs	r2, r3
 8003c46:	1dfb      	adds	r3, r7, #7
 8003c48:	781b      	ldrb	r3, [r3, #0]
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	d091      	beq.n	8003b72 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c4e:	2300      	movs	r3, #0
}
 8003c50:	0018      	movs	r0, r3
 8003c52:	46bd      	mov	sp, r7
 8003c54:	b004      	add	sp, #16
 8003c56:	bd80      	pop	{r7, pc}
 8003c58:	fffffe5f 	.word	0xfffffe5f

08003c5c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b084      	sub	sp, #16
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	60f8      	str	r0, [r7, #12]
 8003c64:	60b9      	str	r1, [r7, #8]
 8003c66:	1dbb      	adds	r3, r7, #6
 8003c68:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	68ba      	ldr	r2, [r7, #8]
 8003c6e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	1dba      	adds	r2, r7, #6
 8003c74:	2158      	movs	r1, #88	; 0x58
 8003c76:	8812      	ldrh	r2, [r2, #0]
 8003c78:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	1dba      	adds	r2, r7, #6
 8003c7e:	215a      	movs	r1, #90	; 0x5a
 8003c80:	8812      	ldrh	r2, [r2, #0]
 8003c82:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2200      	movs	r2, #0
 8003c88:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	689a      	ldr	r2, [r3, #8]
 8003c8e:	2380      	movs	r3, #128	; 0x80
 8003c90:	015b      	lsls	r3, r3, #5
 8003c92:	429a      	cmp	r2, r3
 8003c94:	d10d      	bne.n	8003cb2 <UART_Start_Receive_IT+0x56>
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	691b      	ldr	r3, [r3, #16]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d104      	bne.n	8003ca8 <UART_Start_Receive_IT+0x4c>
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	225c      	movs	r2, #92	; 0x5c
 8003ca2:	4932      	ldr	r1, [pc, #200]	; (8003d6c <UART_Start_Receive_IT+0x110>)
 8003ca4:	5299      	strh	r1, [r3, r2]
 8003ca6:	e02e      	b.n	8003d06 <UART_Start_Receive_IT+0xaa>
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	225c      	movs	r2, #92	; 0x5c
 8003cac:	21ff      	movs	r1, #255	; 0xff
 8003cae:	5299      	strh	r1, [r3, r2]
 8003cb0:	e029      	b.n	8003d06 <UART_Start_Receive_IT+0xaa>
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d10d      	bne.n	8003cd6 <UART_Start_Receive_IT+0x7a>
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	691b      	ldr	r3, [r3, #16]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d104      	bne.n	8003ccc <UART_Start_Receive_IT+0x70>
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	225c      	movs	r2, #92	; 0x5c
 8003cc6:	21ff      	movs	r1, #255	; 0xff
 8003cc8:	5299      	strh	r1, [r3, r2]
 8003cca:	e01c      	b.n	8003d06 <UART_Start_Receive_IT+0xaa>
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	225c      	movs	r2, #92	; 0x5c
 8003cd0:	217f      	movs	r1, #127	; 0x7f
 8003cd2:	5299      	strh	r1, [r3, r2]
 8003cd4:	e017      	b.n	8003d06 <UART_Start_Receive_IT+0xaa>
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	689a      	ldr	r2, [r3, #8]
 8003cda:	2380      	movs	r3, #128	; 0x80
 8003cdc:	055b      	lsls	r3, r3, #21
 8003cde:	429a      	cmp	r2, r3
 8003ce0:	d10d      	bne.n	8003cfe <UART_Start_Receive_IT+0xa2>
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	691b      	ldr	r3, [r3, #16]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d104      	bne.n	8003cf4 <UART_Start_Receive_IT+0x98>
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	225c      	movs	r2, #92	; 0x5c
 8003cee:	217f      	movs	r1, #127	; 0x7f
 8003cf0:	5299      	strh	r1, [r3, r2]
 8003cf2:	e008      	b.n	8003d06 <UART_Start_Receive_IT+0xaa>
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	225c      	movs	r2, #92	; 0x5c
 8003cf8:	213f      	movs	r1, #63	; 0x3f
 8003cfa:	5299      	strh	r1, [r3, r2]
 8003cfc:	e003      	b.n	8003d06 <UART_Start_Receive_IT+0xaa>
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	225c      	movs	r2, #92	; 0x5c
 8003d02:	2100      	movs	r1, #0
 8003d04:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2280      	movs	r2, #128	; 0x80
 8003d0a:	2100      	movs	r1, #0
 8003d0c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2222      	movs	r2, #34	; 0x22
 8003d12:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	68fa      	ldr	r2, [r7, #12]
 8003d1a:	6812      	ldr	r2, [r2, #0]
 8003d1c:	6892      	ldr	r2, [r2, #8]
 8003d1e:	2101      	movs	r1, #1
 8003d20:	430a      	orrs	r2, r1
 8003d22:	609a      	str	r2, [r3, #8]

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	689a      	ldr	r2, [r3, #8]
 8003d28:	2380      	movs	r3, #128	; 0x80
 8003d2a:	015b      	lsls	r3, r3, #5
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	d107      	bne.n	8003d40 <UART_Start_Receive_IT+0xe4>
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	691b      	ldr	r3, [r3, #16]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d103      	bne.n	8003d40 <UART_Start_Receive_IT+0xe4>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	4a0d      	ldr	r2, [pc, #52]	; (8003d70 <UART_Start_Receive_IT+0x114>)
 8003d3c:	665a      	str	r2, [r3, #100]	; 0x64
 8003d3e:	e002      	b.n	8003d46 <UART_Start_Receive_IT+0xea>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	4a0c      	ldr	r2, [pc, #48]	; (8003d74 <UART_Start_Receive_IT+0x118>)
 8003d44:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2274      	movs	r2, #116	; 0x74
 8003d4a:	2100      	movs	r1, #0
 8003d4c:	5499      	strb	r1, [r3, r2]

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	68fa      	ldr	r2, [r7, #12]
 8003d54:	6812      	ldr	r2, [r2, #0]
 8003d56:	6812      	ldr	r2, [r2, #0]
 8003d58:	2190      	movs	r1, #144	; 0x90
 8003d5a:	0049      	lsls	r1, r1, #1
 8003d5c:	430a      	orrs	r2, r1
 8003d5e:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003d60:	2300      	movs	r3, #0
}
 8003d62:	0018      	movs	r0, r3
 8003d64:	46bd      	mov	sp, r7
 8003d66:	b004      	add	sp, #16
 8003d68:	bd80      	pop	{r7, pc}
 8003d6a:	46c0      	nop			; (mov r8, r8)
 8003d6c:	000001ff 	.word	0x000001ff
 8003d70:	0800400d 	.word	0x0800400d
 8003d74:	08003f21 	.word	0x08003f21

08003d78 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b082      	sub	sp, #8
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	687a      	ldr	r2, [r7, #4]
 8003d86:	6812      	ldr	r2, [r2, #0]
 8003d88:	6812      	ldr	r2, [r2, #0]
 8003d8a:	4912      	ldr	r1, [pc, #72]	; (8003dd4 <UART_EndRxTransfer+0x5c>)
 8003d8c:	400a      	ands	r2, r1
 8003d8e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	687a      	ldr	r2, [r7, #4]
 8003d96:	6812      	ldr	r2, [r2, #0]
 8003d98:	6892      	ldr	r2, [r2, #8]
 8003d9a:	2101      	movs	r1, #1
 8003d9c:	438a      	bics	r2, r1
 8003d9e:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	d107      	bne.n	8003db8 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	687a      	ldr	r2, [r7, #4]
 8003dae:	6812      	ldr	r2, [r2, #0]
 8003db0:	6812      	ldr	r2, [r2, #0]
 8003db2:	2110      	movs	r1, #16
 8003db4:	438a      	bics	r2, r1
 8003db6:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2220      	movs	r2, #32
 8003dbc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003dca:	46c0      	nop			; (mov r8, r8)
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	b002      	add	sp, #8
 8003dd0:	bd80      	pop	{r7, pc}
 8003dd2:	46c0      	nop			; (mov r8, r8)
 8003dd4:	fffffedf 	.word	0xfffffedf

08003dd8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b084      	sub	sp, #16
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003de4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	225a      	movs	r2, #90	; 0x5a
 8003dea:	2100      	movs	r1, #0
 8003dec:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	2252      	movs	r2, #82	; 0x52
 8003df2:	2100      	movs	r1, #0
 8003df4:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	0018      	movs	r0, r3
 8003dfa:	f7ff fb03 	bl	8003404 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003dfe:	46c0      	nop			; (mov r8, r8)
 8003e00:	46bd      	mov	sp, r7
 8003e02:	b004      	add	sp, #16
 8003e04:	bd80      	pop	{r7, pc}

08003e06 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003e06:	b580      	push	{r7, lr}
 8003e08:	b082      	sub	sp, #8
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e12:	2b21      	cmp	r3, #33	; 0x21
 8003e14:	d12a      	bne.n	8003e6c <UART_TxISR_8BIT+0x66>
  {
    if (huart->TxXferCount == 0U)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2252      	movs	r2, #82	; 0x52
 8003e1a:	5a9b      	ldrh	r3, [r3, r2]
 8003e1c:	b29b      	uxth	r3, r3
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d110      	bne.n	8003e44 <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	687a      	ldr	r2, [r7, #4]
 8003e28:	6812      	ldr	r2, [r2, #0]
 8003e2a:	6812      	ldr	r2, [r2, #0]
 8003e2c:	2180      	movs	r1, #128	; 0x80
 8003e2e:	438a      	bics	r2, r1
 8003e30:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	687a      	ldr	r2, [r7, #4]
 8003e38:	6812      	ldr	r2, [r2, #0]
 8003e3a:	6812      	ldr	r2, [r2, #0]
 8003e3c:	2140      	movs	r1, #64	; 0x40
 8003e3e:	430a      	orrs	r2, r1
 8003e40:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8003e42:	e013      	b.n	8003e6c <UART_TxISR_8BIT+0x66>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	687a      	ldr	r2, [r7, #4]
 8003e4a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003e4c:	7812      	ldrb	r2, [r2, #0]
 8003e4e:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e54:	1c5a      	adds	r2, r3, #1
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2252      	movs	r2, #82	; 0x52
 8003e5e:	5a9b      	ldrh	r3, [r3, r2]
 8003e60:	b29b      	uxth	r3, r3
 8003e62:	3b01      	subs	r3, #1
 8003e64:	b299      	uxth	r1, r3
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2252      	movs	r2, #82	; 0x52
 8003e6a:	5299      	strh	r1, [r3, r2]
}
 8003e6c:	46c0      	nop			; (mov r8, r8)
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	b002      	add	sp, #8
 8003e72:	bd80      	pop	{r7, pc}

08003e74 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b084      	sub	sp, #16
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e80:	2b21      	cmp	r3, #33	; 0x21
 8003e82:	d12e      	bne.n	8003ee2 <UART_TxISR_16BIT+0x6e>
  {
    if (huart->TxXferCount == 0U)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2252      	movs	r2, #82	; 0x52
 8003e88:	5a9b      	ldrh	r3, [r3, r2]
 8003e8a:	b29b      	uxth	r3, r3
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d110      	bne.n	8003eb2 <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	687a      	ldr	r2, [r7, #4]
 8003e96:	6812      	ldr	r2, [r2, #0]
 8003e98:	6812      	ldr	r2, [r2, #0]
 8003e9a:	2180      	movs	r1, #128	; 0x80
 8003e9c:	438a      	bics	r2, r1
 8003e9e:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	687a      	ldr	r2, [r7, #4]
 8003ea6:	6812      	ldr	r2, [r2, #0]
 8003ea8:	6812      	ldr	r2, [r2, #0]
 8003eaa:	2140      	movs	r1, #64	; 0x40
 8003eac:	430a      	orrs	r2, r1
 8003eae:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8003eb0:	e017      	b.n	8003ee2 <UART_TxISR_16BIT+0x6e>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003eb6:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	68fa      	ldr	r2, [r7, #12]
 8003ebe:	8812      	ldrh	r2, [r2, #0]
 8003ec0:	05d2      	lsls	r2, r2, #23
 8003ec2:	0dd2      	lsrs	r2, r2, #23
 8003ec4:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003eca:	1c9a      	adds	r2, r3, #2
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2252      	movs	r2, #82	; 0x52
 8003ed4:	5a9b      	ldrh	r3, [r3, r2]
 8003ed6:	b29b      	uxth	r3, r3
 8003ed8:	3b01      	subs	r3, #1
 8003eda:	b299      	uxth	r1, r3
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2252      	movs	r2, #82	; 0x52
 8003ee0:	5299      	strh	r1, [r3, r2]
}
 8003ee2:	46c0      	nop			; (mov r8, r8)
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	b004      	add	sp, #16
 8003ee8:	bd80      	pop	{r7, pc}

08003eea <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003eea:	b580      	push	{r7, lr}
 8003eec:	b082      	sub	sp, #8
 8003eee:	af00      	add	r7, sp, #0
 8003ef0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	687a      	ldr	r2, [r7, #4]
 8003ef8:	6812      	ldr	r2, [r2, #0]
 8003efa:	6812      	ldr	r2, [r2, #0]
 8003efc:	2140      	movs	r1, #64	; 0x40
 8003efe:	438a      	bics	r2, r1
 8003f00:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2220      	movs	r2, #32
 8003f06:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	0018      	movs	r0, r3
 8003f12:	f7ff fa6f 	bl	80033f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f16:	46c0      	nop			; (mov r8, r8)
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	b002      	add	sp, #8
 8003f1c:	bd80      	pop	{r7, pc}
	...

08003f20 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b084      	sub	sp, #16
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003f28:	230e      	movs	r3, #14
 8003f2a:	18fb      	adds	r3, r7, r3
 8003f2c:	687a      	ldr	r2, [r7, #4]
 8003f2e:	215c      	movs	r1, #92	; 0x5c
 8003f30:	5a52      	ldrh	r2, [r2, r1]
 8003f32:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f38:	2b22      	cmp	r3, #34	; 0x22
 8003f3a:	d159      	bne.n	8003ff0 <UART_RxISR_8BIT+0xd0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f42:	230c      	movs	r3, #12
 8003f44:	18fb      	adds	r3, r7, r3
 8003f46:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f4c:	220c      	movs	r2, #12
 8003f4e:	18ba      	adds	r2, r7, r2
 8003f50:	8812      	ldrh	r2, [r2, #0]
 8003f52:	b2d2      	uxtb	r2, r2
 8003f54:	210e      	movs	r1, #14
 8003f56:	1879      	adds	r1, r7, r1
 8003f58:	8809      	ldrh	r1, [r1, #0]
 8003f5a:	b2c9      	uxtb	r1, r1
 8003f5c:	400a      	ands	r2, r1
 8003f5e:	b2d2      	uxtb	r2, r2
 8003f60:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f66:	1c5a      	adds	r2, r3, #1
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	225a      	movs	r2, #90	; 0x5a
 8003f70:	5a9b      	ldrh	r3, [r3, r2]
 8003f72:	b29b      	uxth	r3, r3
 8003f74:	3b01      	subs	r3, #1
 8003f76:	b299      	uxth	r1, r3
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	225a      	movs	r2, #90	; 0x5a
 8003f7c:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	225a      	movs	r2, #90	; 0x5a
 8003f82:	5a9b      	ldrh	r3, [r3, r2]
 8003f84:	b29b      	uxth	r3, r3
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d13a      	bne.n	8004000 <UART_RxISR_8BIT+0xe0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	687a      	ldr	r2, [r7, #4]
 8003f90:	6812      	ldr	r2, [r2, #0]
 8003f92:	6812      	ldr	r2, [r2, #0]
 8003f94:	491c      	ldr	r1, [pc, #112]	; (8004008 <UART_RxISR_8BIT+0xe8>)
 8003f96:	400a      	ands	r2, r1
 8003f98:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	687a      	ldr	r2, [r7, #4]
 8003fa0:	6812      	ldr	r2, [r2, #0]
 8003fa2:	6892      	ldr	r2, [r2, #8]
 8003fa4:	2101      	movs	r1, #1
 8003fa6:	438a      	bics	r2, r1
 8003fa8:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2220      	movs	r2, #32
 8003fae:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fba:	2b01      	cmp	r3, #1
 8003fbc:	d110      	bne.n	8003fe0 <UART_RxISR_8BIT+0xc0>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	687a      	ldr	r2, [r7, #4]
 8003fc4:	6812      	ldr	r2, [r2, #0]
 8003fc6:	6812      	ldr	r2, [r2, #0]
 8003fc8:	2110      	movs	r1, #16
 8003fca:	438a      	bics	r2, r1
 8003fcc:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2258      	movs	r2, #88	; 0x58
 8003fd2:	5a9a      	ldrh	r2, [r3, r2]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	0011      	movs	r1, r2
 8003fd8:	0018      	movs	r0, r3
 8003fda:	f7ff fa1b 	bl	8003414 <HAL_UARTEx_RxEventCallback>
 8003fde:	e003      	b.n	8003fe8 <UART_RxISR_8BIT+0xc8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	0018      	movs	r0, r3
 8003fe4:	f7fc fd0e 	bl	8000a04 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2200      	movs	r2, #0
 8003fec:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003fee:	e007      	b.n	8004000 <UART_RxISR_8BIT+0xe0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	687a      	ldr	r2, [r7, #4]
 8003ff6:	6812      	ldr	r2, [r2, #0]
 8003ff8:	6992      	ldr	r2, [r2, #24]
 8003ffa:	2108      	movs	r1, #8
 8003ffc:	430a      	orrs	r2, r1
 8003ffe:	619a      	str	r2, [r3, #24]
}
 8004000:	46c0      	nop			; (mov r8, r8)
 8004002:	46bd      	mov	sp, r7
 8004004:	b004      	add	sp, #16
 8004006:	bd80      	pop	{r7, pc}
 8004008:	fffffedf 	.word	0xfffffedf

0800400c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b084      	sub	sp, #16
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004014:	230e      	movs	r3, #14
 8004016:	18fb      	adds	r3, r7, r3
 8004018:	687a      	ldr	r2, [r7, #4]
 800401a:	215c      	movs	r1, #92	; 0x5c
 800401c:	5a52      	ldrh	r2, [r2, r1]
 800401e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004024:	2b22      	cmp	r3, #34	; 0x22
 8004026:	d159      	bne.n	80040dc <UART_RxISR_16BIT+0xd0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800402e:	230c      	movs	r3, #12
 8004030:	18fb      	adds	r3, r7, r3
 8004032:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004038:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800403a:	230c      	movs	r3, #12
 800403c:	18fb      	adds	r3, r7, r3
 800403e:	220e      	movs	r2, #14
 8004040:	18ba      	adds	r2, r7, r2
 8004042:	881b      	ldrh	r3, [r3, #0]
 8004044:	8812      	ldrh	r2, [r2, #0]
 8004046:	4013      	ands	r3, r2
 8004048:	b29a      	uxth	r2, r3
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004052:	1c9a      	adds	r2, r3, #2
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	225a      	movs	r2, #90	; 0x5a
 800405c:	5a9b      	ldrh	r3, [r3, r2]
 800405e:	b29b      	uxth	r3, r3
 8004060:	3b01      	subs	r3, #1
 8004062:	b299      	uxth	r1, r3
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	225a      	movs	r2, #90	; 0x5a
 8004068:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	225a      	movs	r2, #90	; 0x5a
 800406e:	5a9b      	ldrh	r3, [r3, r2]
 8004070:	b29b      	uxth	r3, r3
 8004072:	2b00      	cmp	r3, #0
 8004074:	d13a      	bne.n	80040ec <UART_RxISR_16BIT+0xe0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	687a      	ldr	r2, [r7, #4]
 800407c:	6812      	ldr	r2, [r2, #0]
 800407e:	6812      	ldr	r2, [r2, #0]
 8004080:	491c      	ldr	r1, [pc, #112]	; (80040f4 <UART_RxISR_16BIT+0xe8>)
 8004082:	400a      	ands	r2, r1
 8004084:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	687a      	ldr	r2, [r7, #4]
 800408c:	6812      	ldr	r2, [r2, #0]
 800408e:	6892      	ldr	r2, [r2, #8]
 8004090:	2101      	movs	r1, #1
 8004092:	438a      	bics	r2, r1
 8004094:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2220      	movs	r2, #32
 800409a:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2200      	movs	r2, #0
 80040a0:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	d110      	bne.n	80040cc <UART_RxISR_16BIT+0xc0>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	687a      	ldr	r2, [r7, #4]
 80040b0:	6812      	ldr	r2, [r2, #0]
 80040b2:	6812      	ldr	r2, [r2, #0]
 80040b4:	2110      	movs	r1, #16
 80040b6:	438a      	bics	r2, r1
 80040b8:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2258      	movs	r2, #88	; 0x58
 80040be:	5a9a      	ldrh	r2, [r3, r2]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	0011      	movs	r1, r2
 80040c4:	0018      	movs	r0, r3
 80040c6:	f7ff f9a5 	bl	8003414 <HAL_UARTEx_RxEventCallback>
 80040ca:	e003      	b.n	80040d4 <UART_RxISR_16BIT+0xc8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	0018      	movs	r0, r3
 80040d0:	f7fc fc98 	bl	8000a04 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2200      	movs	r2, #0
 80040d8:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80040da:	e007      	b.n	80040ec <UART_RxISR_16BIT+0xe0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	687a      	ldr	r2, [r7, #4]
 80040e2:	6812      	ldr	r2, [r2, #0]
 80040e4:	6992      	ldr	r2, [r2, #24]
 80040e6:	2108      	movs	r1, #8
 80040e8:	430a      	orrs	r2, r1
 80040ea:	619a      	str	r2, [r3, #24]
}
 80040ec:	46c0      	nop			; (mov r8, r8)
 80040ee:	46bd      	mov	sp, r7
 80040f0:	b004      	add	sp, #16
 80040f2:	bd80      	pop	{r7, pc}
 80040f4:	fffffedf 	.word	0xfffffedf

080040f8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b082      	sub	sp, #8
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004100:	46c0      	nop			; (mov r8, r8)
 8004102:	46bd      	mov	sp, r7
 8004104:	b002      	add	sp, #8
 8004106:	bd80      	pop	{r7, pc}

08004108 <__libc_init_array>:
 8004108:	b570      	push	{r4, r5, r6, lr}
 800410a:	2600      	movs	r6, #0
 800410c:	4d0c      	ldr	r5, [pc, #48]	; (8004140 <__libc_init_array+0x38>)
 800410e:	4c0d      	ldr	r4, [pc, #52]	; (8004144 <__libc_init_array+0x3c>)
 8004110:	1b64      	subs	r4, r4, r5
 8004112:	10a4      	asrs	r4, r4, #2
 8004114:	42a6      	cmp	r6, r4
 8004116:	d109      	bne.n	800412c <__libc_init_array+0x24>
 8004118:	2600      	movs	r6, #0
 800411a:	f000 f821 	bl	8004160 <_init>
 800411e:	4d0a      	ldr	r5, [pc, #40]	; (8004148 <__libc_init_array+0x40>)
 8004120:	4c0a      	ldr	r4, [pc, #40]	; (800414c <__libc_init_array+0x44>)
 8004122:	1b64      	subs	r4, r4, r5
 8004124:	10a4      	asrs	r4, r4, #2
 8004126:	42a6      	cmp	r6, r4
 8004128:	d105      	bne.n	8004136 <__libc_init_array+0x2e>
 800412a:	bd70      	pop	{r4, r5, r6, pc}
 800412c:	00b3      	lsls	r3, r6, #2
 800412e:	58eb      	ldr	r3, [r5, r3]
 8004130:	4798      	blx	r3
 8004132:	3601      	adds	r6, #1
 8004134:	e7ee      	b.n	8004114 <__libc_init_array+0xc>
 8004136:	00b3      	lsls	r3, r6, #2
 8004138:	58eb      	ldr	r3, [r5, r3]
 800413a:	4798      	blx	r3
 800413c:	3601      	adds	r6, #1
 800413e:	e7f2      	b.n	8004126 <__libc_init_array+0x1e>
 8004140:	08004210 	.word	0x08004210
 8004144:	08004210 	.word	0x08004210
 8004148:	08004210 	.word	0x08004210
 800414c:	08004214 	.word	0x08004214

08004150 <memset>:
 8004150:	0003      	movs	r3, r0
 8004152:	1882      	adds	r2, r0, r2
 8004154:	4293      	cmp	r3, r2
 8004156:	d100      	bne.n	800415a <memset+0xa>
 8004158:	4770      	bx	lr
 800415a:	7019      	strb	r1, [r3, #0]
 800415c:	3301      	adds	r3, #1
 800415e:	e7f9      	b.n	8004154 <memset+0x4>

08004160 <_init>:
 8004160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004162:	46c0      	nop			; (mov r8, r8)
 8004164:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004166:	bc08      	pop	{r3}
 8004168:	469e      	mov	lr, r3
 800416a:	4770      	bx	lr

0800416c <_fini>:
 800416c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800416e:	46c0      	nop			; (mov r8, r8)
 8004170:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004172:	bc08      	pop	{r3}
 8004174:	469e      	mov	lr, r3
 8004176:	4770      	bx	lr
