
stmcube_prj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000296c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08002a2c  08002a2c  00012a2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08002a98  08002a98  00012a98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08002aa0  08002aa0  00012aa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08002aa4  08002aa4  00012aa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  08002aa8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000100  2000000c  08002ab4  0002000c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  2000010c  08002ab4  0002010c  2**0
                  ALLOC
  9 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 10 .debug_line   0000352c  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   00006b9a  00000000  00000000  00023560  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 000013f8  00000000  00000000  0002a0fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000758  00000000  00000000  0002b4f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000006d0  00000000  00000000  0002bc50  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000024ab  00000000  00000000  0002c320  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0002e7cb  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001970  00000000  00000000  0002e848  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002a14 	.word	0x08002a14

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002a14 	.word	0x08002a14

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	1c08      	adds	r0, r1, #0
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f830 	bl	80002b4 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4647      	mov	r7, r8
 8000266:	0415      	lsls	r5, r2, #16
 8000268:	0c2d      	lsrs	r5, r5, #16
 800026a:	002e      	movs	r6, r5
 800026c:	b580      	push	{r7, lr}
 800026e:	0407      	lsls	r7, r0, #16
 8000270:	0c14      	lsrs	r4, r2, #16
 8000272:	0c3f      	lsrs	r7, r7, #16
 8000274:	4699      	mov	r9, r3
 8000276:	0c03      	lsrs	r3, r0, #16
 8000278:	437e      	muls	r6, r7
 800027a:	435d      	muls	r5, r3
 800027c:	4367      	muls	r7, r4
 800027e:	4363      	muls	r3, r4
 8000280:	197f      	adds	r7, r7, r5
 8000282:	0c34      	lsrs	r4, r6, #16
 8000284:	19e4      	adds	r4, r4, r7
 8000286:	469c      	mov	ip, r3
 8000288:	42a5      	cmp	r5, r4
 800028a:	d903      	bls.n	8000294 <__aeabi_lmul+0x34>
 800028c:	2380      	movs	r3, #128	; 0x80
 800028e:	025b      	lsls	r3, r3, #9
 8000290:	4698      	mov	r8, r3
 8000292:	44c4      	add	ip, r8
 8000294:	464b      	mov	r3, r9
 8000296:	4351      	muls	r1, r2
 8000298:	4343      	muls	r3, r0
 800029a:	0436      	lsls	r6, r6, #16
 800029c:	0c36      	lsrs	r6, r6, #16
 800029e:	0c25      	lsrs	r5, r4, #16
 80002a0:	0424      	lsls	r4, r4, #16
 80002a2:	4465      	add	r5, ip
 80002a4:	19a4      	adds	r4, r4, r6
 80002a6:	1859      	adds	r1, r3, r1
 80002a8:	1949      	adds	r1, r1, r5
 80002aa:	0020      	movs	r0, r4
 80002ac:	bc0c      	pop	{r2, r3}
 80002ae:	4690      	mov	r8, r2
 80002b0:	4699      	mov	r9, r3
 80002b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002b4 <__udivmoddi4>:
 80002b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002b6:	4657      	mov	r7, sl
 80002b8:	464e      	mov	r6, r9
 80002ba:	4645      	mov	r5, r8
 80002bc:	46de      	mov	lr, fp
 80002be:	b5e0      	push	{r5, r6, r7, lr}
 80002c0:	0004      	movs	r4, r0
 80002c2:	b083      	sub	sp, #12
 80002c4:	000d      	movs	r5, r1
 80002c6:	4692      	mov	sl, r2
 80002c8:	4699      	mov	r9, r3
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d82f      	bhi.n	800032e <__udivmoddi4+0x7a>
 80002ce:	d02c      	beq.n	800032a <__udivmoddi4+0x76>
 80002d0:	4649      	mov	r1, r9
 80002d2:	4650      	mov	r0, sl
 80002d4:	f000 f8ae 	bl	8000434 <__clzdi2>
 80002d8:	0029      	movs	r1, r5
 80002da:	0006      	movs	r6, r0
 80002dc:	0020      	movs	r0, r4
 80002de:	f000 f8a9 	bl	8000434 <__clzdi2>
 80002e2:	1a33      	subs	r3, r6, r0
 80002e4:	4698      	mov	r8, r3
 80002e6:	3b20      	subs	r3, #32
 80002e8:	469b      	mov	fp, r3
 80002ea:	d500      	bpl.n	80002ee <__udivmoddi4+0x3a>
 80002ec:	e074      	b.n	80003d8 <__udivmoddi4+0x124>
 80002ee:	4653      	mov	r3, sl
 80002f0:	465a      	mov	r2, fp
 80002f2:	4093      	lsls	r3, r2
 80002f4:	001f      	movs	r7, r3
 80002f6:	4653      	mov	r3, sl
 80002f8:	4642      	mov	r2, r8
 80002fa:	4093      	lsls	r3, r2
 80002fc:	001e      	movs	r6, r3
 80002fe:	42af      	cmp	r7, r5
 8000300:	d829      	bhi.n	8000356 <__udivmoddi4+0xa2>
 8000302:	d026      	beq.n	8000352 <__udivmoddi4+0x9e>
 8000304:	465b      	mov	r3, fp
 8000306:	1ba4      	subs	r4, r4, r6
 8000308:	41bd      	sbcs	r5, r7
 800030a:	2b00      	cmp	r3, #0
 800030c:	da00      	bge.n	8000310 <__udivmoddi4+0x5c>
 800030e:	e079      	b.n	8000404 <__udivmoddi4+0x150>
 8000310:	2200      	movs	r2, #0
 8000312:	2300      	movs	r3, #0
 8000314:	9200      	str	r2, [sp, #0]
 8000316:	9301      	str	r3, [sp, #4]
 8000318:	2301      	movs	r3, #1
 800031a:	465a      	mov	r2, fp
 800031c:	4093      	lsls	r3, r2
 800031e:	9301      	str	r3, [sp, #4]
 8000320:	2301      	movs	r3, #1
 8000322:	4642      	mov	r2, r8
 8000324:	4093      	lsls	r3, r2
 8000326:	9300      	str	r3, [sp, #0]
 8000328:	e019      	b.n	800035e <__udivmoddi4+0xaa>
 800032a:	4282      	cmp	r2, r0
 800032c:	d9d0      	bls.n	80002d0 <__udivmoddi4+0x1c>
 800032e:	2200      	movs	r2, #0
 8000330:	2300      	movs	r3, #0
 8000332:	9200      	str	r2, [sp, #0]
 8000334:	9301      	str	r3, [sp, #4]
 8000336:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000338:	2b00      	cmp	r3, #0
 800033a:	d001      	beq.n	8000340 <__udivmoddi4+0x8c>
 800033c:	601c      	str	r4, [r3, #0]
 800033e:	605d      	str	r5, [r3, #4]
 8000340:	9800      	ldr	r0, [sp, #0]
 8000342:	9901      	ldr	r1, [sp, #4]
 8000344:	b003      	add	sp, #12
 8000346:	bc3c      	pop	{r2, r3, r4, r5}
 8000348:	4690      	mov	r8, r2
 800034a:	4699      	mov	r9, r3
 800034c:	46a2      	mov	sl, r4
 800034e:	46ab      	mov	fp, r5
 8000350:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000352:	42a3      	cmp	r3, r4
 8000354:	d9d6      	bls.n	8000304 <__udivmoddi4+0x50>
 8000356:	2200      	movs	r2, #0
 8000358:	2300      	movs	r3, #0
 800035a:	9200      	str	r2, [sp, #0]
 800035c:	9301      	str	r3, [sp, #4]
 800035e:	4643      	mov	r3, r8
 8000360:	2b00      	cmp	r3, #0
 8000362:	d0e8      	beq.n	8000336 <__udivmoddi4+0x82>
 8000364:	07fb      	lsls	r3, r7, #31
 8000366:	0872      	lsrs	r2, r6, #1
 8000368:	431a      	orrs	r2, r3
 800036a:	4646      	mov	r6, r8
 800036c:	087b      	lsrs	r3, r7, #1
 800036e:	e00e      	b.n	800038e <__udivmoddi4+0xda>
 8000370:	42ab      	cmp	r3, r5
 8000372:	d101      	bne.n	8000378 <__udivmoddi4+0xc4>
 8000374:	42a2      	cmp	r2, r4
 8000376:	d80c      	bhi.n	8000392 <__udivmoddi4+0xde>
 8000378:	1aa4      	subs	r4, r4, r2
 800037a:	419d      	sbcs	r5, r3
 800037c:	2001      	movs	r0, #1
 800037e:	1924      	adds	r4, r4, r4
 8000380:	416d      	adcs	r5, r5
 8000382:	2100      	movs	r1, #0
 8000384:	3e01      	subs	r6, #1
 8000386:	1824      	adds	r4, r4, r0
 8000388:	414d      	adcs	r5, r1
 800038a:	2e00      	cmp	r6, #0
 800038c:	d006      	beq.n	800039c <__udivmoddi4+0xe8>
 800038e:	42ab      	cmp	r3, r5
 8000390:	d9ee      	bls.n	8000370 <__udivmoddi4+0xbc>
 8000392:	3e01      	subs	r6, #1
 8000394:	1924      	adds	r4, r4, r4
 8000396:	416d      	adcs	r5, r5
 8000398:	2e00      	cmp	r6, #0
 800039a:	d1f8      	bne.n	800038e <__udivmoddi4+0xda>
 800039c:	465b      	mov	r3, fp
 800039e:	9800      	ldr	r0, [sp, #0]
 80003a0:	9901      	ldr	r1, [sp, #4]
 80003a2:	1900      	adds	r0, r0, r4
 80003a4:	4169      	adcs	r1, r5
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	db22      	blt.n	80003f0 <__udivmoddi4+0x13c>
 80003aa:	002b      	movs	r3, r5
 80003ac:	465a      	mov	r2, fp
 80003ae:	40d3      	lsrs	r3, r2
 80003b0:	002a      	movs	r2, r5
 80003b2:	4644      	mov	r4, r8
 80003b4:	40e2      	lsrs	r2, r4
 80003b6:	001c      	movs	r4, r3
 80003b8:	465b      	mov	r3, fp
 80003ba:	0015      	movs	r5, r2
 80003bc:	2b00      	cmp	r3, #0
 80003be:	db2c      	blt.n	800041a <__udivmoddi4+0x166>
 80003c0:	0026      	movs	r6, r4
 80003c2:	409e      	lsls	r6, r3
 80003c4:	0033      	movs	r3, r6
 80003c6:	0026      	movs	r6, r4
 80003c8:	4647      	mov	r7, r8
 80003ca:	40be      	lsls	r6, r7
 80003cc:	0032      	movs	r2, r6
 80003ce:	1a80      	subs	r0, r0, r2
 80003d0:	4199      	sbcs	r1, r3
 80003d2:	9000      	str	r0, [sp, #0]
 80003d4:	9101      	str	r1, [sp, #4]
 80003d6:	e7ae      	b.n	8000336 <__udivmoddi4+0x82>
 80003d8:	4642      	mov	r2, r8
 80003da:	2320      	movs	r3, #32
 80003dc:	1a9b      	subs	r3, r3, r2
 80003de:	4652      	mov	r2, sl
 80003e0:	40da      	lsrs	r2, r3
 80003e2:	4641      	mov	r1, r8
 80003e4:	0013      	movs	r3, r2
 80003e6:	464a      	mov	r2, r9
 80003e8:	408a      	lsls	r2, r1
 80003ea:	0017      	movs	r7, r2
 80003ec:	431f      	orrs	r7, r3
 80003ee:	e782      	b.n	80002f6 <__udivmoddi4+0x42>
 80003f0:	4642      	mov	r2, r8
 80003f2:	2320      	movs	r3, #32
 80003f4:	1a9b      	subs	r3, r3, r2
 80003f6:	002a      	movs	r2, r5
 80003f8:	4646      	mov	r6, r8
 80003fa:	409a      	lsls	r2, r3
 80003fc:	0023      	movs	r3, r4
 80003fe:	40f3      	lsrs	r3, r6
 8000400:	4313      	orrs	r3, r2
 8000402:	e7d5      	b.n	80003b0 <__udivmoddi4+0xfc>
 8000404:	4642      	mov	r2, r8
 8000406:	2320      	movs	r3, #32
 8000408:	2100      	movs	r1, #0
 800040a:	1a9b      	subs	r3, r3, r2
 800040c:	2200      	movs	r2, #0
 800040e:	9100      	str	r1, [sp, #0]
 8000410:	9201      	str	r2, [sp, #4]
 8000412:	2201      	movs	r2, #1
 8000414:	40da      	lsrs	r2, r3
 8000416:	9201      	str	r2, [sp, #4]
 8000418:	e782      	b.n	8000320 <__udivmoddi4+0x6c>
 800041a:	4642      	mov	r2, r8
 800041c:	2320      	movs	r3, #32
 800041e:	0026      	movs	r6, r4
 8000420:	1a9b      	subs	r3, r3, r2
 8000422:	40de      	lsrs	r6, r3
 8000424:	002f      	movs	r7, r5
 8000426:	46b4      	mov	ip, r6
 8000428:	4097      	lsls	r7, r2
 800042a:	4666      	mov	r6, ip
 800042c:	003b      	movs	r3, r7
 800042e:	4333      	orrs	r3, r6
 8000430:	e7c9      	b.n	80003c6 <__udivmoddi4+0x112>
 8000432:	46c0      	nop			; (mov r8, r8)

08000434 <__clzdi2>:
 8000434:	b510      	push	{r4, lr}
 8000436:	2900      	cmp	r1, #0
 8000438:	d103      	bne.n	8000442 <__clzdi2+0xe>
 800043a:	f000 f807 	bl	800044c <__clzsi2>
 800043e:	3020      	adds	r0, #32
 8000440:	e002      	b.n	8000448 <__clzdi2+0x14>
 8000442:	1c08      	adds	r0, r1, #0
 8000444:	f000 f802 	bl	800044c <__clzsi2>
 8000448:	bd10      	pop	{r4, pc}
 800044a:	46c0      	nop			; (mov r8, r8)

0800044c <__clzsi2>:
 800044c:	211c      	movs	r1, #28
 800044e:	2301      	movs	r3, #1
 8000450:	041b      	lsls	r3, r3, #16
 8000452:	4298      	cmp	r0, r3
 8000454:	d301      	bcc.n	800045a <__clzsi2+0xe>
 8000456:	0c00      	lsrs	r0, r0, #16
 8000458:	3910      	subs	r1, #16
 800045a:	0a1b      	lsrs	r3, r3, #8
 800045c:	4298      	cmp	r0, r3
 800045e:	d301      	bcc.n	8000464 <__clzsi2+0x18>
 8000460:	0a00      	lsrs	r0, r0, #8
 8000462:	3908      	subs	r1, #8
 8000464:	091b      	lsrs	r3, r3, #4
 8000466:	4298      	cmp	r0, r3
 8000468:	d301      	bcc.n	800046e <__clzsi2+0x22>
 800046a:	0900      	lsrs	r0, r0, #4
 800046c:	3904      	subs	r1, #4
 800046e:	a202      	add	r2, pc, #8	; (adr r2, 8000478 <__clzsi2+0x2c>)
 8000470:	5c10      	ldrb	r0, [r2, r0]
 8000472:	1840      	adds	r0, r0, r1
 8000474:	4770      	bx	lr
 8000476:	46c0      	nop			; (mov r8, r8)
 8000478:	02020304 	.word	0x02020304
 800047c:	01010101 	.word	0x01010101
	...

08000488 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000488:	480d      	ldr	r0, [pc, #52]	; (80004c0 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800048a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800048c:	480d      	ldr	r0, [pc, #52]	; (80004c4 <LoopForever+0x6>)
  ldr r1, =_edata
 800048e:	490e      	ldr	r1, [pc, #56]	; (80004c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000490:	4a0e      	ldr	r2, [pc, #56]	; (80004cc <LoopForever+0xe>)
  movs r3, #0
 8000492:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000494:	e002      	b.n	800049c <LoopCopyDataInit>

08000496 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000496:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000498:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800049a:	3304      	adds	r3, #4

0800049c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800049c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800049e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004a0:	d3f9      	bcc.n	8000496 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004a2:	4a0b      	ldr	r2, [pc, #44]	; (80004d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80004a4:	4c0b      	ldr	r4, [pc, #44]	; (80004d4 <LoopForever+0x16>)
  movs r3, #0
 80004a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004a8:	e001      	b.n	80004ae <LoopFillZerobss>

080004aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004ac:	3204      	adds	r2, #4

080004ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004b0:	d3fb      	bcc.n	80004aa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80004b2:	f000 fa84 	bl	80009be <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80004b6:	f002 fa81 	bl	80029bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80004ba:	f000 f80e 	bl	80004da <main>

080004be <LoopForever>:

LoopForever:
    b LoopForever
 80004be:	e7fe      	b.n	80004be <LoopForever>
   ldr   r0, =_estack
 80004c0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80004c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004c8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80004cc:	08002aa8 	.word	0x08002aa8
  ldr r2, =_sbss
 80004d0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80004d4:	2000010c 	.word	0x2000010c

080004d8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80004d8:	e7fe      	b.n	80004d8 <ADC1_COMP_IRQHandler>

080004da <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004da:	b580      	push	{r7, lr}
 80004dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004de:	f000 fa73 	bl	80009c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e2:	f000 f807 	bl	80004f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e6:	f000 f91d 	bl	8000724 <MX_GPIO_Init>
  MX_ADC_Init();
 80004ea:	f000 f879 	bl	80005e0 <MX_ADC_Init>
  MX_USART2_UART_Init();
 80004ee:	f000 f8e9 	bl	80006c4 <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004f2:	e7fe      	b.n	80004f2 <main+0x18>

080004f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b09a      	sub	sp, #104	; 0x68
 80004f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004fa:	2334      	movs	r3, #52	; 0x34
 80004fc:	18fb      	adds	r3, r7, r3
 80004fe:	0018      	movs	r0, r3
 8000500:	2334      	movs	r3, #52	; 0x34
 8000502:	001a      	movs	r2, r3
 8000504:	2100      	movs	r1, #0
 8000506:	f002 fa7d 	bl	8002a04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800050a:	2320      	movs	r3, #32
 800050c:	18fb      	adds	r3, r7, r3
 800050e:	0018      	movs	r0, r3
 8000510:	2314      	movs	r3, #20
 8000512:	001a      	movs	r2, r3
 8000514:	2100      	movs	r1, #0
 8000516:	f002 fa75 	bl	8002a04 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800051a:	1d3b      	adds	r3, r7, #4
 800051c:	0018      	movs	r0, r3
 800051e:	231c      	movs	r3, #28
 8000520:	001a      	movs	r2, r3
 8000522:	2100      	movs	r1, #0
 8000524:	f002 fa6e 	bl	8002a04 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000528:	4b2b      	ldr	r3, [pc, #172]	; (80005d8 <SystemClock_Config+0xe4>)
 800052a:	4a2b      	ldr	r2, [pc, #172]	; (80005d8 <SystemClock_Config+0xe4>)
 800052c:	6812      	ldr	r2, [r2, #0]
 800052e:	492b      	ldr	r1, [pc, #172]	; (80005dc <SystemClock_Config+0xe8>)
 8000530:	400a      	ands	r2, r1
 8000532:	2180      	movs	r1, #128	; 0x80
 8000534:	0109      	lsls	r1, r1, #4
 8000536:	430a      	orrs	r2, r1
 8000538:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800053a:	2334      	movs	r3, #52	; 0x34
 800053c:	18fb      	adds	r3, r7, r3
 800053e:	2210      	movs	r2, #16
 8000540:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000542:	2334      	movs	r3, #52	; 0x34
 8000544:	18fb      	adds	r3, r7, r3
 8000546:	2201      	movs	r2, #1
 8000548:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800054a:	2334      	movs	r3, #52	; 0x34
 800054c:	18fb      	adds	r3, r7, r3
 800054e:	2200      	movs	r2, #0
 8000550:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8000552:	2334      	movs	r3, #52	; 0x34
 8000554:	18fb      	adds	r3, r7, r3
 8000556:	22a0      	movs	r2, #160	; 0xa0
 8000558:	0212      	lsls	r2, r2, #8
 800055a:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800055c:	2334      	movs	r3, #52	; 0x34
 800055e:	18fb      	adds	r3, r7, r3
 8000560:	2200      	movs	r2, #0
 8000562:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000564:	2334      	movs	r3, #52	; 0x34
 8000566:	18fb      	adds	r3, r7, r3
 8000568:	0018      	movs	r0, r3
 800056a:	f000 feff 	bl	800136c <HAL_RCC_OscConfig>
 800056e:	1e03      	subs	r3, r0, #0
 8000570:	d001      	beq.n	8000576 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000572:	f000 f96d 	bl	8000850 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000576:	2320      	movs	r3, #32
 8000578:	18fb      	adds	r3, r7, r3
 800057a:	220f      	movs	r2, #15
 800057c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800057e:	2320      	movs	r3, #32
 8000580:	18fb      	adds	r3, r7, r3
 8000582:	2200      	movs	r2, #0
 8000584:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000586:	2320      	movs	r3, #32
 8000588:	18fb      	adds	r3, r7, r3
 800058a:	2200      	movs	r2, #0
 800058c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800058e:	2320      	movs	r3, #32
 8000590:	18fb      	adds	r3, r7, r3
 8000592:	2200      	movs	r2, #0
 8000594:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000596:	2320      	movs	r3, #32
 8000598:	18fb      	adds	r3, r7, r3
 800059a:	2200      	movs	r2, #0
 800059c:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800059e:	2320      	movs	r3, #32
 80005a0:	18fb      	adds	r3, r7, r3
 80005a2:	2100      	movs	r1, #0
 80005a4:	0018      	movs	r0, r3
 80005a6:	f001 fa4b 	bl	8001a40 <HAL_RCC_ClockConfig>
 80005aa:	1e03      	subs	r3, r0, #0
 80005ac:	d001      	beq.n	80005b2 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80005ae:	f000 f94f 	bl	8000850 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80005b2:	1d3b      	adds	r3, r7, #4
 80005b4:	2202      	movs	r2, #2
 80005b6:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80005b8:	1d3b      	adds	r3, r7, #4
 80005ba:	2200      	movs	r2, #0
 80005bc:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005be:	1d3b      	adds	r3, r7, #4
 80005c0:	0018      	movs	r0, r3
 80005c2:	f001 fc5d 	bl	8001e80 <HAL_RCCEx_PeriphCLKConfig>
 80005c6:	1e03      	subs	r3, r0, #0
 80005c8:	d001      	beq.n	80005ce <SystemClock_Config+0xda>
  {
    Error_Handler();
 80005ca:	f000 f941 	bl	8000850 <Error_Handler>
  }
}
 80005ce:	46c0      	nop			; (mov r8, r8)
 80005d0:	46bd      	mov	sp, r7
 80005d2:	b01a      	add	sp, #104	; 0x68
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	46c0      	nop			; (mov r8, r8)
 80005d8:	40007000 	.word	0x40007000
 80005dc:	ffffe7ff 	.word	0xffffe7ff

080005e0 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005e6:	003b      	movs	r3, r7
 80005e8:	0018      	movs	r0, r3
 80005ea:	2308      	movs	r3, #8
 80005ec:	001a      	movs	r2, r3
 80005ee:	2100      	movs	r1, #0
 80005f0:	f002 fa08 	bl	8002a04 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80005f4:	4b30      	ldr	r3, [pc, #192]	; (80006b8 <MX_ADC_Init+0xd8>)
 80005f6:	4a31      	ldr	r2, [pc, #196]	; (80006bc <MX_ADC_Init+0xdc>)
 80005f8:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 80005fa:	4b2f      	ldr	r3, [pc, #188]	; (80006b8 <MX_ADC_Init+0xd8>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8000600:	4b2d      	ldr	r3, [pc, #180]	; (80006b8 <MX_ADC_Init+0xd8>)
 8000602:	22c0      	movs	r2, #192	; 0xc0
 8000604:	0612      	lsls	r2, r2, #24
 8000606:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000608:	4b2b      	ldr	r3, [pc, #172]	; (80006b8 <MX_ADC_Init+0xd8>)
 800060a:	2200      	movs	r2, #0
 800060c:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800060e:	4b2a      	ldr	r3, [pc, #168]	; (80006b8 <MX_ADC_Init+0xd8>)
 8000610:	2200      	movs	r2, #0
 8000612:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000614:	4b28      	ldr	r3, [pc, #160]	; (80006b8 <MX_ADC_Init+0xd8>)
 8000616:	2201      	movs	r2, #1
 8000618:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800061a:	4b27      	ldr	r3, [pc, #156]	; (80006b8 <MX_ADC_Init+0xd8>)
 800061c:	2200      	movs	r2, #0
 800061e:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000620:	4b25      	ldr	r3, [pc, #148]	; (80006b8 <MX_ADC_Init+0xd8>)
 8000622:	2220      	movs	r2, #32
 8000624:	2100      	movs	r1, #0
 8000626:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000628:	4b23      	ldr	r3, [pc, #140]	; (80006b8 <MX_ADC_Init+0xd8>)
 800062a:	2221      	movs	r2, #33	; 0x21
 800062c:	2100      	movs	r1, #0
 800062e:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000630:	4b21      	ldr	r3, [pc, #132]	; (80006b8 <MX_ADC_Init+0xd8>)
 8000632:	2200      	movs	r2, #0
 8000634:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000636:	4b20      	ldr	r3, [pc, #128]	; (80006b8 <MX_ADC_Init+0xd8>)
 8000638:	22c2      	movs	r2, #194	; 0xc2
 800063a:	32ff      	adds	r2, #255	; 0xff
 800063c:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 800063e:	4b1e      	ldr	r3, [pc, #120]	; (80006b8 <MX_ADC_Init+0xd8>)
 8000640:	222c      	movs	r2, #44	; 0x2c
 8000642:	2100      	movs	r1, #0
 8000644:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000646:	4b1c      	ldr	r3, [pc, #112]	; (80006b8 <MX_ADC_Init+0xd8>)
 8000648:	2204      	movs	r2, #4
 800064a:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800064c:	4b1a      	ldr	r3, [pc, #104]	; (80006b8 <MX_ADC_Init+0xd8>)
 800064e:	2200      	movs	r2, #0
 8000650:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000652:	4b19      	ldr	r3, [pc, #100]	; (80006b8 <MX_ADC_Init+0xd8>)
 8000654:	2200      	movs	r2, #0
 8000656:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = ENABLE;
 8000658:	4b17      	ldr	r3, [pc, #92]	; (80006b8 <MX_ADC_Init+0xd8>)
 800065a:	2201      	movs	r2, #1
 800065c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800065e:	4b16      	ldr	r3, [pc, #88]	; (80006b8 <MX_ADC_Init+0xd8>)
 8000660:	2200      	movs	r2, #0
 8000662:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000664:	4b14      	ldr	r3, [pc, #80]	; (80006b8 <MX_ADC_Init+0xd8>)
 8000666:	0018      	movs	r0, r3
 8000668:	f000 fa1e 	bl	8000aa8 <HAL_ADC_Init>
 800066c:	1e03      	subs	r3, r0, #0
 800066e:	d001      	beq.n	8000674 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8000670:	f000 f8ee 	bl	8000850 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000674:	003b      	movs	r3, r7
 8000676:	2201      	movs	r2, #1
 8000678:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800067a:	003b      	movs	r3, r7
 800067c:	2280      	movs	r2, #128	; 0x80
 800067e:	0152      	lsls	r2, r2, #5
 8000680:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000682:	003a      	movs	r2, r7
 8000684:	4b0c      	ldr	r3, [pc, #48]	; (80006b8 <MX_ADC_Init+0xd8>)
 8000686:	0011      	movs	r1, r2
 8000688:	0018      	movs	r0, r3
 800068a:	f000 fb81 	bl	8000d90 <HAL_ADC_ConfigChannel>
 800068e:	1e03      	subs	r3, r0, #0
 8000690:	d001      	beq.n	8000696 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8000692:	f000 f8dd 	bl	8000850 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000696:	003b      	movs	r3, r7
 8000698:	4a09      	ldr	r2, [pc, #36]	; (80006c0 <MX_ADC_Init+0xe0>)
 800069a:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800069c:	003a      	movs	r2, r7
 800069e:	4b06      	ldr	r3, [pc, #24]	; (80006b8 <MX_ADC_Init+0xd8>)
 80006a0:	0011      	movs	r1, r2
 80006a2:	0018      	movs	r0, r3
 80006a4:	f000 fb74 	bl	8000d90 <HAL_ADC_ConfigChannel>
 80006a8:	1e03      	subs	r3, r0, #0
 80006aa:	d001      	beq.n	80006b0 <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 80006ac:	f000 f8d0 	bl	8000850 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80006b0:	46c0      	nop			; (mov r8, r8)
 80006b2:	46bd      	mov	sp, r7
 80006b4:	b002      	add	sp, #8
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	200000ac 	.word	0x200000ac
 80006bc:	40012400 	.word	0x40012400
 80006c0:	04000002 	.word	0x04000002

080006c4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006c8:	4b14      	ldr	r3, [pc, #80]	; (800071c <MX_USART2_UART_Init+0x58>)
 80006ca:	4a15      	ldr	r2, [pc, #84]	; (8000720 <MX_USART2_UART_Init+0x5c>)
 80006cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006ce:	4b13      	ldr	r3, [pc, #76]	; (800071c <MX_USART2_UART_Init+0x58>)
 80006d0:	22e1      	movs	r2, #225	; 0xe1
 80006d2:	0252      	lsls	r2, r2, #9
 80006d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006d6:	4b11      	ldr	r3, [pc, #68]	; (800071c <MX_USART2_UART_Init+0x58>)
 80006d8:	2200      	movs	r2, #0
 80006da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006dc:	4b0f      	ldr	r3, [pc, #60]	; (800071c <MX_USART2_UART_Init+0x58>)
 80006de:	2200      	movs	r2, #0
 80006e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006e2:	4b0e      	ldr	r3, [pc, #56]	; (800071c <MX_USART2_UART_Init+0x58>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006e8:	4b0c      	ldr	r3, [pc, #48]	; (800071c <MX_USART2_UART_Init+0x58>)
 80006ea:	220c      	movs	r2, #12
 80006ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ee:	4b0b      	ldr	r3, [pc, #44]	; (800071c <MX_USART2_UART_Init+0x58>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006f4:	4b09      	ldr	r3, [pc, #36]	; (800071c <MX_USART2_UART_Init+0x58>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006fa:	4b08      	ldr	r3, [pc, #32]	; (800071c <MX_USART2_UART_Init+0x58>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000700:	4b06      	ldr	r3, [pc, #24]	; (800071c <MX_USART2_UART_Init+0x58>)
 8000702:	2200      	movs	r2, #0
 8000704:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000706:	4b05      	ldr	r3, [pc, #20]	; (800071c <MX_USART2_UART_Init+0x58>)
 8000708:	0018      	movs	r0, r3
 800070a:	f001 fceb 	bl	80020e4 <HAL_UART_Init>
 800070e:	1e03      	subs	r3, r0, #0
 8000710:	d001      	beq.n	8000716 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000712:	f000 f89d 	bl	8000850 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000716:	46c0      	nop			; (mov r8, r8)
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	20000028 	.word	0x20000028
 8000720:	40004400 	.word	0x40004400

08000724 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b088      	sub	sp, #32
 8000728:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800072a:	230c      	movs	r3, #12
 800072c:	18fb      	adds	r3, r7, r3
 800072e:	0018      	movs	r0, r3
 8000730:	2314      	movs	r3, #20
 8000732:	001a      	movs	r2, r3
 8000734:	2100      	movs	r1, #0
 8000736:	f002 f965 	bl	8002a04 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800073a:	4b41      	ldr	r3, [pc, #260]	; (8000840 <MX_GPIO_Init+0x11c>)
 800073c:	4a40      	ldr	r2, [pc, #256]	; (8000840 <MX_GPIO_Init+0x11c>)
 800073e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000740:	2104      	movs	r1, #4
 8000742:	430a      	orrs	r2, r1
 8000744:	62da      	str	r2, [r3, #44]	; 0x2c
 8000746:	4b3e      	ldr	r3, [pc, #248]	; (8000840 <MX_GPIO_Init+0x11c>)
 8000748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800074a:	2204      	movs	r2, #4
 800074c:	4013      	ands	r3, r2
 800074e:	60bb      	str	r3, [r7, #8]
 8000750:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000752:	4b3b      	ldr	r3, [pc, #236]	; (8000840 <MX_GPIO_Init+0x11c>)
 8000754:	4a3a      	ldr	r2, [pc, #232]	; (8000840 <MX_GPIO_Init+0x11c>)
 8000756:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000758:	2101      	movs	r1, #1
 800075a:	430a      	orrs	r2, r1
 800075c:	62da      	str	r2, [r3, #44]	; 0x2c
 800075e:	4b38      	ldr	r3, [pc, #224]	; (8000840 <MX_GPIO_Init+0x11c>)
 8000760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000762:	2201      	movs	r2, #1
 8000764:	4013      	ands	r3, r2
 8000766:	607b      	str	r3, [r7, #4]
 8000768:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800076a:	4b35      	ldr	r3, [pc, #212]	; (8000840 <MX_GPIO_Init+0x11c>)
 800076c:	4a34      	ldr	r2, [pc, #208]	; (8000840 <MX_GPIO_Init+0x11c>)
 800076e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000770:	2102      	movs	r1, #2
 8000772:	430a      	orrs	r2, r1
 8000774:	62da      	str	r2, [r3, #44]	; 0x2c
 8000776:	4b32      	ldr	r3, [pc, #200]	; (8000840 <MX_GPIO_Init+0x11c>)
 8000778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800077a:	2202      	movs	r2, #2
 800077c:	4013      	ands	r3, r2
 800077e:	603b      	str	r3, [r7, #0]
 8000780:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 8000782:	23c0      	movs	r3, #192	; 0xc0
 8000784:	021b      	lsls	r3, r3, #8
 8000786:	482f      	ldr	r0, [pc, #188]	; (8000844 <MX_GPIO_Init+0x120>)
 8000788:	2200      	movs	r2, #0
 800078a:	0019      	movs	r1, r3
 800078c:	f000 fdd0 	bl	8001330 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, V5R_Pin|V4R_Pin|V3R_Pin|V2R_Pin
 8000790:	492d      	ldr	r1, [pc, #180]	; (8000848 <MX_GPIO_Init+0x124>)
 8000792:	23a0      	movs	r3, #160	; 0xa0
 8000794:	05db      	lsls	r3, r3, #23
 8000796:	2200      	movs	r2, #0
 8000798:	0018      	movs	r0, r3
 800079a:	f000 fdc9 	bl	8001330 <HAL_GPIO_WritePin>
                          |CS_Pin|SCLK_Pin|SDIO_Pin|VA_Pin
                          |VB_Pin|SV2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, V1R_Pin|SV1_Pin|V4L_Pin|V3L_Pin
 800079e:	4b2b      	ldr	r3, [pc, #172]	; (800084c <MX_GPIO_Init+0x128>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	21fb      	movs	r1, #251	; 0xfb
 80007a4:	0018      	movs	r0, r3
 80007a6:	f000 fdc3 	bl	8001330 <HAL_GPIO_WritePin>
                          |V1L_Pin|V2L_Pin|V5L_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 80007aa:	230c      	movs	r3, #12
 80007ac:	18fb      	adds	r3, r7, r3
 80007ae:	22c0      	movs	r2, #192	; 0xc0
 80007b0:	0212      	lsls	r2, r2, #8
 80007b2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b4:	230c      	movs	r3, #12
 80007b6:	18fb      	adds	r3, r7, r3
 80007b8:	2201      	movs	r2, #1
 80007ba:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007bc:	230c      	movs	r3, #12
 80007be:	18fb      	adds	r3, r7, r3
 80007c0:	2200      	movs	r2, #0
 80007c2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c4:	230c      	movs	r3, #12
 80007c6:	18fb      	adds	r3, r7, r3
 80007c8:	2200      	movs	r2, #0
 80007ca:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007cc:	230c      	movs	r3, #12
 80007ce:	18fb      	adds	r3, r7, r3
 80007d0:	4a1c      	ldr	r2, [pc, #112]	; (8000844 <MX_GPIO_Init+0x120>)
 80007d2:	0019      	movs	r1, r3
 80007d4:	0010      	movs	r0, r2
 80007d6:	f000 fc35 	bl	8001044 <HAL_GPIO_Init>

  /*Configure GPIO pins : V5R_Pin V4R_Pin V3R_Pin V2R_Pin
                           CS_Pin SCLK_Pin SDIO_Pin VA_Pin
                           VB_Pin SV2_Pin */
  GPIO_InitStruct.Pin = V5R_Pin|V4R_Pin|V3R_Pin|V2R_Pin
 80007da:	230c      	movs	r3, #12
 80007dc:	18fb      	adds	r3, r7, r3
 80007de:	4a1a      	ldr	r2, [pc, #104]	; (8000848 <MX_GPIO_Init+0x124>)
 80007e0:	601a      	str	r2, [r3, #0]
                          |CS_Pin|SCLK_Pin|SDIO_Pin|VA_Pin
                          |VB_Pin|SV2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e2:	230c      	movs	r3, #12
 80007e4:	18fb      	adds	r3, r7, r3
 80007e6:	2201      	movs	r2, #1
 80007e8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ea:	230c      	movs	r3, #12
 80007ec:	18fb      	adds	r3, r7, r3
 80007ee:	2200      	movs	r2, #0
 80007f0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f2:	230c      	movs	r3, #12
 80007f4:	18fb      	adds	r3, r7, r3
 80007f6:	2200      	movs	r2, #0
 80007f8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007fa:	230c      	movs	r3, #12
 80007fc:	18fa      	adds	r2, r7, r3
 80007fe:	23a0      	movs	r3, #160	; 0xa0
 8000800:	05db      	lsls	r3, r3, #23
 8000802:	0011      	movs	r1, r2
 8000804:	0018      	movs	r0, r3
 8000806:	f000 fc1d 	bl	8001044 <HAL_GPIO_Init>

  /*Configure GPIO pins : V1R_Pin SV1_Pin V4L_Pin V3L_Pin
                           V1L_Pin V2L_Pin V5L_Pin */
  GPIO_InitStruct.Pin = V1R_Pin|SV1_Pin|V4L_Pin|V3L_Pin
 800080a:	230c      	movs	r3, #12
 800080c:	18fb      	adds	r3, r7, r3
 800080e:	22fb      	movs	r2, #251	; 0xfb
 8000810:	601a      	str	r2, [r3, #0]
                          |V1L_Pin|V2L_Pin|V5L_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000812:	230c      	movs	r3, #12
 8000814:	18fb      	adds	r3, r7, r3
 8000816:	2201      	movs	r2, #1
 8000818:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081a:	230c      	movs	r3, #12
 800081c:	18fb      	adds	r3, r7, r3
 800081e:	2200      	movs	r2, #0
 8000820:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000822:	230c      	movs	r3, #12
 8000824:	18fb      	adds	r3, r7, r3
 8000826:	2200      	movs	r2, #0
 8000828:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800082a:	230c      	movs	r3, #12
 800082c:	18fb      	adds	r3, r7, r3
 800082e:	4a07      	ldr	r2, [pc, #28]	; (800084c <MX_GPIO_Init+0x128>)
 8000830:	0019      	movs	r1, r3
 8000832:	0010      	movs	r0, r2
 8000834:	f000 fc06 	bl	8001044 <HAL_GPIO_Init>

}
 8000838:	46c0      	nop			; (mov r8, r8)
 800083a:	46bd      	mov	sp, r7
 800083c:	b008      	add	sp, #32
 800083e:	bd80      	pop	{r7, pc}
 8000840:	40021000 	.word	0x40021000
 8000844:	50000800 	.word	0x50000800
 8000848:	00009ff0 	.word	0x00009ff0
 800084c:	50000400 	.word	0x50000400

08000850 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000854:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000856:	e7fe      	b.n	8000856 <Error_Handler+0x6>

08000858 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800085c:	4b07      	ldr	r3, [pc, #28]	; (800087c <HAL_MspInit+0x24>)
 800085e:	4a07      	ldr	r2, [pc, #28]	; (800087c <HAL_MspInit+0x24>)
 8000860:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000862:	2101      	movs	r1, #1
 8000864:	430a      	orrs	r2, r1
 8000866:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000868:	4b04      	ldr	r3, [pc, #16]	; (800087c <HAL_MspInit+0x24>)
 800086a:	4a04      	ldr	r2, [pc, #16]	; (800087c <HAL_MspInit+0x24>)
 800086c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800086e:	2180      	movs	r1, #128	; 0x80
 8000870:	0549      	lsls	r1, r1, #21
 8000872:	430a      	orrs	r2, r1
 8000874:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000876:	46c0      	nop			; (mov r8, r8)
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	40021000 	.word	0x40021000

08000880 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b088      	sub	sp, #32
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000888:	230c      	movs	r3, #12
 800088a:	18fb      	adds	r3, r7, r3
 800088c:	0018      	movs	r0, r3
 800088e:	2314      	movs	r3, #20
 8000890:	001a      	movs	r2, r3
 8000892:	2100      	movs	r1, #0
 8000894:	f002 f8b6 	bl	8002a04 <memset>
  if(hadc->Instance==ADC1)
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	4a16      	ldr	r2, [pc, #88]	; (80008f8 <HAL_ADC_MspInit+0x78>)
 800089e:	4293      	cmp	r3, r2
 80008a0:	d126      	bne.n	80008f0 <HAL_ADC_MspInit+0x70>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80008a2:	4b16      	ldr	r3, [pc, #88]	; (80008fc <HAL_ADC_MspInit+0x7c>)
 80008a4:	4a15      	ldr	r2, [pc, #84]	; (80008fc <HAL_ADC_MspInit+0x7c>)
 80008a6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80008a8:	2180      	movs	r1, #128	; 0x80
 80008aa:	0089      	lsls	r1, r1, #2
 80008ac:	430a      	orrs	r2, r1
 80008ae:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b0:	4b12      	ldr	r3, [pc, #72]	; (80008fc <HAL_ADC_MspInit+0x7c>)
 80008b2:	4a12      	ldr	r2, [pc, #72]	; (80008fc <HAL_ADC_MspInit+0x7c>)
 80008b4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80008b6:	2101      	movs	r1, #1
 80008b8:	430a      	orrs	r2, r1
 80008ba:	62da      	str	r2, [r3, #44]	; 0x2c
 80008bc:	4b0f      	ldr	r3, [pc, #60]	; (80008fc <HAL_ADC_MspInit+0x7c>)
 80008be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008c0:	2201      	movs	r2, #1
 80008c2:	4013      	ands	r3, r2
 80008c4:	60bb      	str	r3, [r7, #8]
 80008c6:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    PA1     ------> ADC_IN1
    */
    GPIO_InitStruct.Pin = ADC1_Pin|ADC2_Pin;
 80008c8:	230c      	movs	r3, #12
 80008ca:	18fb      	adds	r3, r7, r3
 80008cc:	2203      	movs	r2, #3
 80008ce:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008d0:	230c      	movs	r3, #12
 80008d2:	18fb      	adds	r3, r7, r3
 80008d4:	2203      	movs	r2, #3
 80008d6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d8:	230c      	movs	r3, #12
 80008da:	18fb      	adds	r3, r7, r3
 80008dc:	2200      	movs	r2, #0
 80008de:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008e0:	230c      	movs	r3, #12
 80008e2:	18fa      	adds	r2, r7, r3
 80008e4:	23a0      	movs	r3, #160	; 0xa0
 80008e6:	05db      	lsls	r3, r3, #23
 80008e8:	0011      	movs	r1, r2
 80008ea:	0018      	movs	r0, r3
 80008ec:	f000 fbaa 	bl	8001044 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80008f0:	46c0      	nop			; (mov r8, r8)
 80008f2:	46bd      	mov	sp, r7
 80008f4:	b008      	add	sp, #32
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	40012400 	.word	0x40012400
 80008fc:	40021000 	.word	0x40021000

08000900 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b088      	sub	sp, #32
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000908:	230c      	movs	r3, #12
 800090a:	18fb      	adds	r3, r7, r3
 800090c:	0018      	movs	r0, r3
 800090e:	2314      	movs	r3, #20
 8000910:	001a      	movs	r2, r3
 8000912:	2100      	movs	r1, #0
 8000914:	f002 f876 	bl	8002a04 <memset>
  if(huart->Instance==USART2)
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	4a1a      	ldr	r2, [pc, #104]	; (8000988 <HAL_UART_MspInit+0x88>)
 800091e:	4293      	cmp	r3, r2
 8000920:	d12e      	bne.n	8000980 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000922:	4b1a      	ldr	r3, [pc, #104]	; (800098c <HAL_UART_MspInit+0x8c>)
 8000924:	4a19      	ldr	r2, [pc, #100]	; (800098c <HAL_UART_MspInit+0x8c>)
 8000926:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8000928:	2180      	movs	r1, #128	; 0x80
 800092a:	0289      	lsls	r1, r1, #10
 800092c:	430a      	orrs	r2, r1
 800092e:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000930:	4b16      	ldr	r3, [pc, #88]	; (800098c <HAL_UART_MspInit+0x8c>)
 8000932:	4a16      	ldr	r2, [pc, #88]	; (800098c <HAL_UART_MspInit+0x8c>)
 8000934:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000936:	2101      	movs	r1, #1
 8000938:	430a      	orrs	r2, r1
 800093a:	62da      	str	r2, [r3, #44]	; 0x2c
 800093c:	4b13      	ldr	r3, [pc, #76]	; (800098c <HAL_UART_MspInit+0x8c>)
 800093e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000940:	2201      	movs	r2, #1
 8000942:	4013      	ands	r3, r2
 8000944:	60bb      	str	r3, [r7, #8]
 8000946:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000948:	230c      	movs	r3, #12
 800094a:	18fb      	adds	r3, r7, r3
 800094c:	220c      	movs	r2, #12
 800094e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000950:	230c      	movs	r3, #12
 8000952:	18fb      	adds	r3, r7, r3
 8000954:	2202      	movs	r2, #2
 8000956:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000958:	230c      	movs	r3, #12
 800095a:	18fb      	adds	r3, r7, r3
 800095c:	2200      	movs	r2, #0
 800095e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000960:	230c      	movs	r3, #12
 8000962:	18fb      	adds	r3, r7, r3
 8000964:	2203      	movs	r2, #3
 8000966:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8000968:	230c      	movs	r3, #12
 800096a:	18fb      	adds	r3, r7, r3
 800096c:	2204      	movs	r2, #4
 800096e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000970:	230c      	movs	r3, #12
 8000972:	18fa      	adds	r2, r7, r3
 8000974:	23a0      	movs	r3, #160	; 0xa0
 8000976:	05db      	lsls	r3, r3, #23
 8000978:	0011      	movs	r1, r2
 800097a:	0018      	movs	r0, r3
 800097c:	f000 fb62 	bl	8001044 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000980:	46c0      	nop			; (mov r8, r8)
 8000982:	46bd      	mov	sp, r7
 8000984:	b008      	add	sp, #32
 8000986:	bd80      	pop	{r7, pc}
 8000988:	40004400 	.word	0x40004400
 800098c:	40021000 	.word	0x40021000

08000990 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000994:	e7fe      	b.n	8000994 <NMI_Handler+0x4>

08000996 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000996:	b580      	push	{r7, lr}
 8000998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800099a:	e7fe      	b.n	800099a <HardFault_Handler+0x4>

0800099c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80009a0:	46c0      	nop			; (mov r8, r8)
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}

080009a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009a6:	b580      	push	{r7, lr}
 80009a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009aa:	46c0      	nop			; (mov r8, r8)
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}

080009b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009b4:	f000 f85c 	bl	8000a70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009b8:	46c0      	nop			; (mov r8, r8)
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}

080009be <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009be:	b580      	push	{r7, lr}
 80009c0:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009c2:	46c0      	nop			; (mov r8, r8)
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}

080009c8 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80009ce:	1dfb      	adds	r3, r7, #7
 80009d0:	2200      	movs	r2, #0
 80009d2:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80009d4:	4b0b      	ldr	r3, [pc, #44]	; (8000a04 <HAL_Init+0x3c>)
 80009d6:	4a0b      	ldr	r2, [pc, #44]	; (8000a04 <HAL_Init+0x3c>)
 80009d8:	6812      	ldr	r2, [r2, #0]
 80009da:	2140      	movs	r1, #64	; 0x40
 80009dc:	430a      	orrs	r2, r1
 80009de:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009e0:	2000      	movs	r0, #0
 80009e2:	f000 f811 	bl	8000a08 <HAL_InitTick>
 80009e6:	1e03      	subs	r3, r0, #0
 80009e8:	d003      	beq.n	80009f2 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80009ea:	1dfb      	adds	r3, r7, #7
 80009ec:	2201      	movs	r2, #1
 80009ee:	701a      	strb	r2, [r3, #0]
 80009f0:	e001      	b.n	80009f6 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80009f2:	f7ff ff31 	bl	8000858 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80009f6:	1dfb      	adds	r3, r7, #7
 80009f8:	781b      	ldrb	r3, [r3, #0]
}
 80009fa:	0018      	movs	r0, r3
 80009fc:	46bd      	mov	sp, r7
 80009fe:	b002      	add	sp, #8
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	46c0      	nop			; (mov r8, r8)
 8000a04:	40022000 	.word	0x40022000

08000a08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a08:	b590      	push	{r4, r7, lr}
 8000a0a:	b083      	sub	sp, #12
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a10:	4b14      	ldr	r3, [pc, #80]	; (8000a64 <HAL_InitTick+0x5c>)
 8000a12:	681c      	ldr	r4, [r3, #0]
 8000a14:	4b14      	ldr	r3, [pc, #80]	; (8000a68 <HAL_InitTick+0x60>)
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	0019      	movs	r1, r3
 8000a1a:	23fa      	movs	r3, #250	; 0xfa
 8000a1c:	0098      	lsls	r0, r3, #2
 8000a1e:	f7ff fb73 	bl	8000108 <__udivsi3>
 8000a22:	0003      	movs	r3, r0
 8000a24:	0019      	movs	r1, r3
 8000a26:	0020      	movs	r0, r4
 8000a28:	f7ff fb6e 	bl	8000108 <__udivsi3>
 8000a2c:	0003      	movs	r3, r0
 8000a2e:	0018      	movs	r0, r3
 8000a30:	f000 fafa 	bl	8001028 <HAL_SYSTICK_Config>
 8000a34:	1e03      	subs	r3, r0, #0
 8000a36:	d001      	beq.n	8000a3c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000a38:	2301      	movs	r3, #1
 8000a3a:	e00f      	b.n	8000a5c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	2b03      	cmp	r3, #3
 8000a40:	d80b      	bhi.n	8000a5a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a42:	6879      	ldr	r1, [r7, #4]
 8000a44:	2301      	movs	r3, #1
 8000a46:	425b      	negs	r3, r3
 8000a48:	2200      	movs	r2, #0
 8000a4a:	0018      	movs	r0, r3
 8000a4c:	f000 fad6 	bl	8000ffc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a50:	4b06      	ldr	r3, [pc, #24]	; (8000a6c <HAL_InitTick+0x64>)
 8000a52:	687a      	ldr	r2, [r7, #4]
 8000a54:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a56:	2300      	movs	r3, #0
 8000a58:	e000      	b.n	8000a5c <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000a5a:	2301      	movs	r3, #1
}
 8000a5c:	0018      	movs	r0, r3
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	b003      	add	sp, #12
 8000a62:	bd90      	pop	{r4, r7, pc}
 8000a64:	20000000 	.word	0x20000000
 8000a68:	20000008 	.word	0x20000008
 8000a6c:	20000004 	.word	0x20000004

08000a70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a74:	4b05      	ldr	r3, [pc, #20]	; (8000a8c <HAL_IncTick+0x1c>)
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	001a      	movs	r2, r3
 8000a7a:	4b05      	ldr	r3, [pc, #20]	; (8000a90 <HAL_IncTick+0x20>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	18d2      	adds	r2, r2, r3
 8000a80:	4b03      	ldr	r3, [pc, #12]	; (8000a90 <HAL_IncTick+0x20>)
 8000a82:	601a      	str	r2, [r3, #0]
}
 8000a84:	46c0      	nop			; (mov r8, r8)
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	46c0      	nop			; (mov r8, r8)
 8000a8c:	20000008 	.word	0x20000008
 8000a90:	20000108 	.word	0x20000108

08000a94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
  return uwTick;
 8000a98:	4b02      	ldr	r3, [pc, #8]	; (8000aa4 <HAL_GetTick+0x10>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
}
 8000a9c:	0018      	movs	r0, r3
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	46c0      	nop			; (mov r8, r8)
 8000aa4:	20000108 	.word	0x20000108

08000aa8 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000aa8:	b590      	push	{r4, r7, lr}
 8000aaa:	b083      	sub	sp, #12
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d101      	bne.n	8000aba <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	e159      	b.n	8000d6e <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d10a      	bne.n	8000ad8 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	2250      	movs	r2, #80	; 0x50
 8000acc:	2100      	movs	r1, #0
 8000ace:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	0018      	movs	r0, r3
 8000ad4:	f7ff fed4 	bl	8000880 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000adc:	2210      	movs	r2, #16
 8000ade:	4013      	ands	r3, r2
 8000ae0:	2b10      	cmp	r3, #16
 8000ae2:	d005      	beq.n	8000af0 <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	689b      	ldr	r3, [r3, #8]
 8000aea:	2204      	movs	r2, #4
 8000aec:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8000aee:	d00b      	beq.n	8000b08 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000af4:	2210      	movs	r2, #16
 8000af6:	431a      	orrs	r2, r3
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	2250      	movs	r2, #80	; 0x50
 8000b00:	2100      	movs	r1, #0
 8000b02:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8000b04:	2301      	movs	r3, #1
 8000b06:	e132      	b.n	8000d6e <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b0c:	4a9a      	ldr	r2, [pc, #616]	; (8000d78 <HAL_ADC_Init+0x2d0>)
 8000b0e:	4013      	ands	r3, r2
 8000b10:	2202      	movs	r2, #2
 8000b12:	431a      	orrs	r2, r3
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	689b      	ldr	r3, [r3, #8]
 8000b1e:	2203      	movs	r2, #3
 8000b20:	4013      	ands	r3, r2
 8000b22:	2b01      	cmp	r3, #1
 8000b24:	d108      	bne.n	8000b38 <HAL_ADC_Init+0x90>
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	4013      	ands	r3, r2
 8000b30:	2b01      	cmp	r3, #1
 8000b32:	d101      	bne.n	8000b38 <HAL_ADC_Init+0x90>
 8000b34:	2301      	movs	r3, #1
 8000b36:	e000      	b.n	8000b3a <HAL_ADC_Init+0x92>
 8000b38:	2300      	movs	r3, #0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d149      	bne.n	8000bd2 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	685a      	ldr	r2, [r3, #4]
 8000b42:	23c0      	movs	r3, #192	; 0xc0
 8000b44:	061b      	lsls	r3, r3, #24
 8000b46:	429a      	cmp	r2, r3
 8000b48:	d00b      	beq.n	8000b62 <HAL_ADC_Init+0xba>
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	685a      	ldr	r2, [r3, #4]
 8000b4e:	2380      	movs	r3, #128	; 0x80
 8000b50:	05db      	lsls	r3, r3, #23
 8000b52:	429a      	cmp	r2, r3
 8000b54:	d005      	beq.n	8000b62 <HAL_ADC_Init+0xba>
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	685a      	ldr	r2, [r3, #4]
 8000b5a:	2380      	movs	r3, #128	; 0x80
 8000b5c:	061b      	lsls	r3, r3, #24
 8000b5e:	429a      	cmp	r2, r3
 8000b60:	d111      	bne.n	8000b86 <HAL_ADC_Init+0xde>
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	687a      	ldr	r2, [r7, #4]
 8000b68:	6812      	ldr	r2, [r2, #0]
 8000b6a:	6912      	ldr	r2, [r2, #16]
 8000b6c:	0092      	lsls	r2, r2, #2
 8000b6e:	0892      	lsrs	r2, r2, #2
 8000b70:	611a      	str	r2, [r3, #16]
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	687a      	ldr	r2, [r7, #4]
 8000b78:	6812      	ldr	r2, [r2, #0]
 8000b7a:	6911      	ldr	r1, [r2, #16]
 8000b7c:	687a      	ldr	r2, [r7, #4]
 8000b7e:	6852      	ldr	r2, [r2, #4]
 8000b80:	430a      	orrs	r2, r1
 8000b82:	611a      	str	r2, [r3, #16]
 8000b84:	e014      	b.n	8000bb0 <HAL_ADC_Init+0x108>
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	687a      	ldr	r2, [r7, #4]
 8000b8c:	6812      	ldr	r2, [r2, #0]
 8000b8e:	6912      	ldr	r2, [r2, #16]
 8000b90:	0092      	lsls	r2, r2, #2
 8000b92:	0892      	lsrs	r2, r2, #2
 8000b94:	611a      	str	r2, [r3, #16]
 8000b96:	4b79      	ldr	r3, [pc, #484]	; (8000d7c <HAL_ADC_Init+0x2d4>)
 8000b98:	4a78      	ldr	r2, [pc, #480]	; (8000d7c <HAL_ADC_Init+0x2d4>)
 8000b9a:	6812      	ldr	r2, [r2, #0]
 8000b9c:	4978      	ldr	r1, [pc, #480]	; (8000d80 <HAL_ADC_Init+0x2d8>)
 8000b9e:	400a      	ands	r2, r1
 8000ba0:	601a      	str	r2, [r3, #0]
 8000ba2:	4a76      	ldr	r2, [pc, #472]	; (8000d7c <HAL_ADC_Init+0x2d4>)
 8000ba4:	4b75      	ldr	r3, [pc, #468]	; (8000d7c <HAL_ADC_Init+0x2d4>)
 8000ba6:	6819      	ldr	r1, [r3, #0]
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	685b      	ldr	r3, [r3, #4]
 8000bac:	430b      	orrs	r3, r1
 8000bae:	6013      	str	r3, [r2, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	687a      	ldr	r2, [r7, #4]
 8000bb6:	6812      	ldr	r2, [r2, #0]
 8000bb8:	68d2      	ldr	r2, [r2, #12]
 8000bba:	2118      	movs	r1, #24
 8000bbc:	438a      	bics	r2, r1
 8000bbe:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	687a      	ldr	r2, [r7, #4]
 8000bc6:	6812      	ldr	r2, [r2, #0]
 8000bc8:	68d1      	ldr	r1, [r2, #12]
 8000bca:	687a      	ldr	r2, [r7, #4]
 8000bcc:	6892      	ldr	r2, [r2, #8]
 8000bce:	430a      	orrs	r2, r1
 8000bd0:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8000bd2:	4b6a      	ldr	r3, [pc, #424]	; (8000d7c <HAL_ADC_Init+0x2d4>)
 8000bd4:	4a69      	ldr	r2, [pc, #420]	; (8000d7c <HAL_ADC_Init+0x2d4>)
 8000bd6:	6812      	ldr	r2, [r2, #0]
 8000bd8:	496a      	ldr	r1, [pc, #424]	; (8000d84 <HAL_ADC_Init+0x2dc>)
 8000bda:	400a      	ands	r2, r1
 8000bdc:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 8000bde:	4a67      	ldr	r2, [pc, #412]	; (8000d7c <HAL_ADC_Init+0x2d4>)
 8000be0:	4b66      	ldr	r3, [pc, #408]	; (8000d7c <HAL_ADC_Init+0x2d4>)
 8000be2:	6819      	ldr	r1, [r3, #0]
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000be8:	065b      	lsls	r3, r3, #25
 8000bea:	430b      	orrs	r3, r1
 8000bec:	6013      	str	r3, [r2, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	689a      	ldr	r2, [r3, #8]
 8000bf4:	2380      	movs	r3, #128	; 0x80
 8000bf6:	055b      	lsls	r3, r3, #21
 8000bf8:	4013      	ands	r3, r2
 8000bfa:	d108      	bne.n	8000c0e <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	687a      	ldr	r2, [r7, #4]
 8000c02:	6812      	ldr	r2, [r2, #0]
 8000c04:	6892      	ldr	r2, [r2, #8]
 8000c06:	2180      	movs	r1, #128	; 0x80
 8000c08:	0549      	lsls	r1, r1, #21
 8000c0a:	430a      	orrs	r2, r1
 8000c0c:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	687a      	ldr	r2, [r7, #4]
 8000c14:	6812      	ldr	r2, [r2, #0]
 8000c16:	68d2      	ldr	r2, [r2, #12]
 8000c18:	495b      	ldr	r1, [pc, #364]	; (8000d88 <HAL_ADC_Init+0x2e0>)
 8000c1a:	400a      	ands	r2, r1
 8000c1c:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	687a      	ldr	r2, [r7, #4]
 8000c24:	6812      	ldr	r2, [r2, #0]
 8000c26:	68d1      	ldr	r1, [r2, #12]
 8000c28:	687a      	ldr	r2, [r7, #4]
 8000c2a:	68d0      	ldr	r0, [r2, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8000c2c:	687a      	ldr	r2, [r7, #4]
 8000c2e:	6912      	ldr	r2, [r2, #16]
 8000c30:	2a02      	cmp	r2, #2
 8000c32:	d101      	bne.n	8000c38 <HAL_ADC_Init+0x190>
 8000c34:	2204      	movs	r2, #4
 8000c36:	e000      	b.n	8000c3a <HAL_ADC_Init+0x192>
 8000c38:	2200      	movs	r2, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000c3a:	4310      	orrs	r0, r2
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000c3c:	687a      	ldr	r2, [r7, #4]
 8000c3e:	2420      	movs	r4, #32
 8000c40:	5d12      	ldrb	r2, [r2, r4]
 8000c42:	0352      	lsls	r2, r2, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8000c44:	4310      	orrs	r0, r2
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000c46:	687a      	ldr	r2, [r7, #4]
 8000c48:	242c      	movs	r4, #44	; 0x2c
 8000c4a:	5d12      	ldrb	r2, [r2, r4]
 8000c4c:	0052      	lsls	r2, r2, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000c4e:	4310      	orrs	r0, r2
                            hadc->Init.Overrun                               |
 8000c50:	687a      	ldr	r2, [r7, #4]
 8000c52:	6b12      	ldr	r2, [r2, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000c54:	4310      	orrs	r0, r2
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8000c56:	687a      	ldr	r2, [r7, #4]
 8000c58:	6992      	ldr	r2, [r2, #24]
 8000c5a:	0392      	lsls	r2, r2, #14
                            hadc->Init.Overrun                               |
 8000c5c:	4310      	orrs	r0, r2
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8000c5e:	687a      	ldr	r2, [r7, #4]
 8000c60:	69d2      	ldr	r2, [r2, #28]
 8000c62:	03d2      	lsls	r2, r2, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8000c64:	4302      	orrs	r2, r0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000c66:	430a      	orrs	r2, r1
 8000c68:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000c6e:	23c2      	movs	r3, #194	; 0xc2
 8000c70:	33ff      	adds	r3, #255	; 0xff
 8000c72:	429a      	cmp	r2, r3
 8000c74:	d00b      	beq.n	8000c8e <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	687a      	ldr	r2, [r7, #4]
 8000c7c:	6812      	ldr	r2, [r2, #0]
 8000c7e:	68d1      	ldr	r1, [r2, #12]
 8000c80:	687a      	ldr	r2, [r7, #4]
 8000c82:	6a50      	ldr	r0, [r2, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8000c84:	687a      	ldr	r2, [r7, #4]
 8000c86:	6a92      	ldr	r2, [r2, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8000c88:	4302      	orrs	r2, r0
 8000c8a:	430a      	orrs	r2, r1
 8000c8c:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	2221      	movs	r2, #33	; 0x21
 8000c92:	5c9b      	ldrb	r3, [r3, r2]
 8000c94:	2b01      	cmp	r3, #1
 8000c96:	d11a      	bne.n	8000cce <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	2220      	movs	r2, #32
 8000c9c:	5c9b      	ldrb	r3, [r3, r2]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d109      	bne.n	8000cb6 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	687a      	ldr	r2, [r7, #4]
 8000ca8:	6812      	ldr	r2, [r2, #0]
 8000caa:	68d2      	ldr	r2, [r2, #12]
 8000cac:	2180      	movs	r1, #128	; 0x80
 8000cae:	0249      	lsls	r1, r1, #9
 8000cb0:	430a      	orrs	r2, r1
 8000cb2:	60da      	str	r2, [r3, #12]
 8000cb4:	e00b      	b.n	8000cce <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000cba:	2220      	movs	r2, #32
 8000cbc:	431a      	orrs	r2, r3
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	431a      	orrs	r2, r3
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000cd2:	2b01      	cmp	r3, #1
 8000cd4:	d11f      	bne.n	8000d16 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	687a      	ldr	r2, [r7, #4]
 8000cdc:	6812      	ldr	r2, [r2, #0]
 8000cde:	6912      	ldr	r2, [r2, #16]
 8000ce0:	492a      	ldr	r1, [pc, #168]	; (8000d8c <HAL_ADC_Init+0x2e4>)
 8000ce2:	400a      	ands	r2, r1
 8000ce4:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	687a      	ldr	r2, [r7, #4]
 8000cec:	6812      	ldr	r2, [r2, #0]
 8000cee:	6911      	ldr	r1, [r2, #16]
 8000cf0:	687a      	ldr	r2, [r7, #4]
 8000cf2:	6c10      	ldr	r0, [r2, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 8000cf4:	687a      	ldr	r2, [r7, #4]
 8000cf6:	6c52      	ldr	r2, [r2, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8000cf8:	4310      	orrs	r0, r2
                               hadc->Init.Oversample.TriggeredMode );
 8000cfa:	687a      	ldr	r2, [r7, #4]
 8000cfc:	6c92      	ldr	r2, [r2, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 8000cfe:	4302      	orrs	r2, r0
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8000d00:	430a      	orrs	r2, r1
 8000d02:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	687a      	ldr	r2, [r7, #4]
 8000d0a:	6812      	ldr	r2, [r2, #0]
 8000d0c:	6912      	ldr	r2, [r2, #16]
 8000d0e:	2101      	movs	r1, #1
 8000d10:	430a      	orrs	r2, r1
 8000d12:	611a      	str	r2, [r3, #16]
 8000d14:	e00e      	b.n	8000d34 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	691b      	ldr	r3, [r3, #16]
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	4013      	ands	r3, r2
 8000d20:	2b01      	cmp	r3, #1
 8000d22:	d107      	bne.n	8000d34 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	687a      	ldr	r2, [r7, #4]
 8000d2a:	6812      	ldr	r2, [r2, #0]
 8000d2c:	6912      	ldr	r2, [r2, #16]
 8000d2e:	2101      	movs	r1, #1
 8000d30:	438a      	bics	r2, r1
 8000d32:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	687a      	ldr	r2, [r7, #4]
 8000d3a:	6812      	ldr	r2, [r2, #0]
 8000d3c:	6952      	ldr	r2, [r2, #20]
 8000d3e:	2107      	movs	r1, #7
 8000d40:	438a      	bics	r2, r1
 8000d42:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	687a      	ldr	r2, [r7, #4]
 8000d4a:	6812      	ldr	r2, [r2, #0]
 8000d4c:	6951      	ldr	r1, [r2, #20]
 8000d4e:	687a      	ldr	r2, [r7, #4]
 8000d50:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8000d52:	430a      	orrs	r2, r1
 8000d54:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	2200      	movs	r2, #0
 8000d5a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d60:	2203      	movs	r2, #3
 8000d62:	4393      	bics	r3, r2
 8000d64:	2201      	movs	r2, #1
 8000d66:	431a      	orrs	r2, r3
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8000d6c:	2300      	movs	r3, #0
}
 8000d6e:	0018      	movs	r0, r3
 8000d70:	46bd      	mov	sp, r7
 8000d72:	b003      	add	sp, #12
 8000d74:	bd90      	pop	{r4, r7, pc}
 8000d76:	46c0      	nop			; (mov r8, r8)
 8000d78:	fffffefd 	.word	0xfffffefd
 8000d7c:	40012708 	.word	0x40012708
 8000d80:	ffc3ffff 	.word	0xffc3ffff
 8000d84:	fdffffff 	.word	0xfdffffff
 8000d88:	fffe0219 	.word	0xfffe0219
 8000d8c:	fffffc03 	.word	0xfffffc03

08000d90 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
 8000d98:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	2250      	movs	r2, #80	; 0x50
 8000d9e:	5c9b      	ldrb	r3, [r3, r2]
 8000da0:	2b01      	cmp	r3, #1
 8000da2:	d101      	bne.n	8000da8 <HAL_ADC_ConfigChannel+0x18>
 8000da4:	2302      	movs	r3, #2
 8000da6:	e06c      	b.n	8000e82 <HAL_ADC_ConfigChannel+0xf2>
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	2250      	movs	r2, #80	; 0x50
 8000dac:	2101      	movs	r1, #1
 8000dae:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	689b      	ldr	r3, [r3, #8]
 8000db6:	2204      	movs	r2, #4
 8000db8:	4013      	ands	r3, r2
 8000dba:	d00b      	beq.n	8000dd4 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000dc0:	2220      	movs	r2, #32
 8000dc2:	431a      	orrs	r2, r3
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	2250      	movs	r2, #80	; 0x50
 8000dcc:	2100      	movs	r1, #0
 8000dce:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	e056      	b.n	8000e82 <HAL_ADC_ConfigChannel+0xf2>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	4a2c      	ldr	r2, [pc, #176]	; (8000e8c <HAL_ADC_ConfigChannel+0xfc>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d028      	beq.n	8000e30 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	687a      	ldr	r2, [r7, #4]
 8000de4:	6812      	ldr	r2, [r2, #0]
 8000de6:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8000de8:	683a      	ldr	r2, [r7, #0]
 8000dea:	6812      	ldr	r2, [r2, #0]
 8000dec:	0352      	lsls	r2, r2, #13
 8000dee:	0b52      	lsrs	r2, r2, #13
 8000df0:	430a      	orrs	r2, r1
 8000df2:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	681a      	ldr	r2, [r3, #0]
 8000df8:	2380      	movs	r3, #128	; 0x80
 8000dfa:	02db      	lsls	r3, r3, #11
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	d009      	beq.n	8000e14 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 8000e00:	4b23      	ldr	r3, [pc, #140]	; (8000e90 <HAL_ADC_ConfigChannel+0x100>)
 8000e02:	4a23      	ldr	r2, [pc, #140]	; (8000e90 <HAL_ADC_ConfigChannel+0x100>)
 8000e04:	6812      	ldr	r2, [r2, #0]
 8000e06:	2180      	movs	r1, #128	; 0x80
 8000e08:	0409      	lsls	r1, r1, #16
 8000e0a:	430a      	orrs	r2, r1
 8000e0c:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8000e0e:	200a      	movs	r0, #10
 8000e10:	f000 f844 	bl	8000e9c <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	681a      	ldr	r2, [r3, #0]
 8000e18:	2380      	movs	r3, #128	; 0x80
 8000e1a:	029b      	lsls	r3, r3, #10
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	d02b      	beq.n	8000e78 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 8000e20:	4b1b      	ldr	r3, [pc, #108]	; (8000e90 <HAL_ADC_ConfigChannel+0x100>)
 8000e22:	4a1b      	ldr	r2, [pc, #108]	; (8000e90 <HAL_ADC_ConfigChannel+0x100>)
 8000e24:	6812      	ldr	r2, [r2, #0]
 8000e26:	2180      	movs	r1, #128	; 0x80
 8000e28:	03c9      	lsls	r1, r1, #15
 8000e2a:	430a      	orrs	r2, r1
 8000e2c:	601a      	str	r2, [r3, #0]
 8000e2e:	e023      	b.n	8000e78 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	687a      	ldr	r2, [r7, #4]
 8000e36:	6812      	ldr	r2, [r2, #0]
 8000e38:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8000e3a:	683a      	ldr	r2, [r7, #0]
 8000e3c:	6812      	ldr	r2, [r2, #0]
 8000e3e:	0352      	lsls	r2, r2, #13
 8000e40:	0b52      	lsrs	r2, r2, #13
 8000e42:	43d2      	mvns	r2, r2
 8000e44:	400a      	ands	r2, r1
 8000e46:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	681a      	ldr	r2, [r3, #0]
 8000e4c:	2380      	movs	r3, #128	; 0x80
 8000e4e:	02db      	lsls	r3, r3, #11
 8000e50:	4013      	ands	r3, r2
 8000e52:	d005      	beq.n	8000e60 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 8000e54:	4b0e      	ldr	r3, [pc, #56]	; (8000e90 <HAL_ADC_ConfigChannel+0x100>)
 8000e56:	4a0e      	ldr	r2, [pc, #56]	; (8000e90 <HAL_ADC_ConfigChannel+0x100>)
 8000e58:	6812      	ldr	r2, [r2, #0]
 8000e5a:	490e      	ldr	r1, [pc, #56]	; (8000e94 <HAL_ADC_ConfigChannel+0x104>)
 8000e5c:	400a      	ands	r2, r1
 8000e5e:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	681a      	ldr	r2, [r3, #0]
 8000e64:	2380      	movs	r3, #128	; 0x80
 8000e66:	029b      	lsls	r3, r3, #10
 8000e68:	4013      	ands	r3, r2
 8000e6a:	d005      	beq.n	8000e78 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8000e6c:	4b08      	ldr	r3, [pc, #32]	; (8000e90 <HAL_ADC_ConfigChannel+0x100>)
 8000e6e:	4a08      	ldr	r2, [pc, #32]	; (8000e90 <HAL_ADC_ConfigChannel+0x100>)
 8000e70:	6812      	ldr	r2, [r2, #0]
 8000e72:	4909      	ldr	r1, [pc, #36]	; (8000e98 <HAL_ADC_ConfigChannel+0x108>)
 8000e74:	400a      	ands	r2, r1
 8000e76:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	2250      	movs	r2, #80	; 0x50
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 8000e80:	2300      	movs	r3, #0
}
 8000e82:	0018      	movs	r0, r3
 8000e84:	46bd      	mov	sp, r7
 8000e86:	b002      	add	sp, #8
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	46c0      	nop			; (mov r8, r8)
 8000e8c:	00001001 	.word	0x00001001
 8000e90:	40012708 	.word	0x40012708
 8000e94:	ff7fffff 	.word	0xff7fffff
 8000e98:	ffbfffff 	.word	0xffbfffff

08000e9c <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b084      	sub	sp, #16
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8000ea4:	4b0a      	ldr	r3, [pc, #40]	; (8000ed0 <ADC_DelayMicroSecond+0x34>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	490a      	ldr	r1, [pc, #40]	; (8000ed4 <ADC_DelayMicroSecond+0x38>)
 8000eaa:	0018      	movs	r0, r3
 8000eac:	f7ff f92c 	bl	8000108 <__udivsi3>
 8000eb0:	0003      	movs	r3, r0
 8000eb2:	001a      	movs	r2, r3
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	4353      	muls	r3, r2
 8000eb8:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 8000eba:	e002      	b.n	8000ec2 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	3b01      	subs	r3, #1
 8000ec0:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d1f9      	bne.n	8000ebc <ADC_DelayMicroSecond+0x20>
  } 
}
 8000ec8:	46c0      	nop			; (mov r8, r8)
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	b004      	add	sp, #16
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	20000000 	.word	0x20000000
 8000ed4:	000f4240 	.word	0x000f4240

08000ed8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ed8:	b5b0      	push	{r4, r5, r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	0002      	movs	r2, r0
 8000ee0:	6039      	str	r1, [r7, #0]
 8000ee2:	1dfb      	adds	r3, r7, #7
 8000ee4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000ee6:	1dfb      	adds	r3, r7, #7
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	2b7f      	cmp	r3, #127	; 0x7f
 8000eec:	d828      	bhi.n	8000f40 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000eee:	4c2f      	ldr	r4, [pc, #188]	; (8000fac <__NVIC_SetPriority+0xd4>)
 8000ef0:	1dfb      	adds	r3, r7, #7
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	b25b      	sxtb	r3, r3
 8000ef6:	089b      	lsrs	r3, r3, #2
 8000ef8:	492c      	ldr	r1, [pc, #176]	; (8000fac <__NVIC_SetPriority+0xd4>)
 8000efa:	1dfa      	adds	r2, r7, #7
 8000efc:	7812      	ldrb	r2, [r2, #0]
 8000efe:	b252      	sxtb	r2, r2
 8000f00:	0892      	lsrs	r2, r2, #2
 8000f02:	32c0      	adds	r2, #192	; 0xc0
 8000f04:	0092      	lsls	r2, r2, #2
 8000f06:	5852      	ldr	r2, [r2, r1]
 8000f08:	1df9      	adds	r1, r7, #7
 8000f0a:	7809      	ldrb	r1, [r1, #0]
 8000f0c:	0008      	movs	r0, r1
 8000f0e:	2103      	movs	r1, #3
 8000f10:	4001      	ands	r1, r0
 8000f12:	00c9      	lsls	r1, r1, #3
 8000f14:	20ff      	movs	r0, #255	; 0xff
 8000f16:	4088      	lsls	r0, r1
 8000f18:	0001      	movs	r1, r0
 8000f1a:	43c9      	mvns	r1, r1
 8000f1c:	4011      	ands	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f1e:	683a      	ldr	r2, [r7, #0]
 8000f20:	0192      	lsls	r2, r2, #6
 8000f22:	20ff      	movs	r0, #255	; 0xff
 8000f24:	4010      	ands	r0, r2
 8000f26:	1dfa      	adds	r2, r7, #7
 8000f28:	7812      	ldrb	r2, [r2, #0]
 8000f2a:	0015      	movs	r5, r2
 8000f2c:	2203      	movs	r2, #3
 8000f2e:	402a      	ands	r2, r5
 8000f30:	00d2      	lsls	r2, r2, #3
 8000f32:	4090      	lsls	r0, r2
 8000f34:	0002      	movs	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f36:	430a      	orrs	r2, r1
 8000f38:	33c0      	adds	r3, #192	; 0xc0
 8000f3a:	009b      	lsls	r3, r3, #2
 8000f3c:	511a      	str	r2, [r3, r4]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000f3e:	e031      	b.n	8000fa4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f40:	4c1b      	ldr	r4, [pc, #108]	; (8000fb0 <__NVIC_SetPriority+0xd8>)
 8000f42:	1dfb      	adds	r3, r7, #7
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	001a      	movs	r2, r3
 8000f48:	230f      	movs	r3, #15
 8000f4a:	4013      	ands	r3, r2
 8000f4c:	3b08      	subs	r3, #8
 8000f4e:	0899      	lsrs	r1, r3, #2
 8000f50:	4a17      	ldr	r2, [pc, #92]	; (8000fb0 <__NVIC_SetPriority+0xd8>)
 8000f52:	1dfb      	adds	r3, r7, #7
 8000f54:	781b      	ldrb	r3, [r3, #0]
 8000f56:	0018      	movs	r0, r3
 8000f58:	230f      	movs	r3, #15
 8000f5a:	4003      	ands	r3, r0
 8000f5c:	3b08      	subs	r3, #8
 8000f5e:	089b      	lsrs	r3, r3, #2
 8000f60:	3306      	adds	r3, #6
 8000f62:	009b      	lsls	r3, r3, #2
 8000f64:	18d3      	adds	r3, r2, r3
 8000f66:	3304      	adds	r3, #4
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	1dfa      	adds	r2, r7, #7
 8000f6c:	7812      	ldrb	r2, [r2, #0]
 8000f6e:	0010      	movs	r0, r2
 8000f70:	2203      	movs	r2, #3
 8000f72:	4002      	ands	r2, r0
 8000f74:	00d2      	lsls	r2, r2, #3
 8000f76:	20ff      	movs	r0, #255	; 0xff
 8000f78:	4090      	lsls	r0, r2
 8000f7a:	0002      	movs	r2, r0
 8000f7c:	43d2      	mvns	r2, r2
 8000f7e:	401a      	ands	r2, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	019b      	lsls	r3, r3, #6
 8000f84:	20ff      	movs	r0, #255	; 0xff
 8000f86:	4018      	ands	r0, r3
 8000f88:	1dfb      	adds	r3, r7, #7
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	001d      	movs	r5, r3
 8000f8e:	2303      	movs	r3, #3
 8000f90:	402b      	ands	r3, r5
 8000f92:	00db      	lsls	r3, r3, #3
 8000f94:	4098      	lsls	r0, r3
 8000f96:	0003      	movs	r3, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f98:	431a      	orrs	r2, r3
 8000f9a:	1d8b      	adds	r3, r1, #6
 8000f9c:	009b      	lsls	r3, r3, #2
 8000f9e:	18e3      	adds	r3, r4, r3
 8000fa0:	3304      	adds	r3, #4
 8000fa2:	601a      	str	r2, [r3, #0]
}
 8000fa4:	46c0      	nop			; (mov r8, r8)
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	b002      	add	sp, #8
 8000faa:	bdb0      	pop	{r4, r5, r7, pc}
 8000fac:	e000e100 	.word	0xe000e100
 8000fb0:	e000ed00 	.word	0xe000ed00

08000fb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	3b01      	subs	r3, #1
 8000fc0:	4a0c      	ldr	r2, [pc, #48]	; (8000ff4 <SysTick_Config+0x40>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d901      	bls.n	8000fca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	e010      	b.n	8000fec <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fca:	4b0b      	ldr	r3, [pc, #44]	; (8000ff8 <SysTick_Config+0x44>)
 8000fcc:	687a      	ldr	r2, [r7, #4]
 8000fce:	3a01      	subs	r2, #1
 8000fd0:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	425b      	negs	r3, r3
 8000fd6:	2103      	movs	r1, #3
 8000fd8:	0018      	movs	r0, r3
 8000fda:	f7ff ff7d 	bl	8000ed8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fde:	4b06      	ldr	r3, [pc, #24]	; (8000ff8 <SysTick_Config+0x44>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fe4:	4b04      	ldr	r3, [pc, #16]	; (8000ff8 <SysTick_Config+0x44>)
 8000fe6:	2207      	movs	r2, #7
 8000fe8:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fea:	2300      	movs	r3, #0
}
 8000fec:	0018      	movs	r0, r3
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	b002      	add	sp, #8
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	00ffffff 	.word	0x00ffffff
 8000ff8:	e000e010 	.word	0xe000e010

08000ffc <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0
 8001002:	60b9      	str	r1, [r7, #8]
 8001004:	607a      	str	r2, [r7, #4]
 8001006:	230f      	movs	r3, #15
 8001008:	18fb      	adds	r3, r7, r3
 800100a:	1c02      	adds	r2, r0, #0
 800100c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800100e:	68ba      	ldr	r2, [r7, #8]
 8001010:	230f      	movs	r3, #15
 8001012:	18fb      	adds	r3, r7, r3
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	b25b      	sxtb	r3, r3
 8001018:	0011      	movs	r1, r2
 800101a:	0018      	movs	r0, r3
 800101c:	f7ff ff5c 	bl	8000ed8 <__NVIC_SetPriority>
}
 8001020:	46c0      	nop			; (mov r8, r8)
 8001022:	46bd      	mov	sp, r7
 8001024:	b004      	add	sp, #16
 8001026:	bd80      	pop	{r7, pc}

08001028 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	0018      	movs	r0, r3
 8001034:	f7ff ffbe 	bl	8000fb4 <SysTick_Config>
 8001038:	0003      	movs	r3, r0
}
 800103a:	0018      	movs	r0, r3
 800103c:	46bd      	mov	sp, r7
 800103e:	b002      	add	sp, #8
 8001040:	bd80      	pop	{r7, pc}
	...

08001044 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b086      	sub	sp, #24
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800104e:	2300      	movs	r3, #0
 8001050:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001052:	2300      	movs	r3, #0
 8001054:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001056:	2300      	movs	r3, #0
 8001058:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800105a:	e14f      	b.n	80012fc <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	2101      	movs	r1, #1
 8001062:	697a      	ldr	r2, [r7, #20]
 8001064:	4091      	lsls	r1, r2
 8001066:	000a      	movs	r2, r1
 8001068:	4013      	ands	r3, r2
 800106a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d100      	bne.n	8001074 <HAL_GPIO_Init+0x30>
 8001072:	e140      	b.n	80012f6 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	2b01      	cmp	r3, #1
 800107a:	d00b      	beq.n	8001094 <HAL_GPIO_Init+0x50>
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	2b02      	cmp	r3, #2
 8001082:	d007      	beq.n	8001094 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001088:	2b11      	cmp	r3, #17
 800108a:	d003      	beq.n	8001094 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	2b12      	cmp	r3, #18
 8001092:	d130      	bne.n	80010f6 <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	689b      	ldr	r3, [r3, #8]
 8001098:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	005b      	lsls	r3, r3, #1
 800109e:	2203      	movs	r2, #3
 80010a0:	409a      	lsls	r2, r3
 80010a2:	0013      	movs	r3, r2
 80010a4:	43da      	mvns	r2, r3
 80010a6:	693b      	ldr	r3, [r7, #16]
 80010a8:	4013      	ands	r3, r2
 80010aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	68da      	ldr	r2, [r3, #12]
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	005b      	lsls	r3, r3, #1
 80010b4:	409a      	lsls	r2, r3
 80010b6:	0013      	movs	r3, r2
 80010b8:	693a      	ldr	r2, [r7, #16]
 80010ba:	4313      	orrs	r3, r2
 80010bc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	693a      	ldr	r2, [r7, #16]
 80010c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010ca:	2201      	movs	r2, #1
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	409a      	lsls	r2, r3
 80010d0:	0013      	movs	r3, r2
 80010d2:	43da      	mvns	r2, r3
 80010d4:	693b      	ldr	r3, [r7, #16]
 80010d6:	4013      	ands	r3, r2
 80010d8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	091b      	lsrs	r3, r3, #4
 80010e0:	2201      	movs	r2, #1
 80010e2:	401a      	ands	r2, r3
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	409a      	lsls	r2, r3
 80010e8:	0013      	movs	r3, r2
 80010ea:	693a      	ldr	r2, [r7, #16]
 80010ec:	4313      	orrs	r3, r2
 80010ee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	693a      	ldr	r2, [r7, #16]
 80010f4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	68db      	ldr	r3, [r3, #12]
 80010fa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	005b      	lsls	r3, r3, #1
 8001100:	2203      	movs	r2, #3
 8001102:	409a      	lsls	r2, r3
 8001104:	0013      	movs	r3, r2
 8001106:	43da      	mvns	r2, r3
 8001108:	693b      	ldr	r3, [r7, #16]
 800110a:	4013      	ands	r3, r2
 800110c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	689a      	ldr	r2, [r3, #8]
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	005b      	lsls	r3, r3, #1
 8001116:	409a      	lsls	r2, r3
 8001118:	0013      	movs	r3, r2
 800111a:	693a      	ldr	r2, [r7, #16]
 800111c:	4313      	orrs	r3, r2
 800111e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	693a      	ldr	r2, [r7, #16]
 8001124:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	2b02      	cmp	r3, #2
 800112c:	d003      	beq.n	8001136 <HAL_GPIO_Init+0xf2>
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	2b12      	cmp	r3, #18
 8001134:	d123      	bne.n	800117e <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	08da      	lsrs	r2, r3, #3
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	3208      	adds	r2, #8
 800113e:	0092      	lsls	r2, r2, #2
 8001140:	58d3      	ldr	r3, [r2, r3]
 8001142:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	2207      	movs	r2, #7
 8001148:	4013      	ands	r3, r2
 800114a:	009b      	lsls	r3, r3, #2
 800114c:	220f      	movs	r2, #15
 800114e:	409a      	lsls	r2, r3
 8001150:	0013      	movs	r3, r2
 8001152:	43da      	mvns	r2, r3
 8001154:	693b      	ldr	r3, [r7, #16]
 8001156:	4013      	ands	r3, r2
 8001158:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	691a      	ldr	r2, [r3, #16]
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	2107      	movs	r1, #7
 8001162:	400b      	ands	r3, r1
 8001164:	009b      	lsls	r3, r3, #2
 8001166:	409a      	lsls	r2, r3
 8001168:	0013      	movs	r3, r2
 800116a:	693a      	ldr	r2, [r7, #16]
 800116c:	4313      	orrs	r3, r2
 800116e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	08da      	lsrs	r2, r3, #3
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	3208      	adds	r2, #8
 8001178:	0092      	lsls	r2, r2, #2
 800117a:	6939      	ldr	r1, [r7, #16]
 800117c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	005b      	lsls	r3, r3, #1
 8001188:	2203      	movs	r2, #3
 800118a:	409a      	lsls	r2, r3
 800118c:	0013      	movs	r3, r2
 800118e:	43da      	mvns	r2, r3
 8001190:	693b      	ldr	r3, [r7, #16]
 8001192:	4013      	ands	r3, r2
 8001194:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	2203      	movs	r2, #3
 800119c:	401a      	ands	r2, r3
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	005b      	lsls	r3, r3, #1
 80011a2:	409a      	lsls	r2, r3
 80011a4:	0013      	movs	r3, r2
 80011a6:	693a      	ldr	r2, [r7, #16]
 80011a8:	4313      	orrs	r3, r2
 80011aa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	693a      	ldr	r2, [r7, #16]
 80011b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	685a      	ldr	r2, [r3, #4]
 80011b6:	2380      	movs	r3, #128	; 0x80
 80011b8:	055b      	lsls	r3, r3, #21
 80011ba:	4013      	ands	r3, r2
 80011bc:	d100      	bne.n	80011c0 <HAL_GPIO_Init+0x17c>
 80011be:	e09a      	b.n	80012f6 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011c0:	4b54      	ldr	r3, [pc, #336]	; (8001314 <HAL_GPIO_Init+0x2d0>)
 80011c2:	4a54      	ldr	r2, [pc, #336]	; (8001314 <HAL_GPIO_Init+0x2d0>)
 80011c4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80011c6:	2101      	movs	r1, #1
 80011c8:	430a      	orrs	r2, r1
 80011ca:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80011cc:	4a52      	ldr	r2, [pc, #328]	; (8001318 <HAL_GPIO_Init+0x2d4>)
 80011ce:	697b      	ldr	r3, [r7, #20]
 80011d0:	089b      	lsrs	r3, r3, #2
 80011d2:	3302      	adds	r3, #2
 80011d4:	009b      	lsls	r3, r3, #2
 80011d6:	589b      	ldr	r3, [r3, r2]
 80011d8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	2203      	movs	r2, #3
 80011de:	4013      	ands	r3, r2
 80011e0:	009b      	lsls	r3, r3, #2
 80011e2:	220f      	movs	r2, #15
 80011e4:	409a      	lsls	r2, r3
 80011e6:	0013      	movs	r3, r2
 80011e8:	43da      	mvns	r2, r3
 80011ea:	693b      	ldr	r3, [r7, #16]
 80011ec:	4013      	ands	r3, r2
 80011ee:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80011f0:	687a      	ldr	r2, [r7, #4]
 80011f2:	23a0      	movs	r3, #160	; 0xa0
 80011f4:	05db      	lsls	r3, r3, #23
 80011f6:	429a      	cmp	r2, r3
 80011f8:	d019      	beq.n	800122e <HAL_GPIO_Init+0x1ea>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	4a47      	ldr	r2, [pc, #284]	; (800131c <HAL_GPIO_Init+0x2d8>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d013      	beq.n	800122a <HAL_GPIO_Init+0x1e6>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4a46      	ldr	r2, [pc, #280]	; (8001320 <HAL_GPIO_Init+0x2dc>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d00d      	beq.n	8001226 <HAL_GPIO_Init+0x1e2>
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	4a45      	ldr	r2, [pc, #276]	; (8001324 <HAL_GPIO_Init+0x2e0>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d007      	beq.n	8001222 <HAL_GPIO_Init+0x1de>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	4a44      	ldr	r2, [pc, #272]	; (8001328 <HAL_GPIO_Init+0x2e4>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d101      	bne.n	800121e <HAL_GPIO_Init+0x1da>
 800121a:	2305      	movs	r3, #5
 800121c:	e008      	b.n	8001230 <HAL_GPIO_Init+0x1ec>
 800121e:	2306      	movs	r3, #6
 8001220:	e006      	b.n	8001230 <HAL_GPIO_Init+0x1ec>
 8001222:	2303      	movs	r3, #3
 8001224:	e004      	b.n	8001230 <HAL_GPIO_Init+0x1ec>
 8001226:	2302      	movs	r3, #2
 8001228:	e002      	b.n	8001230 <HAL_GPIO_Init+0x1ec>
 800122a:	2301      	movs	r3, #1
 800122c:	e000      	b.n	8001230 <HAL_GPIO_Init+0x1ec>
 800122e:	2300      	movs	r3, #0
 8001230:	697a      	ldr	r2, [r7, #20]
 8001232:	2103      	movs	r1, #3
 8001234:	400a      	ands	r2, r1
 8001236:	0092      	lsls	r2, r2, #2
 8001238:	4093      	lsls	r3, r2
 800123a:	693a      	ldr	r2, [r7, #16]
 800123c:	4313      	orrs	r3, r2
 800123e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001240:	4935      	ldr	r1, [pc, #212]	; (8001318 <HAL_GPIO_Init+0x2d4>)
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	089b      	lsrs	r3, r3, #2
 8001246:	3302      	adds	r3, #2
 8001248:	009b      	lsls	r3, r3, #2
 800124a:	693a      	ldr	r2, [r7, #16]
 800124c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800124e:	4b37      	ldr	r3, [pc, #220]	; (800132c <HAL_GPIO_Init+0x2e8>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	43da      	mvns	r2, r3
 8001258:	693b      	ldr	r3, [r7, #16]
 800125a:	4013      	ands	r3, r2
 800125c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	685a      	ldr	r2, [r3, #4]
 8001262:	2380      	movs	r3, #128	; 0x80
 8001264:	025b      	lsls	r3, r3, #9
 8001266:	4013      	ands	r3, r2
 8001268:	d003      	beq.n	8001272 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 800126a:	693a      	ldr	r2, [r7, #16]
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	4313      	orrs	r3, r2
 8001270:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001272:	4b2e      	ldr	r3, [pc, #184]	; (800132c <HAL_GPIO_Init+0x2e8>)
 8001274:	693a      	ldr	r2, [r7, #16]
 8001276:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001278:	4b2c      	ldr	r3, [pc, #176]	; (800132c <HAL_GPIO_Init+0x2e8>)
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	43da      	mvns	r2, r3
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	4013      	ands	r3, r2
 8001286:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	685a      	ldr	r2, [r3, #4]
 800128c:	2380      	movs	r3, #128	; 0x80
 800128e:	029b      	lsls	r3, r3, #10
 8001290:	4013      	ands	r3, r2
 8001292:	d003      	beq.n	800129c <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8001294:	693a      	ldr	r2, [r7, #16]
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	4313      	orrs	r3, r2
 800129a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800129c:	4b23      	ldr	r3, [pc, #140]	; (800132c <HAL_GPIO_Init+0x2e8>)
 800129e:	693a      	ldr	r2, [r7, #16]
 80012a0:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012a2:	4b22      	ldr	r3, [pc, #136]	; (800132c <HAL_GPIO_Init+0x2e8>)
 80012a4:	689b      	ldr	r3, [r3, #8]
 80012a6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	43da      	mvns	r2, r3
 80012ac:	693b      	ldr	r3, [r7, #16]
 80012ae:	4013      	ands	r3, r2
 80012b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	685a      	ldr	r2, [r3, #4]
 80012b6:	2380      	movs	r3, #128	; 0x80
 80012b8:	035b      	lsls	r3, r3, #13
 80012ba:	4013      	ands	r3, r2
 80012bc:	d003      	beq.n	80012c6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80012be:	693a      	ldr	r2, [r7, #16]
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	4313      	orrs	r3, r2
 80012c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80012c6:	4b19      	ldr	r3, [pc, #100]	; (800132c <HAL_GPIO_Init+0x2e8>)
 80012c8:	693a      	ldr	r2, [r7, #16]
 80012ca:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80012cc:	4b17      	ldr	r3, [pc, #92]	; (800132c <HAL_GPIO_Init+0x2e8>)
 80012ce:	68db      	ldr	r3, [r3, #12]
 80012d0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	43da      	mvns	r2, r3
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	4013      	ands	r3, r2
 80012da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	685a      	ldr	r2, [r3, #4]
 80012e0:	2380      	movs	r3, #128	; 0x80
 80012e2:	039b      	lsls	r3, r3, #14
 80012e4:	4013      	ands	r3, r2
 80012e6:	d003      	beq.n	80012f0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80012e8:	693a      	ldr	r2, [r7, #16]
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	4313      	orrs	r3, r2
 80012ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80012f0:	4b0e      	ldr	r3, [pc, #56]	; (800132c <HAL_GPIO_Init+0x2e8>)
 80012f2:	693a      	ldr	r2, [r7, #16]
 80012f4:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	3301      	adds	r3, #1
 80012fa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	40da      	lsrs	r2, r3
 8001304:	1e13      	subs	r3, r2, #0
 8001306:	d000      	beq.n	800130a <HAL_GPIO_Init+0x2c6>
 8001308:	e6a8      	b.n	800105c <HAL_GPIO_Init+0x18>
  }
}
 800130a:	46c0      	nop			; (mov r8, r8)
 800130c:	46bd      	mov	sp, r7
 800130e:	b006      	add	sp, #24
 8001310:	bd80      	pop	{r7, pc}
 8001312:	46c0      	nop			; (mov r8, r8)
 8001314:	40021000 	.word	0x40021000
 8001318:	40010000 	.word	0x40010000
 800131c:	50000400 	.word	0x50000400
 8001320:	50000800 	.word	0x50000800
 8001324:	50000c00 	.word	0x50000c00
 8001328:	50001c00 	.word	0x50001c00
 800132c:	40010400 	.word	0x40010400

08001330 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
 8001338:	0008      	movs	r0, r1
 800133a:	0011      	movs	r1, r2
 800133c:	1cbb      	adds	r3, r7, #2
 800133e:	1c02      	adds	r2, r0, #0
 8001340:	801a      	strh	r2, [r3, #0]
 8001342:	1c7b      	adds	r3, r7, #1
 8001344:	1c0a      	adds	r2, r1, #0
 8001346:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001348:	1c7b      	adds	r3, r7, #1
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d004      	beq.n	800135a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001350:	1cbb      	adds	r3, r7, #2
 8001352:	881a      	ldrh	r2, [r3, #0]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001358:	e003      	b.n	8001362 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800135a:	1cbb      	adds	r3, r7, #2
 800135c:	881a      	ldrh	r2, [r3, #0]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001362:	46c0      	nop			; (mov r8, r8)
 8001364:	46bd      	mov	sp, r7
 8001366:	b002      	add	sp, #8
 8001368:	bd80      	pop	{r7, pc}
	...

0800136c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800136c:	b590      	push	{r4, r7, lr}
 800136e:	b08b      	sub	sp, #44	; 0x2c
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d102      	bne.n	8001380 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800137a:	2301      	movs	r3, #1
 800137c:	f000 fb5a 	bl	8001a34 <HAL_RCC_OscConfig+0x6c8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001380:	4bce      	ldr	r3, [pc, #824]	; (80016bc <HAL_RCC_OscConfig+0x350>)
 8001382:	68db      	ldr	r3, [r3, #12]
 8001384:	220c      	movs	r2, #12
 8001386:	4013      	ands	r3, r2
 8001388:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800138a:	4bcc      	ldr	r3, [pc, #816]	; (80016bc <HAL_RCC_OscConfig+0x350>)
 800138c:	68da      	ldr	r2, [r3, #12]
 800138e:	2380      	movs	r3, #128	; 0x80
 8001390:	025b      	lsls	r3, r3, #9
 8001392:	4013      	ands	r3, r2
 8001394:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	2201      	movs	r2, #1
 800139c:	4013      	ands	r3, r2
 800139e:	d100      	bne.n	80013a2 <HAL_RCC_OscConfig+0x36>
 80013a0:	e07c      	b.n	800149c <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80013a2:	6a3b      	ldr	r3, [r7, #32]
 80013a4:	2b08      	cmp	r3, #8
 80013a6:	d007      	beq.n	80013b8 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80013a8:	6a3b      	ldr	r3, [r7, #32]
 80013aa:	2b0c      	cmp	r3, #12
 80013ac:	d111      	bne.n	80013d2 <HAL_RCC_OscConfig+0x66>
 80013ae:	69fa      	ldr	r2, [r7, #28]
 80013b0:	2380      	movs	r3, #128	; 0x80
 80013b2:	025b      	lsls	r3, r3, #9
 80013b4:	429a      	cmp	r2, r3
 80013b6:	d10c      	bne.n	80013d2 <HAL_RCC_OscConfig+0x66>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013b8:	4bc0      	ldr	r3, [pc, #768]	; (80016bc <HAL_RCC_OscConfig+0x350>)
 80013ba:	681a      	ldr	r2, [r3, #0]
 80013bc:	2380      	movs	r3, #128	; 0x80
 80013be:	029b      	lsls	r3, r3, #10
 80013c0:	4013      	ands	r3, r2
 80013c2:	d100      	bne.n	80013c6 <HAL_RCC_OscConfig+0x5a>
 80013c4:	e069      	b.n	800149a <HAL_RCC_OscConfig+0x12e>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d165      	bne.n	800149a <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 80013ce:	2301      	movs	r3, #1
 80013d0:	e330      	b.n	8001a34 <HAL_RCC_OscConfig+0x6c8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	685a      	ldr	r2, [r3, #4]
 80013d6:	2380      	movs	r3, #128	; 0x80
 80013d8:	025b      	lsls	r3, r3, #9
 80013da:	429a      	cmp	r2, r3
 80013dc:	d107      	bne.n	80013ee <HAL_RCC_OscConfig+0x82>
 80013de:	4bb7      	ldr	r3, [pc, #732]	; (80016bc <HAL_RCC_OscConfig+0x350>)
 80013e0:	4ab6      	ldr	r2, [pc, #728]	; (80016bc <HAL_RCC_OscConfig+0x350>)
 80013e2:	6812      	ldr	r2, [r2, #0]
 80013e4:	2180      	movs	r1, #128	; 0x80
 80013e6:	0249      	lsls	r1, r1, #9
 80013e8:	430a      	orrs	r2, r1
 80013ea:	601a      	str	r2, [r3, #0]
 80013ec:	e027      	b.n	800143e <HAL_RCC_OscConfig+0xd2>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	685a      	ldr	r2, [r3, #4]
 80013f2:	23a0      	movs	r3, #160	; 0xa0
 80013f4:	02db      	lsls	r3, r3, #11
 80013f6:	429a      	cmp	r2, r3
 80013f8:	d10e      	bne.n	8001418 <HAL_RCC_OscConfig+0xac>
 80013fa:	4bb0      	ldr	r3, [pc, #704]	; (80016bc <HAL_RCC_OscConfig+0x350>)
 80013fc:	4aaf      	ldr	r2, [pc, #700]	; (80016bc <HAL_RCC_OscConfig+0x350>)
 80013fe:	6812      	ldr	r2, [r2, #0]
 8001400:	2180      	movs	r1, #128	; 0x80
 8001402:	02c9      	lsls	r1, r1, #11
 8001404:	430a      	orrs	r2, r1
 8001406:	601a      	str	r2, [r3, #0]
 8001408:	4bac      	ldr	r3, [pc, #688]	; (80016bc <HAL_RCC_OscConfig+0x350>)
 800140a:	4aac      	ldr	r2, [pc, #688]	; (80016bc <HAL_RCC_OscConfig+0x350>)
 800140c:	6812      	ldr	r2, [r2, #0]
 800140e:	2180      	movs	r1, #128	; 0x80
 8001410:	0249      	lsls	r1, r1, #9
 8001412:	430a      	orrs	r2, r1
 8001414:	601a      	str	r2, [r3, #0]
 8001416:	e012      	b.n	800143e <HAL_RCC_OscConfig+0xd2>
 8001418:	4ba8      	ldr	r3, [pc, #672]	; (80016bc <HAL_RCC_OscConfig+0x350>)
 800141a:	4aa8      	ldr	r2, [pc, #672]	; (80016bc <HAL_RCC_OscConfig+0x350>)
 800141c:	6812      	ldr	r2, [r2, #0]
 800141e:	49a8      	ldr	r1, [pc, #672]	; (80016c0 <HAL_RCC_OscConfig+0x354>)
 8001420:	400a      	ands	r2, r1
 8001422:	601a      	str	r2, [r3, #0]
 8001424:	4ba5      	ldr	r3, [pc, #660]	; (80016bc <HAL_RCC_OscConfig+0x350>)
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	2380      	movs	r3, #128	; 0x80
 800142a:	025b      	lsls	r3, r3, #9
 800142c:	4013      	ands	r3, r2
 800142e:	60fb      	str	r3, [r7, #12]
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	4ba2      	ldr	r3, [pc, #648]	; (80016bc <HAL_RCC_OscConfig+0x350>)
 8001434:	4aa1      	ldr	r2, [pc, #644]	; (80016bc <HAL_RCC_OscConfig+0x350>)
 8001436:	6812      	ldr	r2, [r2, #0]
 8001438:	49a2      	ldr	r1, [pc, #648]	; (80016c4 <HAL_RCC_OscConfig+0x358>)
 800143a:	400a      	ands	r2, r1
 800143c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d014      	beq.n	8001470 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001446:	f7ff fb25 	bl	8000a94 <HAL_GetTick>
 800144a:	0003      	movs	r3, r0
 800144c:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800144e:	e008      	b.n	8001462 <HAL_RCC_OscConfig+0xf6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001450:	f7ff fb20 	bl	8000a94 <HAL_GetTick>
 8001454:	0002      	movs	r2, r0
 8001456:	69bb      	ldr	r3, [r7, #24]
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	2b64      	cmp	r3, #100	; 0x64
 800145c:	d901      	bls.n	8001462 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800145e:	2303      	movs	r3, #3
 8001460:	e2e8      	b.n	8001a34 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001462:	4b96      	ldr	r3, [pc, #600]	; (80016bc <HAL_RCC_OscConfig+0x350>)
 8001464:	681a      	ldr	r2, [r3, #0]
 8001466:	2380      	movs	r3, #128	; 0x80
 8001468:	029b      	lsls	r3, r3, #10
 800146a:	4013      	ands	r3, r2
 800146c:	d0f0      	beq.n	8001450 <HAL_RCC_OscConfig+0xe4>
 800146e:	e015      	b.n	800149c <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001470:	f7ff fb10 	bl	8000a94 <HAL_GetTick>
 8001474:	0003      	movs	r3, r0
 8001476:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001478:	e008      	b.n	800148c <HAL_RCC_OscConfig+0x120>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800147a:	f7ff fb0b 	bl	8000a94 <HAL_GetTick>
 800147e:	0002      	movs	r2, r0
 8001480:	69bb      	ldr	r3, [r7, #24]
 8001482:	1ad3      	subs	r3, r2, r3
 8001484:	2b64      	cmp	r3, #100	; 0x64
 8001486:	d901      	bls.n	800148c <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8001488:	2303      	movs	r3, #3
 800148a:	e2d3      	b.n	8001a34 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800148c:	4b8b      	ldr	r3, [pc, #556]	; (80016bc <HAL_RCC_OscConfig+0x350>)
 800148e:	681a      	ldr	r2, [r3, #0]
 8001490:	2380      	movs	r3, #128	; 0x80
 8001492:	029b      	lsls	r3, r3, #10
 8001494:	4013      	ands	r3, r2
 8001496:	d1f0      	bne.n	800147a <HAL_RCC_OscConfig+0x10e>
 8001498:	e000      	b.n	800149c <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800149a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	2202      	movs	r2, #2
 80014a2:	4013      	ands	r3, r2
 80014a4:	d100      	bne.n	80014a8 <HAL_RCC_OscConfig+0x13c>
 80014a6:	e08b      	b.n	80015c0 <HAL_RCC_OscConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	68db      	ldr	r3, [r3, #12]
 80014ac:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80014ae:	6a3b      	ldr	r3, [r7, #32]
 80014b0:	2b04      	cmp	r3, #4
 80014b2:	d005      	beq.n	80014c0 <HAL_RCC_OscConfig+0x154>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80014b4:	6a3b      	ldr	r3, [r7, #32]
 80014b6:	2b0c      	cmp	r3, #12
 80014b8:	d13f      	bne.n	800153a <HAL_RCC_OscConfig+0x1ce>
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d13c      	bne.n	800153a <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80014c0:	4b7e      	ldr	r3, [pc, #504]	; (80016bc <HAL_RCC_OscConfig+0x350>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	2204      	movs	r2, #4
 80014c6:	4013      	ands	r3, r2
 80014c8:	d004      	beq.n	80014d4 <HAL_RCC_OscConfig+0x168>
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d101      	bne.n	80014d4 <HAL_RCC_OscConfig+0x168>
      {
        return HAL_ERROR;
 80014d0:	2301      	movs	r3, #1
 80014d2:	e2af      	b.n	8001a34 <HAL_RCC_OscConfig+0x6c8>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014d4:	4a79      	ldr	r2, [pc, #484]	; (80016bc <HAL_RCC_OscConfig+0x350>)
 80014d6:	4b79      	ldr	r3, [pc, #484]	; (80016bc <HAL_RCC_OscConfig+0x350>)
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	497b      	ldr	r1, [pc, #492]	; (80016c8 <HAL_RCC_OscConfig+0x35c>)
 80014dc:	4019      	ands	r1, r3
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	691b      	ldr	r3, [r3, #16]
 80014e2:	021b      	lsls	r3, r3, #8
 80014e4:	430b      	orrs	r3, r1
 80014e6:	6053      	str	r3, [r2, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80014e8:	4b74      	ldr	r3, [pc, #464]	; (80016bc <HAL_RCC_OscConfig+0x350>)
 80014ea:	4a74      	ldr	r2, [pc, #464]	; (80016bc <HAL_RCC_OscConfig+0x350>)
 80014ec:	6812      	ldr	r2, [r2, #0]
 80014ee:	2109      	movs	r1, #9
 80014f0:	438a      	bics	r2, r1
 80014f2:	0011      	movs	r1, r2
 80014f4:	697a      	ldr	r2, [r7, #20]
 80014f6:	430a      	orrs	r2, r1
 80014f8:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80014fa:	f000 fbe9 	bl	8001cd0 <HAL_RCC_GetSysClockFreq>
 80014fe:	0001      	movs	r1, r0
 8001500:	4b6e      	ldr	r3, [pc, #440]	; (80016bc <HAL_RCC_OscConfig+0x350>)
 8001502:	68db      	ldr	r3, [r3, #12]
 8001504:	091b      	lsrs	r3, r3, #4
 8001506:	220f      	movs	r2, #15
 8001508:	4013      	ands	r3, r2
 800150a:	4a70      	ldr	r2, [pc, #448]	; (80016cc <HAL_RCC_OscConfig+0x360>)
 800150c:	5cd3      	ldrb	r3, [r2, r3]
 800150e:	000a      	movs	r2, r1
 8001510:	40da      	lsrs	r2, r3
 8001512:	4b6f      	ldr	r3, [pc, #444]	; (80016d0 <HAL_RCC_OscConfig+0x364>)
 8001514:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001516:	4b6f      	ldr	r3, [pc, #444]	; (80016d4 <HAL_RCC_OscConfig+0x368>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	2213      	movs	r2, #19
 800151c:	18bc      	adds	r4, r7, r2
 800151e:	0018      	movs	r0, r3
 8001520:	f7ff fa72 	bl	8000a08 <HAL_InitTick>
 8001524:	0003      	movs	r3, r0
 8001526:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001528:	2313      	movs	r3, #19
 800152a:	18fb      	adds	r3, r7, r3
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d046      	beq.n	80015c0 <HAL_RCC_OscConfig+0x254>
      {
        return status;
 8001532:	2313      	movs	r3, #19
 8001534:	18fb      	adds	r3, r7, r3
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	e27c      	b.n	8001a34 <HAL_RCC_OscConfig+0x6c8>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d026      	beq.n	800158e <HAL_RCC_OscConfig+0x222>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001540:	4b5e      	ldr	r3, [pc, #376]	; (80016bc <HAL_RCC_OscConfig+0x350>)
 8001542:	4a5e      	ldr	r2, [pc, #376]	; (80016bc <HAL_RCC_OscConfig+0x350>)
 8001544:	6812      	ldr	r2, [r2, #0]
 8001546:	2109      	movs	r1, #9
 8001548:	438a      	bics	r2, r1
 800154a:	0011      	movs	r1, r2
 800154c:	697a      	ldr	r2, [r7, #20]
 800154e:	430a      	orrs	r2, r1
 8001550:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001552:	f7ff fa9f 	bl	8000a94 <HAL_GetTick>
 8001556:	0003      	movs	r3, r0
 8001558:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800155a:	e008      	b.n	800156e <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800155c:	f7ff fa9a 	bl	8000a94 <HAL_GetTick>
 8001560:	0002      	movs	r2, r0
 8001562:	69bb      	ldr	r3, [r7, #24]
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	2b02      	cmp	r3, #2
 8001568:	d901      	bls.n	800156e <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 800156a:	2303      	movs	r3, #3
 800156c:	e262      	b.n	8001a34 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800156e:	4b53      	ldr	r3, [pc, #332]	; (80016bc <HAL_RCC_OscConfig+0x350>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	2204      	movs	r2, #4
 8001574:	4013      	ands	r3, r2
 8001576:	d0f1      	beq.n	800155c <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001578:	4a50      	ldr	r2, [pc, #320]	; (80016bc <HAL_RCC_OscConfig+0x350>)
 800157a:	4b50      	ldr	r3, [pc, #320]	; (80016bc <HAL_RCC_OscConfig+0x350>)
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	4952      	ldr	r1, [pc, #328]	; (80016c8 <HAL_RCC_OscConfig+0x35c>)
 8001580:	4019      	ands	r1, r3
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	691b      	ldr	r3, [r3, #16]
 8001586:	021b      	lsls	r3, r3, #8
 8001588:	430b      	orrs	r3, r1
 800158a:	6053      	str	r3, [r2, #4]
 800158c:	e018      	b.n	80015c0 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800158e:	4b4b      	ldr	r3, [pc, #300]	; (80016bc <HAL_RCC_OscConfig+0x350>)
 8001590:	4a4a      	ldr	r2, [pc, #296]	; (80016bc <HAL_RCC_OscConfig+0x350>)
 8001592:	6812      	ldr	r2, [r2, #0]
 8001594:	2101      	movs	r1, #1
 8001596:	438a      	bics	r2, r1
 8001598:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800159a:	f7ff fa7b 	bl	8000a94 <HAL_GetTick>
 800159e:	0003      	movs	r3, r0
 80015a0:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80015a2:	e008      	b.n	80015b6 <HAL_RCC_OscConfig+0x24a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015a4:	f7ff fa76 	bl	8000a94 <HAL_GetTick>
 80015a8:	0002      	movs	r2, r0
 80015aa:	69bb      	ldr	r3, [r7, #24]
 80015ac:	1ad3      	subs	r3, r2, r3
 80015ae:	2b02      	cmp	r3, #2
 80015b0:	d901      	bls.n	80015b6 <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 80015b2:	2303      	movs	r3, #3
 80015b4:	e23e      	b.n	8001a34 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80015b6:	4b41      	ldr	r3, [pc, #260]	; (80016bc <HAL_RCC_OscConfig+0x350>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	2204      	movs	r2, #4
 80015bc:	4013      	ands	r3, r2
 80015be:	d1f1      	bne.n	80015a4 <HAL_RCC_OscConfig+0x238>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	2210      	movs	r2, #16
 80015c6:	4013      	ands	r3, r2
 80015c8:	d100      	bne.n	80015cc <HAL_RCC_OscConfig+0x260>
 80015ca:	e0a1      	b.n	8001710 <HAL_RCC_OscConfig+0x3a4>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80015cc:	6a3b      	ldr	r3, [r7, #32]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d141      	bne.n	8001656 <HAL_RCC_OscConfig+0x2ea>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80015d2:	4b3a      	ldr	r3, [pc, #232]	; (80016bc <HAL_RCC_OscConfig+0x350>)
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	2380      	movs	r3, #128	; 0x80
 80015d8:	009b      	lsls	r3, r3, #2
 80015da:	4013      	ands	r3, r2
 80015dc:	d005      	beq.n	80015ea <HAL_RCC_OscConfig+0x27e>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	699b      	ldr	r3, [r3, #24]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d101      	bne.n	80015ea <HAL_RCC_OscConfig+0x27e>
      {
        return HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
 80015e8:	e224      	b.n	8001a34 <HAL_RCC_OscConfig+0x6c8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015ea:	4a34      	ldr	r2, [pc, #208]	; (80016bc <HAL_RCC_OscConfig+0x350>)
 80015ec:	4b33      	ldr	r3, [pc, #204]	; (80016bc <HAL_RCC_OscConfig+0x350>)
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	4939      	ldr	r1, [pc, #228]	; (80016d8 <HAL_RCC_OscConfig+0x36c>)
 80015f2:	4019      	ands	r1, r3
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6a1b      	ldr	r3, [r3, #32]
 80015f8:	430b      	orrs	r3, r1
 80015fa:	6053      	str	r3, [r2, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015fc:	4a2f      	ldr	r2, [pc, #188]	; (80016bc <HAL_RCC_OscConfig+0x350>)
 80015fe:	4b2f      	ldr	r3, [pc, #188]	; (80016bc <HAL_RCC_OscConfig+0x350>)
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	021b      	lsls	r3, r3, #8
 8001604:	0a19      	lsrs	r1, r3, #8
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	69db      	ldr	r3, [r3, #28]
 800160a:	061b      	lsls	r3, r3, #24
 800160c:	430b      	orrs	r3, r1
 800160e:	6053      	str	r3, [r2, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6a1b      	ldr	r3, [r3, #32]
 8001614:	0b5b      	lsrs	r3, r3, #13
 8001616:	3301      	adds	r3, #1
 8001618:	2280      	movs	r2, #128	; 0x80
 800161a:	0212      	lsls	r2, r2, #8
 800161c:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800161e:	4b27      	ldr	r3, [pc, #156]	; (80016bc <HAL_RCC_OscConfig+0x350>)
 8001620:	68db      	ldr	r3, [r3, #12]
 8001622:	091b      	lsrs	r3, r3, #4
 8001624:	210f      	movs	r1, #15
 8001626:	400b      	ands	r3, r1
 8001628:	4928      	ldr	r1, [pc, #160]	; (80016cc <HAL_RCC_OscConfig+0x360>)
 800162a:	5ccb      	ldrb	r3, [r1, r3]
 800162c:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800162e:	4b28      	ldr	r3, [pc, #160]	; (80016d0 <HAL_RCC_OscConfig+0x364>)
 8001630:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001632:	4b28      	ldr	r3, [pc, #160]	; (80016d4 <HAL_RCC_OscConfig+0x368>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	2213      	movs	r2, #19
 8001638:	18bc      	adds	r4, r7, r2
 800163a:	0018      	movs	r0, r3
 800163c:	f7ff f9e4 	bl	8000a08 <HAL_InitTick>
 8001640:	0003      	movs	r3, r0
 8001642:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001644:	2313      	movs	r3, #19
 8001646:	18fb      	adds	r3, r7, r3
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d060      	beq.n	8001710 <HAL_RCC_OscConfig+0x3a4>
        {
          return status;
 800164e:	2313      	movs	r3, #19
 8001650:	18fb      	adds	r3, r7, r3
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	e1ee      	b.n	8001a34 <HAL_RCC_OscConfig+0x6c8>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	699b      	ldr	r3, [r3, #24]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d03e      	beq.n	80016dc <HAL_RCC_OscConfig+0x370>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800165e:	4b17      	ldr	r3, [pc, #92]	; (80016bc <HAL_RCC_OscConfig+0x350>)
 8001660:	4a16      	ldr	r2, [pc, #88]	; (80016bc <HAL_RCC_OscConfig+0x350>)
 8001662:	6812      	ldr	r2, [r2, #0]
 8001664:	2180      	movs	r1, #128	; 0x80
 8001666:	0049      	lsls	r1, r1, #1
 8001668:	430a      	orrs	r2, r1
 800166a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800166c:	f7ff fa12 	bl	8000a94 <HAL_GetTick>
 8001670:	0003      	movs	r3, r0
 8001672:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001674:	e008      	b.n	8001688 <HAL_RCC_OscConfig+0x31c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001676:	f7ff fa0d 	bl	8000a94 <HAL_GetTick>
 800167a:	0002      	movs	r2, r0
 800167c:	69bb      	ldr	r3, [r7, #24]
 800167e:	1ad3      	subs	r3, r2, r3
 8001680:	2b02      	cmp	r3, #2
 8001682:	d901      	bls.n	8001688 <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 8001684:	2303      	movs	r3, #3
 8001686:	e1d5      	b.n	8001a34 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001688:	4b0c      	ldr	r3, [pc, #48]	; (80016bc <HAL_RCC_OscConfig+0x350>)
 800168a:	681a      	ldr	r2, [r3, #0]
 800168c:	2380      	movs	r3, #128	; 0x80
 800168e:	009b      	lsls	r3, r3, #2
 8001690:	4013      	ands	r3, r2
 8001692:	d0f0      	beq.n	8001676 <HAL_RCC_OscConfig+0x30a>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001694:	4a09      	ldr	r2, [pc, #36]	; (80016bc <HAL_RCC_OscConfig+0x350>)
 8001696:	4b09      	ldr	r3, [pc, #36]	; (80016bc <HAL_RCC_OscConfig+0x350>)
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	490f      	ldr	r1, [pc, #60]	; (80016d8 <HAL_RCC_OscConfig+0x36c>)
 800169c:	4019      	ands	r1, r3
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6a1b      	ldr	r3, [r3, #32]
 80016a2:	430b      	orrs	r3, r1
 80016a4:	6053      	str	r3, [r2, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016a6:	4a05      	ldr	r2, [pc, #20]	; (80016bc <HAL_RCC_OscConfig+0x350>)
 80016a8:	4b04      	ldr	r3, [pc, #16]	; (80016bc <HAL_RCC_OscConfig+0x350>)
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	021b      	lsls	r3, r3, #8
 80016ae:	0a19      	lsrs	r1, r3, #8
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	69db      	ldr	r3, [r3, #28]
 80016b4:	061b      	lsls	r3, r3, #24
 80016b6:	430b      	orrs	r3, r1
 80016b8:	6053      	str	r3, [r2, #4]
 80016ba:	e029      	b.n	8001710 <HAL_RCC_OscConfig+0x3a4>
 80016bc:	40021000 	.word	0x40021000
 80016c0:	fffeffff 	.word	0xfffeffff
 80016c4:	fffbffff 	.word	0xfffbffff
 80016c8:	ffffe0ff 	.word	0xffffe0ff
 80016cc:	08002a2c 	.word	0x08002a2c
 80016d0:	20000000 	.word	0x20000000
 80016d4:	20000004 	.word	0x20000004
 80016d8:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80016dc:	4bbe      	ldr	r3, [pc, #760]	; (80019d8 <HAL_RCC_OscConfig+0x66c>)
 80016de:	4abe      	ldr	r2, [pc, #760]	; (80019d8 <HAL_RCC_OscConfig+0x66c>)
 80016e0:	6812      	ldr	r2, [r2, #0]
 80016e2:	49be      	ldr	r1, [pc, #760]	; (80019dc <HAL_RCC_OscConfig+0x670>)
 80016e4:	400a      	ands	r2, r1
 80016e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016e8:	f7ff f9d4 	bl	8000a94 <HAL_GetTick>
 80016ec:	0003      	movs	r3, r0
 80016ee:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80016f0:	e008      	b.n	8001704 <HAL_RCC_OscConfig+0x398>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80016f2:	f7ff f9cf 	bl	8000a94 <HAL_GetTick>
 80016f6:	0002      	movs	r2, r0
 80016f8:	69bb      	ldr	r3, [r7, #24]
 80016fa:	1ad3      	subs	r3, r2, r3
 80016fc:	2b02      	cmp	r3, #2
 80016fe:	d901      	bls.n	8001704 <HAL_RCC_OscConfig+0x398>
          {
            return HAL_TIMEOUT;
 8001700:	2303      	movs	r3, #3
 8001702:	e197      	b.n	8001a34 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001704:	4bb4      	ldr	r3, [pc, #720]	; (80019d8 <HAL_RCC_OscConfig+0x66c>)
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	2380      	movs	r3, #128	; 0x80
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	4013      	ands	r3, r2
 800170e:	d1f0      	bne.n	80016f2 <HAL_RCC_OscConfig+0x386>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	2208      	movs	r2, #8
 8001716:	4013      	ands	r3, r2
 8001718:	d036      	beq.n	8001788 <HAL_RCC_OscConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	695b      	ldr	r3, [r3, #20]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d019      	beq.n	8001756 <HAL_RCC_OscConfig+0x3ea>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001722:	4bad      	ldr	r3, [pc, #692]	; (80019d8 <HAL_RCC_OscConfig+0x66c>)
 8001724:	4aac      	ldr	r2, [pc, #688]	; (80019d8 <HAL_RCC_OscConfig+0x66c>)
 8001726:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001728:	2101      	movs	r1, #1
 800172a:	430a      	orrs	r2, r1
 800172c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800172e:	f7ff f9b1 	bl	8000a94 <HAL_GetTick>
 8001732:	0003      	movs	r3, r0
 8001734:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001736:	e008      	b.n	800174a <HAL_RCC_OscConfig+0x3de>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001738:	f7ff f9ac 	bl	8000a94 <HAL_GetTick>
 800173c:	0002      	movs	r2, r0
 800173e:	69bb      	ldr	r3, [r7, #24]
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	2b02      	cmp	r3, #2
 8001744:	d901      	bls.n	800174a <HAL_RCC_OscConfig+0x3de>
        {
          return HAL_TIMEOUT;
 8001746:	2303      	movs	r3, #3
 8001748:	e174      	b.n	8001a34 <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800174a:	4ba3      	ldr	r3, [pc, #652]	; (80019d8 <HAL_RCC_OscConfig+0x66c>)
 800174c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800174e:	2202      	movs	r2, #2
 8001750:	4013      	ands	r3, r2
 8001752:	d0f1      	beq.n	8001738 <HAL_RCC_OscConfig+0x3cc>
 8001754:	e018      	b.n	8001788 <HAL_RCC_OscConfig+0x41c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001756:	4ba0      	ldr	r3, [pc, #640]	; (80019d8 <HAL_RCC_OscConfig+0x66c>)
 8001758:	4a9f      	ldr	r2, [pc, #636]	; (80019d8 <HAL_RCC_OscConfig+0x66c>)
 800175a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800175c:	2101      	movs	r1, #1
 800175e:	438a      	bics	r2, r1
 8001760:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001762:	f7ff f997 	bl	8000a94 <HAL_GetTick>
 8001766:	0003      	movs	r3, r0
 8001768:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800176a:	e008      	b.n	800177e <HAL_RCC_OscConfig+0x412>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800176c:	f7ff f992 	bl	8000a94 <HAL_GetTick>
 8001770:	0002      	movs	r2, r0
 8001772:	69bb      	ldr	r3, [r7, #24]
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	2b02      	cmp	r3, #2
 8001778:	d901      	bls.n	800177e <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800177a:	2303      	movs	r3, #3
 800177c:	e15a      	b.n	8001a34 <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800177e:	4b96      	ldr	r3, [pc, #600]	; (80019d8 <HAL_RCC_OscConfig+0x66c>)
 8001780:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001782:	2202      	movs	r2, #2
 8001784:	4013      	ands	r3, r2
 8001786:	d1f1      	bne.n	800176c <HAL_RCC_OscConfig+0x400>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	2204      	movs	r2, #4
 800178e:	4013      	ands	r3, r2
 8001790:	d100      	bne.n	8001794 <HAL_RCC_OscConfig+0x428>
 8001792:	e0af      	b.n	80018f4 <HAL_RCC_OscConfig+0x588>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001794:	2327      	movs	r3, #39	; 0x27
 8001796:	18fb      	adds	r3, r7, r3
 8001798:	2200      	movs	r2, #0
 800179a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800179c:	4b8e      	ldr	r3, [pc, #568]	; (80019d8 <HAL_RCC_OscConfig+0x66c>)
 800179e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80017a0:	2380      	movs	r3, #128	; 0x80
 80017a2:	055b      	lsls	r3, r3, #21
 80017a4:	4013      	ands	r3, r2
 80017a6:	d10a      	bne.n	80017be <HAL_RCC_OscConfig+0x452>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017a8:	4b8b      	ldr	r3, [pc, #556]	; (80019d8 <HAL_RCC_OscConfig+0x66c>)
 80017aa:	4a8b      	ldr	r2, [pc, #556]	; (80019d8 <HAL_RCC_OscConfig+0x66c>)
 80017ac:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80017ae:	2180      	movs	r1, #128	; 0x80
 80017b0:	0549      	lsls	r1, r1, #21
 80017b2:	430a      	orrs	r2, r1
 80017b4:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80017b6:	2327      	movs	r3, #39	; 0x27
 80017b8:	18fb      	adds	r3, r7, r3
 80017ba:	2201      	movs	r2, #1
 80017bc:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017be:	4b88      	ldr	r3, [pc, #544]	; (80019e0 <HAL_RCC_OscConfig+0x674>)
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	2380      	movs	r3, #128	; 0x80
 80017c4:	005b      	lsls	r3, r3, #1
 80017c6:	4013      	ands	r3, r2
 80017c8:	d11a      	bne.n	8001800 <HAL_RCC_OscConfig+0x494>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017ca:	4b85      	ldr	r3, [pc, #532]	; (80019e0 <HAL_RCC_OscConfig+0x674>)
 80017cc:	4a84      	ldr	r2, [pc, #528]	; (80019e0 <HAL_RCC_OscConfig+0x674>)
 80017ce:	6812      	ldr	r2, [r2, #0]
 80017d0:	2180      	movs	r1, #128	; 0x80
 80017d2:	0049      	lsls	r1, r1, #1
 80017d4:	430a      	orrs	r2, r1
 80017d6:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017d8:	f7ff f95c 	bl	8000a94 <HAL_GetTick>
 80017dc:	0003      	movs	r3, r0
 80017de:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017e0:	e008      	b.n	80017f4 <HAL_RCC_OscConfig+0x488>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017e2:	f7ff f957 	bl	8000a94 <HAL_GetTick>
 80017e6:	0002      	movs	r2, r0
 80017e8:	69bb      	ldr	r3, [r7, #24]
 80017ea:	1ad3      	subs	r3, r2, r3
 80017ec:	2b64      	cmp	r3, #100	; 0x64
 80017ee:	d901      	bls.n	80017f4 <HAL_RCC_OscConfig+0x488>
        {
          return HAL_TIMEOUT;
 80017f0:	2303      	movs	r3, #3
 80017f2:	e11f      	b.n	8001a34 <HAL_RCC_OscConfig+0x6c8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017f4:	4b7a      	ldr	r3, [pc, #488]	; (80019e0 <HAL_RCC_OscConfig+0x674>)
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	2380      	movs	r3, #128	; 0x80
 80017fa:	005b      	lsls	r3, r3, #1
 80017fc:	4013      	ands	r3, r2
 80017fe:	d0f0      	beq.n	80017e2 <HAL_RCC_OscConfig+0x476>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	689a      	ldr	r2, [r3, #8]
 8001804:	2380      	movs	r3, #128	; 0x80
 8001806:	005b      	lsls	r3, r3, #1
 8001808:	429a      	cmp	r2, r3
 800180a:	d107      	bne.n	800181c <HAL_RCC_OscConfig+0x4b0>
 800180c:	4b72      	ldr	r3, [pc, #456]	; (80019d8 <HAL_RCC_OscConfig+0x66c>)
 800180e:	4a72      	ldr	r2, [pc, #456]	; (80019d8 <HAL_RCC_OscConfig+0x66c>)
 8001810:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001812:	2180      	movs	r1, #128	; 0x80
 8001814:	0049      	lsls	r1, r1, #1
 8001816:	430a      	orrs	r2, r1
 8001818:	651a      	str	r2, [r3, #80]	; 0x50
 800181a:	e031      	b.n	8001880 <HAL_RCC_OscConfig+0x514>
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d10c      	bne.n	800183e <HAL_RCC_OscConfig+0x4d2>
 8001824:	4b6c      	ldr	r3, [pc, #432]	; (80019d8 <HAL_RCC_OscConfig+0x66c>)
 8001826:	4a6c      	ldr	r2, [pc, #432]	; (80019d8 <HAL_RCC_OscConfig+0x66c>)
 8001828:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800182a:	496c      	ldr	r1, [pc, #432]	; (80019dc <HAL_RCC_OscConfig+0x670>)
 800182c:	400a      	ands	r2, r1
 800182e:	651a      	str	r2, [r3, #80]	; 0x50
 8001830:	4b69      	ldr	r3, [pc, #420]	; (80019d8 <HAL_RCC_OscConfig+0x66c>)
 8001832:	4a69      	ldr	r2, [pc, #420]	; (80019d8 <HAL_RCC_OscConfig+0x66c>)
 8001834:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001836:	496b      	ldr	r1, [pc, #428]	; (80019e4 <HAL_RCC_OscConfig+0x678>)
 8001838:	400a      	ands	r2, r1
 800183a:	651a      	str	r2, [r3, #80]	; 0x50
 800183c:	e020      	b.n	8001880 <HAL_RCC_OscConfig+0x514>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	689a      	ldr	r2, [r3, #8]
 8001842:	23a0      	movs	r3, #160	; 0xa0
 8001844:	00db      	lsls	r3, r3, #3
 8001846:	429a      	cmp	r2, r3
 8001848:	d10e      	bne.n	8001868 <HAL_RCC_OscConfig+0x4fc>
 800184a:	4b63      	ldr	r3, [pc, #396]	; (80019d8 <HAL_RCC_OscConfig+0x66c>)
 800184c:	4a62      	ldr	r2, [pc, #392]	; (80019d8 <HAL_RCC_OscConfig+0x66c>)
 800184e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001850:	2180      	movs	r1, #128	; 0x80
 8001852:	00c9      	lsls	r1, r1, #3
 8001854:	430a      	orrs	r2, r1
 8001856:	651a      	str	r2, [r3, #80]	; 0x50
 8001858:	4b5f      	ldr	r3, [pc, #380]	; (80019d8 <HAL_RCC_OscConfig+0x66c>)
 800185a:	4a5f      	ldr	r2, [pc, #380]	; (80019d8 <HAL_RCC_OscConfig+0x66c>)
 800185c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800185e:	2180      	movs	r1, #128	; 0x80
 8001860:	0049      	lsls	r1, r1, #1
 8001862:	430a      	orrs	r2, r1
 8001864:	651a      	str	r2, [r3, #80]	; 0x50
 8001866:	e00b      	b.n	8001880 <HAL_RCC_OscConfig+0x514>
 8001868:	4b5b      	ldr	r3, [pc, #364]	; (80019d8 <HAL_RCC_OscConfig+0x66c>)
 800186a:	4a5b      	ldr	r2, [pc, #364]	; (80019d8 <HAL_RCC_OscConfig+0x66c>)
 800186c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800186e:	495b      	ldr	r1, [pc, #364]	; (80019dc <HAL_RCC_OscConfig+0x670>)
 8001870:	400a      	ands	r2, r1
 8001872:	651a      	str	r2, [r3, #80]	; 0x50
 8001874:	4b58      	ldr	r3, [pc, #352]	; (80019d8 <HAL_RCC_OscConfig+0x66c>)
 8001876:	4a58      	ldr	r2, [pc, #352]	; (80019d8 <HAL_RCC_OscConfig+0x66c>)
 8001878:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800187a:	495a      	ldr	r1, [pc, #360]	; (80019e4 <HAL_RCC_OscConfig+0x678>)
 800187c:	400a      	ands	r2, r1
 800187e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d015      	beq.n	80018b4 <HAL_RCC_OscConfig+0x548>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001888:	f7ff f904 	bl	8000a94 <HAL_GetTick>
 800188c:	0003      	movs	r3, r0
 800188e:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001890:	e009      	b.n	80018a6 <HAL_RCC_OscConfig+0x53a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001892:	f7ff f8ff 	bl	8000a94 <HAL_GetTick>
 8001896:	0002      	movs	r2, r0
 8001898:	69bb      	ldr	r3, [r7, #24]
 800189a:	1ad3      	subs	r3, r2, r3
 800189c:	4a52      	ldr	r2, [pc, #328]	; (80019e8 <HAL_RCC_OscConfig+0x67c>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d901      	bls.n	80018a6 <HAL_RCC_OscConfig+0x53a>
        {
          return HAL_TIMEOUT;
 80018a2:	2303      	movs	r3, #3
 80018a4:	e0c6      	b.n	8001a34 <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80018a6:	4b4c      	ldr	r3, [pc, #304]	; (80019d8 <HAL_RCC_OscConfig+0x66c>)
 80018a8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80018aa:	2380      	movs	r3, #128	; 0x80
 80018ac:	009b      	lsls	r3, r3, #2
 80018ae:	4013      	ands	r3, r2
 80018b0:	d0ef      	beq.n	8001892 <HAL_RCC_OscConfig+0x526>
 80018b2:	e014      	b.n	80018de <HAL_RCC_OscConfig+0x572>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018b4:	f7ff f8ee 	bl	8000a94 <HAL_GetTick>
 80018b8:	0003      	movs	r3, r0
 80018ba:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80018bc:	e009      	b.n	80018d2 <HAL_RCC_OscConfig+0x566>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018be:	f7ff f8e9 	bl	8000a94 <HAL_GetTick>
 80018c2:	0002      	movs	r2, r0
 80018c4:	69bb      	ldr	r3, [r7, #24]
 80018c6:	1ad3      	subs	r3, r2, r3
 80018c8:	4a47      	ldr	r2, [pc, #284]	; (80019e8 <HAL_RCC_OscConfig+0x67c>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d901      	bls.n	80018d2 <HAL_RCC_OscConfig+0x566>
        {
          return HAL_TIMEOUT;
 80018ce:	2303      	movs	r3, #3
 80018d0:	e0b0      	b.n	8001a34 <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80018d2:	4b41      	ldr	r3, [pc, #260]	; (80019d8 <HAL_RCC_OscConfig+0x66c>)
 80018d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80018d6:	2380      	movs	r3, #128	; 0x80
 80018d8:	009b      	lsls	r3, r3, #2
 80018da:	4013      	ands	r3, r2
 80018dc:	d1ef      	bne.n	80018be <HAL_RCC_OscConfig+0x552>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80018de:	2327      	movs	r3, #39	; 0x27
 80018e0:	18fb      	adds	r3, r7, r3
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d105      	bne.n	80018f4 <HAL_RCC_OscConfig+0x588>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018e8:	4b3b      	ldr	r3, [pc, #236]	; (80019d8 <HAL_RCC_OscConfig+0x66c>)
 80018ea:	4a3b      	ldr	r2, [pc, #236]	; (80019d8 <HAL_RCC_OscConfig+0x66c>)
 80018ec:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80018ee:	493f      	ldr	r1, [pc, #252]	; (80019ec <HAL_RCC_OscConfig+0x680>)
 80018f0:	400a      	ands	r2, r1
 80018f2:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d100      	bne.n	80018fe <HAL_RCC_OscConfig+0x592>
 80018fc:	e099      	b.n	8001a32 <HAL_RCC_OscConfig+0x6c6>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018fe:	6a3b      	ldr	r3, [r7, #32]
 8001900:	2b0c      	cmp	r3, #12
 8001902:	d063      	beq.n	80019cc <HAL_RCC_OscConfig+0x660>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001908:	2b02      	cmp	r3, #2
 800190a:	d144      	bne.n	8001996 <HAL_RCC_OscConfig+0x62a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800190c:	4b32      	ldr	r3, [pc, #200]	; (80019d8 <HAL_RCC_OscConfig+0x66c>)
 800190e:	4a32      	ldr	r2, [pc, #200]	; (80019d8 <HAL_RCC_OscConfig+0x66c>)
 8001910:	6812      	ldr	r2, [r2, #0]
 8001912:	4937      	ldr	r1, [pc, #220]	; (80019f0 <HAL_RCC_OscConfig+0x684>)
 8001914:	400a      	ands	r2, r1
 8001916:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001918:	f7ff f8bc 	bl	8000a94 <HAL_GetTick>
 800191c:	0003      	movs	r3, r0
 800191e:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001920:	e008      	b.n	8001934 <HAL_RCC_OscConfig+0x5c8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001922:	f7ff f8b7 	bl	8000a94 <HAL_GetTick>
 8001926:	0002      	movs	r2, r0
 8001928:	69bb      	ldr	r3, [r7, #24]
 800192a:	1ad3      	subs	r3, r2, r3
 800192c:	2b02      	cmp	r3, #2
 800192e:	d901      	bls.n	8001934 <HAL_RCC_OscConfig+0x5c8>
          {
            return HAL_TIMEOUT;
 8001930:	2303      	movs	r3, #3
 8001932:	e07f      	b.n	8001a34 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001934:	4b28      	ldr	r3, [pc, #160]	; (80019d8 <HAL_RCC_OscConfig+0x66c>)
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	2380      	movs	r3, #128	; 0x80
 800193a:	049b      	lsls	r3, r3, #18
 800193c:	4013      	ands	r3, r2
 800193e:	d1f0      	bne.n	8001922 <HAL_RCC_OscConfig+0x5b6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001940:	4a25      	ldr	r2, [pc, #148]	; (80019d8 <HAL_RCC_OscConfig+0x66c>)
 8001942:	4b25      	ldr	r3, [pc, #148]	; (80019d8 <HAL_RCC_OscConfig+0x66c>)
 8001944:	68db      	ldr	r3, [r3, #12]
 8001946:	492b      	ldr	r1, [pc, #172]	; (80019f4 <HAL_RCC_OscConfig+0x688>)
 8001948:	4019      	ands	r1, r3
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001952:	4318      	orrs	r0, r3
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001958:	4303      	orrs	r3, r0
 800195a:	430b      	orrs	r3, r1
 800195c:	60d3      	str	r3, [r2, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800195e:	4b1e      	ldr	r3, [pc, #120]	; (80019d8 <HAL_RCC_OscConfig+0x66c>)
 8001960:	4a1d      	ldr	r2, [pc, #116]	; (80019d8 <HAL_RCC_OscConfig+0x66c>)
 8001962:	6812      	ldr	r2, [r2, #0]
 8001964:	2180      	movs	r1, #128	; 0x80
 8001966:	0449      	lsls	r1, r1, #17
 8001968:	430a      	orrs	r2, r1
 800196a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800196c:	f7ff f892 	bl	8000a94 <HAL_GetTick>
 8001970:	0003      	movs	r3, r0
 8001972:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001974:	e008      	b.n	8001988 <HAL_RCC_OscConfig+0x61c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001976:	f7ff f88d 	bl	8000a94 <HAL_GetTick>
 800197a:	0002      	movs	r2, r0
 800197c:	69bb      	ldr	r3, [r7, #24]
 800197e:	1ad3      	subs	r3, r2, r3
 8001980:	2b02      	cmp	r3, #2
 8001982:	d901      	bls.n	8001988 <HAL_RCC_OscConfig+0x61c>
          {
            return HAL_TIMEOUT;
 8001984:	2303      	movs	r3, #3
 8001986:	e055      	b.n	8001a34 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001988:	4b13      	ldr	r3, [pc, #76]	; (80019d8 <HAL_RCC_OscConfig+0x66c>)
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	2380      	movs	r3, #128	; 0x80
 800198e:	049b      	lsls	r3, r3, #18
 8001990:	4013      	ands	r3, r2
 8001992:	d0f0      	beq.n	8001976 <HAL_RCC_OscConfig+0x60a>
 8001994:	e04d      	b.n	8001a32 <HAL_RCC_OscConfig+0x6c6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001996:	4b10      	ldr	r3, [pc, #64]	; (80019d8 <HAL_RCC_OscConfig+0x66c>)
 8001998:	4a0f      	ldr	r2, [pc, #60]	; (80019d8 <HAL_RCC_OscConfig+0x66c>)
 800199a:	6812      	ldr	r2, [r2, #0]
 800199c:	4914      	ldr	r1, [pc, #80]	; (80019f0 <HAL_RCC_OscConfig+0x684>)
 800199e:	400a      	ands	r2, r1
 80019a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019a2:	f7ff f877 	bl	8000a94 <HAL_GetTick>
 80019a6:	0003      	movs	r3, r0
 80019a8:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80019aa:	e008      	b.n	80019be <HAL_RCC_OscConfig+0x652>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019ac:	f7ff f872 	bl	8000a94 <HAL_GetTick>
 80019b0:	0002      	movs	r2, r0
 80019b2:	69bb      	ldr	r3, [r7, #24]
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	2b02      	cmp	r3, #2
 80019b8:	d901      	bls.n	80019be <HAL_RCC_OscConfig+0x652>
          {
            return HAL_TIMEOUT;
 80019ba:	2303      	movs	r3, #3
 80019bc:	e03a      	b.n	8001a34 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80019be:	4b06      	ldr	r3, [pc, #24]	; (80019d8 <HAL_RCC_OscConfig+0x66c>)
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	2380      	movs	r3, #128	; 0x80
 80019c4:	049b      	lsls	r3, r3, #18
 80019c6:	4013      	ands	r3, r2
 80019c8:	d1f0      	bne.n	80019ac <HAL_RCC_OscConfig+0x640>
 80019ca:	e032      	b.n	8001a32 <HAL_RCC_OscConfig+0x6c6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d0:	2b01      	cmp	r3, #1
 80019d2:	d111      	bne.n	80019f8 <HAL_RCC_OscConfig+0x68c>
      {
        return HAL_ERROR;
 80019d4:	2301      	movs	r3, #1
 80019d6:	e02d      	b.n	8001a34 <HAL_RCC_OscConfig+0x6c8>
 80019d8:	40021000 	.word	0x40021000
 80019dc:	fffffeff 	.word	0xfffffeff
 80019e0:	40007000 	.word	0x40007000
 80019e4:	fffffbff 	.word	0xfffffbff
 80019e8:	00001388 	.word	0x00001388
 80019ec:	efffffff 	.word	0xefffffff
 80019f0:	feffffff 	.word	0xfeffffff
 80019f4:	ff02ffff 	.word	0xff02ffff
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80019f8:	4b10      	ldr	r3, [pc, #64]	; (8001a3c <HAL_RCC_OscConfig+0x6d0>)
 80019fa:	68db      	ldr	r3, [r3, #12]
 80019fc:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019fe:	69fa      	ldr	r2, [r7, #28]
 8001a00:	2380      	movs	r3, #128	; 0x80
 8001a02:	025b      	lsls	r3, r3, #9
 8001a04:	401a      	ands	r2, r3
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a0a:	429a      	cmp	r2, r3
 8001a0c:	d10f      	bne.n	8001a2e <HAL_RCC_OscConfig+0x6c2>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001a0e:	69fa      	ldr	r2, [r7, #28]
 8001a10:	23f0      	movs	r3, #240	; 0xf0
 8001a12:	039b      	lsls	r3, r3, #14
 8001a14:	401a      	ands	r2, r3
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a1a:	429a      	cmp	r2, r3
 8001a1c:	d107      	bne.n	8001a2e <HAL_RCC_OscConfig+0x6c2>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001a1e:	69fa      	ldr	r2, [r7, #28]
 8001a20:	23c0      	movs	r3, #192	; 0xc0
 8001a22:	041b      	lsls	r3, r3, #16
 8001a24:	401a      	ands	r2, r3
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001a2a:	429a      	cmp	r2, r3
 8001a2c:	d001      	beq.n	8001a32 <HAL_RCC_OscConfig+0x6c6>
        {
          return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e000      	b.n	8001a34 <HAL_RCC_OscConfig+0x6c8>
        }
      }
    }
  }
  return HAL_OK;
 8001a32:	2300      	movs	r3, #0
}
 8001a34:	0018      	movs	r0, r3
 8001a36:	46bd      	mov	sp, r7
 8001a38:	b00b      	add	sp, #44	; 0x2c
 8001a3a:	bd90      	pop	{r4, r7, pc}
 8001a3c:	40021000 	.word	0x40021000

08001a40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a40:	b590      	push	{r4, r7, lr}
 8001a42:	b085      	sub	sp, #20
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
 8001a48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d101      	bne.n	8001a54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a50:	2301      	movs	r3, #1
 8001a52:	e128      	b.n	8001ca6 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a54:	4b96      	ldr	r3, [pc, #600]	; (8001cb0 <HAL_RCC_ClockConfig+0x270>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	2201      	movs	r2, #1
 8001a5a:	401a      	ands	r2, r3
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	d21e      	bcs.n	8001aa0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a62:	4b93      	ldr	r3, [pc, #588]	; (8001cb0 <HAL_RCC_ClockConfig+0x270>)
 8001a64:	4a92      	ldr	r2, [pc, #584]	; (8001cb0 <HAL_RCC_ClockConfig+0x270>)
 8001a66:	6812      	ldr	r2, [r2, #0]
 8001a68:	2101      	movs	r1, #1
 8001a6a:	438a      	bics	r2, r1
 8001a6c:	0011      	movs	r1, r2
 8001a6e:	683a      	ldr	r2, [r7, #0]
 8001a70:	430a      	orrs	r2, r1
 8001a72:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001a74:	f7ff f80e 	bl	8000a94 <HAL_GetTick>
 8001a78:	0003      	movs	r3, r0
 8001a7a:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a7c:	e009      	b.n	8001a92 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a7e:	f7ff f809 	bl	8000a94 <HAL_GetTick>
 8001a82:	0002      	movs	r2, r0
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	1ad3      	subs	r3, r2, r3
 8001a88:	4a8a      	ldr	r2, [pc, #552]	; (8001cb4 <HAL_RCC_ClockConfig+0x274>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d901      	bls.n	8001a92 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	e109      	b.n	8001ca6 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a92:	4b87      	ldr	r3, [pc, #540]	; (8001cb0 <HAL_RCC_ClockConfig+0x270>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	2201      	movs	r2, #1
 8001a98:	401a      	ands	r2, r3
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d1ee      	bne.n	8001a7e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	2202      	movs	r2, #2
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	d009      	beq.n	8001abe <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001aaa:	4a83      	ldr	r2, [pc, #524]	; (8001cb8 <HAL_RCC_ClockConfig+0x278>)
 8001aac:	4b82      	ldr	r3, [pc, #520]	; (8001cb8 <HAL_RCC_ClockConfig+0x278>)
 8001aae:	68db      	ldr	r3, [r3, #12]
 8001ab0:	21f0      	movs	r1, #240	; 0xf0
 8001ab2:	438b      	bics	r3, r1
 8001ab4:	0019      	movs	r1, r3
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	430b      	orrs	r3, r1
 8001abc:	60d3      	str	r3, [r2, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	d100      	bne.n	8001aca <HAL_RCC_ClockConfig+0x8a>
 8001ac8:	e089      	b.n	8001bde <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	2b02      	cmp	r3, #2
 8001ad0:	d107      	bne.n	8001ae2 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001ad2:	4b79      	ldr	r3, [pc, #484]	; (8001cb8 <HAL_RCC_ClockConfig+0x278>)
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	2380      	movs	r3, #128	; 0x80
 8001ad8:	029b      	lsls	r3, r3, #10
 8001ada:	4013      	ands	r3, r2
 8001adc:	d120      	bne.n	8001b20 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e0e1      	b.n	8001ca6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	2b03      	cmp	r3, #3
 8001ae8:	d107      	bne.n	8001afa <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001aea:	4b73      	ldr	r3, [pc, #460]	; (8001cb8 <HAL_RCC_ClockConfig+0x278>)
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	2380      	movs	r3, #128	; 0x80
 8001af0:	049b      	lsls	r3, r3, #18
 8001af2:	4013      	ands	r3, r2
 8001af4:	d114      	bne.n	8001b20 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
 8001af8:	e0d5      	b.n	8001ca6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	d106      	bne.n	8001b10 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b02:	4b6d      	ldr	r3, [pc, #436]	; (8001cb8 <HAL_RCC_ClockConfig+0x278>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	2204      	movs	r2, #4
 8001b08:	4013      	ands	r3, r2
 8001b0a:	d109      	bne.n	8001b20 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	e0ca      	b.n	8001ca6 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001b10:	4b69      	ldr	r3, [pc, #420]	; (8001cb8 <HAL_RCC_ClockConfig+0x278>)
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	2380      	movs	r3, #128	; 0x80
 8001b16:	009b      	lsls	r3, r3, #2
 8001b18:	4013      	ands	r3, r2
 8001b1a:	d101      	bne.n	8001b20 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	e0c2      	b.n	8001ca6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b20:	4a65      	ldr	r2, [pc, #404]	; (8001cb8 <HAL_RCC_ClockConfig+0x278>)
 8001b22:	4b65      	ldr	r3, [pc, #404]	; (8001cb8 <HAL_RCC_ClockConfig+0x278>)
 8001b24:	68db      	ldr	r3, [r3, #12]
 8001b26:	2103      	movs	r1, #3
 8001b28:	438b      	bics	r3, r1
 8001b2a:	0019      	movs	r1, r3
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	430b      	orrs	r3, r1
 8001b32:	60d3      	str	r3, [r2, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b34:	f7fe ffae 	bl	8000a94 <HAL_GetTick>
 8001b38:	0003      	movs	r3, r0
 8001b3a:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	2b02      	cmp	r3, #2
 8001b42:	d111      	bne.n	8001b68 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b44:	e009      	b.n	8001b5a <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b46:	f7fe ffa5 	bl	8000a94 <HAL_GetTick>
 8001b4a:	0002      	movs	r2, r0
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	1ad3      	subs	r3, r2, r3
 8001b50:	4a58      	ldr	r2, [pc, #352]	; (8001cb4 <HAL_RCC_ClockConfig+0x274>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d901      	bls.n	8001b5a <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8001b56:	2303      	movs	r3, #3
 8001b58:	e0a5      	b.n	8001ca6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b5a:	4b57      	ldr	r3, [pc, #348]	; (8001cb8 <HAL_RCC_ClockConfig+0x278>)
 8001b5c:	68db      	ldr	r3, [r3, #12]
 8001b5e:	220c      	movs	r2, #12
 8001b60:	4013      	ands	r3, r2
 8001b62:	2b08      	cmp	r3, #8
 8001b64:	d1ef      	bne.n	8001b46 <HAL_RCC_ClockConfig+0x106>
 8001b66:	e03a      	b.n	8001bde <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	2b03      	cmp	r3, #3
 8001b6e:	d111      	bne.n	8001b94 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b70:	e009      	b.n	8001b86 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b72:	f7fe ff8f 	bl	8000a94 <HAL_GetTick>
 8001b76:	0002      	movs	r2, r0
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	1ad3      	subs	r3, r2, r3
 8001b7c:	4a4d      	ldr	r2, [pc, #308]	; (8001cb4 <HAL_RCC_ClockConfig+0x274>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d901      	bls.n	8001b86 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8001b82:	2303      	movs	r3, #3
 8001b84:	e08f      	b.n	8001ca6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b86:	4b4c      	ldr	r3, [pc, #304]	; (8001cb8 <HAL_RCC_ClockConfig+0x278>)
 8001b88:	68db      	ldr	r3, [r3, #12]
 8001b8a:	220c      	movs	r2, #12
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	2b0c      	cmp	r3, #12
 8001b90:	d1ef      	bne.n	8001b72 <HAL_RCC_ClockConfig+0x132>
 8001b92:	e024      	b.n	8001bde <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d11b      	bne.n	8001bd4 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b9c:	e009      	b.n	8001bb2 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b9e:	f7fe ff79 	bl	8000a94 <HAL_GetTick>
 8001ba2:	0002      	movs	r2, r0
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	1ad3      	subs	r3, r2, r3
 8001ba8:	4a42      	ldr	r2, [pc, #264]	; (8001cb4 <HAL_RCC_ClockConfig+0x274>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d901      	bls.n	8001bb2 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	e079      	b.n	8001ca6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001bb2:	4b41      	ldr	r3, [pc, #260]	; (8001cb8 <HAL_RCC_ClockConfig+0x278>)
 8001bb4:	68db      	ldr	r3, [r3, #12]
 8001bb6:	220c      	movs	r2, #12
 8001bb8:	4013      	ands	r3, r2
 8001bba:	2b04      	cmp	r3, #4
 8001bbc:	d1ef      	bne.n	8001b9e <HAL_RCC_ClockConfig+0x15e>
 8001bbe:	e00e      	b.n	8001bde <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bc0:	f7fe ff68 	bl	8000a94 <HAL_GetTick>
 8001bc4:	0002      	movs	r2, r0
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	4a3a      	ldr	r2, [pc, #232]	; (8001cb4 <HAL_RCC_ClockConfig+0x274>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d901      	bls.n	8001bd4 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001bd0:	2303      	movs	r3, #3
 8001bd2:	e068      	b.n	8001ca6 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001bd4:	4b38      	ldr	r3, [pc, #224]	; (8001cb8 <HAL_RCC_ClockConfig+0x278>)
 8001bd6:	68db      	ldr	r3, [r3, #12]
 8001bd8:	220c      	movs	r2, #12
 8001bda:	4013      	ands	r3, r2
 8001bdc:	d1f0      	bne.n	8001bc0 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001bde:	4b34      	ldr	r3, [pc, #208]	; (8001cb0 <HAL_RCC_ClockConfig+0x270>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	2201      	movs	r2, #1
 8001be4:	401a      	ands	r2, r3
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d91e      	bls.n	8001c2a <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bec:	4b30      	ldr	r3, [pc, #192]	; (8001cb0 <HAL_RCC_ClockConfig+0x270>)
 8001bee:	4a30      	ldr	r2, [pc, #192]	; (8001cb0 <HAL_RCC_ClockConfig+0x270>)
 8001bf0:	6812      	ldr	r2, [r2, #0]
 8001bf2:	2101      	movs	r1, #1
 8001bf4:	438a      	bics	r2, r1
 8001bf6:	0011      	movs	r1, r2
 8001bf8:	683a      	ldr	r2, [r7, #0]
 8001bfa:	430a      	orrs	r2, r1
 8001bfc:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001bfe:	f7fe ff49 	bl	8000a94 <HAL_GetTick>
 8001c02:	0003      	movs	r3, r0
 8001c04:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c06:	e009      	b.n	8001c1c <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c08:	f7fe ff44 	bl	8000a94 <HAL_GetTick>
 8001c0c:	0002      	movs	r2, r0
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	1ad3      	subs	r3, r2, r3
 8001c12:	4a28      	ldr	r2, [pc, #160]	; (8001cb4 <HAL_RCC_ClockConfig+0x274>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d901      	bls.n	8001c1c <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001c18:	2303      	movs	r3, #3
 8001c1a:	e044      	b.n	8001ca6 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c1c:	4b24      	ldr	r3, [pc, #144]	; (8001cb0 <HAL_RCC_ClockConfig+0x270>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	2201      	movs	r2, #1
 8001c22:	401a      	ands	r2, r3
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	429a      	cmp	r2, r3
 8001c28:	d1ee      	bne.n	8001c08 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	2204      	movs	r2, #4
 8001c30:	4013      	ands	r3, r2
 8001c32:	d008      	beq.n	8001c46 <HAL_RCC_ClockConfig+0x206>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c34:	4a20      	ldr	r2, [pc, #128]	; (8001cb8 <HAL_RCC_ClockConfig+0x278>)
 8001c36:	4b20      	ldr	r3, [pc, #128]	; (8001cb8 <HAL_RCC_ClockConfig+0x278>)
 8001c38:	68db      	ldr	r3, [r3, #12]
 8001c3a:	4920      	ldr	r1, [pc, #128]	; (8001cbc <HAL_RCC_ClockConfig+0x27c>)
 8001c3c:	4019      	ands	r1, r3
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	68db      	ldr	r3, [r3, #12]
 8001c42:	430b      	orrs	r3, r1
 8001c44:	60d3      	str	r3, [r2, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	2208      	movs	r2, #8
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	d009      	beq.n	8001c64 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c50:	4a19      	ldr	r2, [pc, #100]	; (8001cb8 <HAL_RCC_ClockConfig+0x278>)
 8001c52:	4b19      	ldr	r3, [pc, #100]	; (8001cb8 <HAL_RCC_ClockConfig+0x278>)
 8001c54:	68db      	ldr	r3, [r3, #12]
 8001c56:	491a      	ldr	r1, [pc, #104]	; (8001cc0 <HAL_RCC_ClockConfig+0x280>)
 8001c58:	4019      	ands	r1, r3
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	691b      	ldr	r3, [r3, #16]
 8001c5e:	00db      	lsls	r3, r3, #3
 8001c60:	430b      	orrs	r3, r1
 8001c62:	60d3      	str	r3, [r2, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c64:	f000 f834 	bl	8001cd0 <HAL_RCC_GetSysClockFreq>
 8001c68:	0001      	movs	r1, r0
 8001c6a:	4b13      	ldr	r3, [pc, #76]	; (8001cb8 <HAL_RCC_ClockConfig+0x278>)
 8001c6c:	68db      	ldr	r3, [r3, #12]
 8001c6e:	091b      	lsrs	r3, r3, #4
 8001c70:	220f      	movs	r2, #15
 8001c72:	4013      	ands	r3, r2
 8001c74:	4a13      	ldr	r2, [pc, #76]	; (8001cc4 <HAL_RCC_ClockConfig+0x284>)
 8001c76:	5cd3      	ldrb	r3, [r2, r3]
 8001c78:	000a      	movs	r2, r1
 8001c7a:	40da      	lsrs	r2, r3
 8001c7c:	4b12      	ldr	r3, [pc, #72]	; (8001cc8 <HAL_RCC_ClockConfig+0x288>)
 8001c7e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001c80:	4b12      	ldr	r3, [pc, #72]	; (8001ccc <HAL_RCC_ClockConfig+0x28c>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	220b      	movs	r2, #11
 8001c86:	18bc      	adds	r4, r7, r2
 8001c88:	0018      	movs	r0, r3
 8001c8a:	f7fe febd 	bl	8000a08 <HAL_InitTick>
 8001c8e:	0003      	movs	r3, r0
 8001c90:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001c92:	230b      	movs	r3, #11
 8001c94:	18fb      	adds	r3, r7, r3
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d003      	beq.n	8001ca4 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8001c9c:	230b      	movs	r3, #11
 8001c9e:	18fb      	adds	r3, r7, r3
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	e000      	b.n	8001ca6 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001ca4:	2300      	movs	r3, #0
}
 8001ca6:	0018      	movs	r0, r3
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	b005      	add	sp, #20
 8001cac:	bd90      	pop	{r4, r7, pc}
 8001cae:	46c0      	nop			; (mov r8, r8)
 8001cb0:	40022000 	.word	0x40022000
 8001cb4:	00001388 	.word	0x00001388
 8001cb8:	40021000 	.word	0x40021000
 8001cbc:	fffff8ff 	.word	0xfffff8ff
 8001cc0:	ffffc7ff 	.word	0xffffc7ff
 8001cc4:	08002a2c 	.word	0x08002a2c
 8001cc8:	20000000 	.word	0x20000000
 8001ccc:	20000004 	.word	0x20000004

08001cd0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cd2:	b08f      	sub	sp, #60	; 0x3c
 8001cd4:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001cd6:	4b4a      	ldr	r3, [pc, #296]	; (8001e00 <HAL_RCC_GetSysClockFreq+0x130>)
 8001cd8:	68db      	ldr	r3, [r3, #12]
 8001cda:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001cdc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001cde:	230c      	movs	r3, #12
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	2b08      	cmp	r3, #8
 8001ce4:	d00f      	beq.n	8001d06 <HAL_RCC_GetSysClockFreq+0x36>
 8001ce6:	2b0c      	cmp	r3, #12
 8001ce8:	d010      	beq.n	8001d0c <HAL_RCC_GetSysClockFreq+0x3c>
 8001cea:	2b04      	cmp	r3, #4
 8001cec:	d000      	beq.n	8001cf0 <HAL_RCC_GetSysClockFreq+0x20>
 8001cee:	e073      	b.n	8001dd8 <HAL_RCC_GetSysClockFreq+0x108>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001cf0:	4b43      	ldr	r3, [pc, #268]	; (8001e00 <HAL_RCC_GetSysClockFreq+0x130>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	2210      	movs	r2, #16
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	d002      	beq.n	8001d00 <HAL_RCC_GetSysClockFreq+0x30>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001cfa:	4b42      	ldr	r3, [pc, #264]	; (8001e04 <HAL_RCC_GetSysClockFreq+0x134>)
 8001cfc:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001cfe:	e079      	b.n	8001df4 <HAL_RCC_GetSysClockFreq+0x124>
        sysclockfreq =  HSI_VALUE;
 8001d00:	4b41      	ldr	r3, [pc, #260]	; (8001e08 <HAL_RCC_GetSysClockFreq+0x138>)
 8001d02:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001d04:	e076      	b.n	8001df4 <HAL_RCC_GetSysClockFreq+0x124>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d06:	4b41      	ldr	r3, [pc, #260]	; (8001e0c <HAL_RCC_GetSysClockFreq+0x13c>)
 8001d08:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001d0a:	e073      	b.n	8001df4 <HAL_RCC_GetSysClockFreq+0x124>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001d0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d0e:	0c9a      	lsrs	r2, r3, #18
 8001d10:	230f      	movs	r3, #15
 8001d12:	401a      	ands	r2, r3
 8001d14:	4b3e      	ldr	r3, [pc, #248]	; (8001e10 <HAL_RCC_GetSysClockFreq+0x140>)
 8001d16:	5c9b      	ldrb	r3, [r3, r2]
 8001d18:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d1c:	0d9a      	lsrs	r2, r3, #22
 8001d1e:	2303      	movs	r3, #3
 8001d20:	4013      	ands	r3, r2
 8001d22:	3301      	adds	r3, #1
 8001d24:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d26:	4b36      	ldr	r3, [pc, #216]	; (8001e00 <HAL_RCC_GetSysClockFreq+0x130>)
 8001d28:	68da      	ldr	r2, [r3, #12]
 8001d2a:	2380      	movs	r3, #128	; 0x80
 8001d2c:	025b      	lsls	r3, r3, #9
 8001d2e:	4013      	ands	r3, r2
 8001d30:	d019      	beq.n	8001d66 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d34:	61bb      	str	r3, [r7, #24]
 8001d36:	2300      	movs	r3, #0
 8001d38:	61fb      	str	r3, [r7, #28]
 8001d3a:	4a34      	ldr	r2, [pc, #208]	; (8001e0c <HAL_RCC_GetSysClockFreq+0x13c>)
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	69b8      	ldr	r0, [r7, #24]
 8001d40:	69f9      	ldr	r1, [r7, #28]
 8001d42:	f7fe fa8d 	bl	8000260 <__aeabi_lmul>
 8001d46:	0003      	movs	r3, r0
 8001d48:	000c      	movs	r4, r1
 8001d4a:	0018      	movs	r0, r3
 8001d4c:	0021      	movs	r1, r4
 8001d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d50:	613b      	str	r3, [r7, #16]
 8001d52:	2300      	movs	r3, #0
 8001d54:	617b      	str	r3, [r7, #20]
 8001d56:	693a      	ldr	r2, [r7, #16]
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	f7fe fa61 	bl	8000220 <__aeabi_uldivmod>
 8001d5e:	0003      	movs	r3, r0
 8001d60:	000c      	movs	r4, r1
 8001d62:	637b      	str	r3, [r7, #52]	; 0x34
 8001d64:	e035      	b.n	8001dd2 <HAL_RCC_GetSysClockFreq+0x102>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001d66:	4b26      	ldr	r3, [pc, #152]	; (8001e00 <HAL_RCC_GetSysClockFreq+0x130>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	2210      	movs	r2, #16
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	d019      	beq.n	8001da4 <HAL_RCC_GetSysClockFreq+0xd4>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8001d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d72:	60bb      	str	r3, [r7, #8]
 8001d74:	2300      	movs	r3, #0
 8001d76:	60fb      	str	r3, [r7, #12]
 8001d78:	4a22      	ldr	r2, [pc, #136]	; (8001e04 <HAL_RCC_GetSysClockFreq+0x134>)
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	68b8      	ldr	r0, [r7, #8]
 8001d7e:	68f9      	ldr	r1, [r7, #12]
 8001d80:	f7fe fa6e 	bl	8000260 <__aeabi_lmul>
 8001d84:	0003      	movs	r3, r0
 8001d86:	000c      	movs	r4, r1
 8001d88:	0018      	movs	r0, r3
 8001d8a:	0021      	movs	r1, r4
 8001d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d8e:	603b      	str	r3, [r7, #0]
 8001d90:	2300      	movs	r3, #0
 8001d92:	607b      	str	r3, [r7, #4]
 8001d94:	683a      	ldr	r2, [r7, #0]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	f7fe fa42 	bl	8000220 <__aeabi_uldivmod>
 8001d9c:	0003      	movs	r3, r0
 8001d9e:	000c      	movs	r4, r1
 8001da0:	637b      	str	r3, [r7, #52]	; 0x34
 8001da2:	e016      	b.n	8001dd2 <HAL_RCC_GetSysClockFreq+0x102>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001da6:	0018      	movs	r0, r3
 8001da8:	2300      	movs	r3, #0
 8001daa:	0019      	movs	r1, r3
 8001dac:	4a16      	ldr	r2, [pc, #88]	; (8001e08 <HAL_RCC_GetSysClockFreq+0x138>)
 8001dae:	2300      	movs	r3, #0
 8001db0:	f7fe fa56 	bl	8000260 <__aeabi_lmul>
 8001db4:	0003      	movs	r3, r0
 8001db6:	000c      	movs	r4, r1
 8001db8:	0018      	movs	r0, r3
 8001dba:	0021      	movs	r1, r4
 8001dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dbe:	001d      	movs	r5, r3
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	001e      	movs	r6, r3
 8001dc4:	002a      	movs	r2, r5
 8001dc6:	0033      	movs	r3, r6
 8001dc8:	f7fe fa2a 	bl	8000220 <__aeabi_uldivmod>
 8001dcc:	0003      	movs	r3, r0
 8001dce:	000c      	movs	r4, r1
 8001dd0:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8001dd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dd4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001dd6:	e00d      	b.n	8001df4 <HAL_RCC_GetSysClockFreq+0x124>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001dd8:	4b09      	ldr	r3, [pc, #36]	; (8001e00 <HAL_RCC_GetSysClockFreq+0x130>)
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	0b5b      	lsrs	r3, r3, #13
 8001dde:	2207      	movs	r2, #7
 8001de0:	4013      	ands	r3, r2
 8001de2:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001de4:	6a3b      	ldr	r3, [r7, #32]
 8001de6:	3301      	adds	r3, #1
 8001de8:	2280      	movs	r2, #128	; 0x80
 8001dea:	0212      	lsls	r2, r2, #8
 8001dec:	409a      	lsls	r2, r3
 8001dee:	0013      	movs	r3, r2
 8001df0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001df2:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001df6:	0018      	movs	r0, r3
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	b00f      	add	sp, #60	; 0x3c
 8001dfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001dfe:	46c0      	nop			; (mov r8, r8)
 8001e00:	40021000 	.word	0x40021000
 8001e04:	003d0900 	.word	0x003d0900
 8001e08:	00f42400 	.word	0x00f42400
 8001e0c:	007a1200 	.word	0x007a1200
 8001e10:	08002a44 	.word	0x08002a44

08001e14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e18:	4b02      	ldr	r3, [pc, #8]	; (8001e24 <HAL_RCC_GetHCLKFreq+0x10>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
}
 8001e1c:	0018      	movs	r0, r3
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	46c0      	nop			; (mov r8, r8)
 8001e24:	20000000 	.word	0x20000000

08001e28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001e2c:	f7ff fff2 	bl	8001e14 <HAL_RCC_GetHCLKFreq>
 8001e30:	0001      	movs	r1, r0
 8001e32:	4b06      	ldr	r3, [pc, #24]	; (8001e4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e34:	68db      	ldr	r3, [r3, #12]
 8001e36:	0a1b      	lsrs	r3, r3, #8
 8001e38:	2207      	movs	r2, #7
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	4a04      	ldr	r2, [pc, #16]	; (8001e50 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001e3e:	5cd3      	ldrb	r3, [r2, r3]
 8001e40:	40d9      	lsrs	r1, r3
 8001e42:	000b      	movs	r3, r1
}
 8001e44:	0018      	movs	r0, r3
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	46c0      	nop			; (mov r8, r8)
 8001e4c:	40021000 	.word	0x40021000
 8001e50:	08002a3c 	.word	0x08002a3c

08001e54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001e58:	f7ff ffdc 	bl	8001e14 <HAL_RCC_GetHCLKFreq>
 8001e5c:	0001      	movs	r1, r0
 8001e5e:	4b06      	ldr	r3, [pc, #24]	; (8001e78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e60:	68db      	ldr	r3, [r3, #12]
 8001e62:	0adb      	lsrs	r3, r3, #11
 8001e64:	2207      	movs	r2, #7
 8001e66:	4013      	ands	r3, r2
 8001e68:	4a04      	ldr	r2, [pc, #16]	; (8001e7c <HAL_RCC_GetPCLK2Freq+0x28>)
 8001e6a:	5cd3      	ldrb	r3, [r2, r3]
 8001e6c:	40d9      	lsrs	r1, r3
 8001e6e:	000b      	movs	r3, r1
}
 8001e70:	0018      	movs	r0, r3
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	46c0      	nop			; (mov r8, r8)
 8001e78:	40021000 	.word	0x40021000
 8001e7c:	08002a3c 	.word	0x08002a3c

08001e80 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b086      	sub	sp, #24
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8001e88:	2317      	movs	r3, #23
 8001e8a:	18fb      	adds	r3, r7, r3
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	2220      	movs	r2, #32
 8001e96:	4013      	ands	r3, r2
 8001e98:	d100      	bne.n	8001e9c <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8001e9a:	e0c2      	b.n	8002022 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e9c:	4b87      	ldr	r3, [pc, #540]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8001e9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ea0:	2380      	movs	r3, #128	; 0x80
 8001ea2:	055b      	lsls	r3, r3, #21
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	d10a      	bne.n	8001ebe <HAL_RCCEx_PeriphCLKConfig+0x3e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ea8:	4b84      	ldr	r3, [pc, #528]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8001eaa:	4a84      	ldr	r2, [pc, #528]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8001eac:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001eae:	2180      	movs	r1, #128	; 0x80
 8001eb0:	0549      	lsls	r1, r1, #21
 8001eb2:	430a      	orrs	r2, r1
 8001eb4:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001eb6:	2317      	movs	r3, #23
 8001eb8:	18fb      	adds	r3, r7, r3
 8001eba:	2201      	movs	r2, #1
 8001ebc:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ebe:	4b80      	ldr	r3, [pc, #512]	; (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	2380      	movs	r3, #128	; 0x80
 8001ec4:	005b      	lsls	r3, r3, #1
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	d11a      	bne.n	8001f00 <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001eca:	4b7d      	ldr	r3, [pc, #500]	; (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001ecc:	4a7c      	ldr	r2, [pc, #496]	; (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001ece:	6812      	ldr	r2, [r2, #0]
 8001ed0:	2180      	movs	r1, #128	; 0x80
 8001ed2:	0049      	lsls	r1, r1, #1
 8001ed4:	430a      	orrs	r2, r1
 8001ed6:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ed8:	f7fe fddc 	bl	8000a94 <HAL_GetTick>
 8001edc:	0003      	movs	r3, r0
 8001ede:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ee0:	e008      	b.n	8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x74>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ee2:	f7fe fdd7 	bl	8000a94 <HAL_GetTick>
 8001ee6:	0002      	movs	r2, r0
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	1ad3      	subs	r3, r2, r3
 8001eec:	2b64      	cmp	r3, #100	; 0x64
 8001eee:	d901      	bls.n	8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x74>
        {
          return HAL_TIMEOUT;
 8001ef0:	2303      	movs	r3, #3
 8001ef2:	e0df      	b.n	80020b4 <HAL_RCCEx_PeriphCLKConfig+0x234>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ef4:	4b72      	ldr	r3, [pc, #456]	; (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	2380      	movs	r3, #128	; 0x80
 8001efa:	005b      	lsls	r3, r3, #1
 8001efc:	4013      	ands	r3, r2
 8001efe:	d0f0      	beq.n	8001ee2 <HAL_RCCEx_PeriphCLKConfig+0x62>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001f00:	4b6e      	ldr	r3, [pc, #440]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	23c0      	movs	r3, #192	; 0xc0
 8001f06:	039b      	lsls	r3, r3, #14
 8001f08:	4013      	ands	r3, r2
 8001f0a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	685a      	ldr	r2, [r3, #4]
 8001f10:	23c0      	movs	r3, #192	; 0xc0
 8001f12:	039b      	lsls	r3, r3, #14
 8001f14:	401a      	ands	r2, r3
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d013      	beq.n	8001f44 <HAL_RCCEx_PeriphCLKConfig+0xc4>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	685a      	ldr	r2, [r3, #4]
 8001f20:	23c0      	movs	r3, #192	; 0xc0
 8001f22:	029b      	lsls	r3, r3, #10
 8001f24:	401a      	ands	r2, r3
 8001f26:	23c0      	movs	r3, #192	; 0xc0
 8001f28:	029b      	lsls	r3, r3, #10
 8001f2a:	429a      	cmp	r2, r3
 8001f2c:	d10a      	bne.n	8001f44 <HAL_RCCEx_PeriphCLKConfig+0xc4>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001f2e:	4b63      	ldr	r3, [pc, #396]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	2380      	movs	r3, #128	; 0x80
 8001f34:	029b      	lsls	r3, r3, #10
 8001f36:	401a      	ands	r2, r3
 8001f38:	2380      	movs	r3, #128	; 0x80
 8001f3a:	029b      	lsls	r3, r3, #10
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d101      	bne.n	8001f44 <HAL_RCCEx_PeriphCLKConfig+0xc4>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8001f40:	2301      	movs	r3, #1
 8001f42:	e0b7      	b.n	80020b4 <HAL_RCCEx_PeriphCLKConfig+0x234>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001f44:	4b5d      	ldr	r3, [pc, #372]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8001f46:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f48:	23c0      	movs	r3, #192	; 0xc0
 8001f4a:	029b      	lsls	r3, r3, #10
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d03b      	beq.n	8001fce <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	685a      	ldr	r2, [r3, #4]
 8001f5a:	23c0      	movs	r3, #192	; 0xc0
 8001f5c:	029b      	lsls	r3, r3, #10
 8001f5e:	401a      	ands	r2, r3
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	429a      	cmp	r2, r3
 8001f64:	d033      	beq.n	8001fce <HAL_RCCEx_PeriphCLKConfig+0x14e>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	2220      	movs	r2, #32
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	d02e      	beq.n	8001fce <HAL_RCCEx_PeriphCLKConfig+0x14e>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001f70:	4b52      	ldr	r3, [pc, #328]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8001f72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f74:	4a53      	ldr	r2, [pc, #332]	; (80020c4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8001f76:	4013      	ands	r3, r2
 8001f78:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001f7a:	4b50      	ldr	r3, [pc, #320]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8001f7c:	4a4f      	ldr	r2, [pc, #316]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8001f7e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001f80:	2180      	movs	r1, #128	; 0x80
 8001f82:	0309      	lsls	r1, r1, #12
 8001f84:	430a      	orrs	r2, r1
 8001f86:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001f88:	4b4c      	ldr	r3, [pc, #304]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8001f8a:	4a4c      	ldr	r2, [pc, #304]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8001f8c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001f8e:	494e      	ldr	r1, [pc, #312]	; (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001f90:	400a      	ands	r2, r1
 8001f92:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8001f94:	4b49      	ldr	r3, [pc, #292]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8001f96:	68fa      	ldr	r2, [r7, #12]
 8001f98:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8001f9a:	68fa      	ldr	r2, [r7, #12]
 8001f9c:	2380      	movs	r3, #128	; 0x80
 8001f9e:	005b      	lsls	r3, r3, #1
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	d014      	beq.n	8001fce <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fa4:	f7fe fd76 	bl	8000a94 <HAL_GetTick>
 8001fa8:	0003      	movs	r3, r0
 8001faa:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001fac:	e009      	b.n	8001fc2 <HAL_RCCEx_PeriphCLKConfig+0x142>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fae:	f7fe fd71 	bl	8000a94 <HAL_GetTick>
 8001fb2:	0002      	movs	r2, r0
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	1ad3      	subs	r3, r2, r3
 8001fb8:	4a44      	ldr	r2, [pc, #272]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d901      	bls.n	8001fc2 <HAL_RCCEx_PeriphCLKConfig+0x142>
          {
            return HAL_TIMEOUT;
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	e078      	b.n	80020b4 <HAL_RCCEx_PeriphCLKConfig+0x234>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001fc2:	4b3e      	ldr	r3, [pc, #248]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8001fc4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001fc6:	2380      	movs	r3, #128	; 0x80
 8001fc8:	009b      	lsls	r3, r3, #2
 8001fca:	4013      	ands	r3, r2
 8001fcc:	d0ef      	beq.n	8001fae <HAL_RCCEx_PeriphCLKConfig+0x12e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	685a      	ldr	r2, [r3, #4]
 8001fd2:	23c0      	movs	r3, #192	; 0xc0
 8001fd4:	029b      	lsls	r3, r3, #10
 8001fd6:	401a      	ands	r2, r3
 8001fd8:	23c0      	movs	r3, #192	; 0xc0
 8001fda:	029b      	lsls	r3, r3, #10
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d10b      	bne.n	8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x178>
 8001fe0:	4a36      	ldr	r2, [pc, #216]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8001fe2:	4b36      	ldr	r3, [pc, #216]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	493a      	ldr	r1, [pc, #232]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8001fe8:	4019      	ands	r1, r3
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6858      	ldr	r0, [r3, #4]
 8001fee:	23c0      	movs	r3, #192	; 0xc0
 8001ff0:	039b      	lsls	r3, r3, #14
 8001ff2:	4003      	ands	r3, r0
 8001ff4:	430b      	orrs	r3, r1
 8001ff6:	6013      	str	r3, [r2, #0]
 8001ff8:	4a30      	ldr	r2, [pc, #192]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8001ffa:	4b30      	ldr	r3, [pc, #192]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8001ffc:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6858      	ldr	r0, [r3, #4]
 8002002:	23c0      	movs	r3, #192	; 0xc0
 8002004:	029b      	lsls	r3, r3, #10
 8002006:	4003      	ands	r3, r0
 8002008:	430b      	orrs	r3, r1
 800200a:	6513      	str	r3, [r2, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800200c:	2317      	movs	r3, #23
 800200e:	18fb      	adds	r3, r7, r3
 8002010:	781b      	ldrb	r3, [r3, #0]
 8002012:	2b01      	cmp	r3, #1
 8002014:	d105      	bne.n	8002022 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002016:	4b29      	ldr	r3, [pc, #164]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002018:	4a28      	ldr	r2, [pc, #160]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 800201a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800201c:	492d      	ldr	r1, [pc, #180]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800201e:	400a      	ands	r2, r1
 8002020:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	2201      	movs	r2, #1
 8002028:	4013      	ands	r3, r2
 800202a:	d009      	beq.n	8002040 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800202c:	4a23      	ldr	r2, [pc, #140]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 800202e:	4b23      	ldr	r3, [pc, #140]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002030:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002032:	2103      	movs	r1, #3
 8002034:	438b      	bics	r3, r1
 8002036:	0019      	movs	r1, r3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	430b      	orrs	r3, r1
 800203e:	64d3      	str	r3, [r2, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	2202      	movs	r2, #2
 8002046:	4013      	ands	r3, r2
 8002048:	d009      	beq.n	800205e <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800204a:	4a1c      	ldr	r2, [pc, #112]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 800204c:	4b1b      	ldr	r3, [pc, #108]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 800204e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002050:	210c      	movs	r1, #12
 8002052:	438b      	bics	r3, r1
 8002054:	0019      	movs	r1, r3
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	68db      	ldr	r3, [r3, #12]
 800205a:	430b      	orrs	r3, r1
 800205c:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	2204      	movs	r2, #4
 8002064:	4013      	ands	r3, r2
 8002066:	d008      	beq.n	800207a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002068:	4a14      	ldr	r2, [pc, #80]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 800206a:	4b14      	ldr	r3, [pc, #80]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 800206c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800206e:	491a      	ldr	r1, [pc, #104]	; (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002070:	4019      	ands	r1, r3
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	691b      	ldr	r3, [r3, #16]
 8002076:	430b      	orrs	r3, r1
 8002078:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	2208      	movs	r2, #8
 8002080:	4013      	ands	r3, r2
 8002082:	d008      	beq.n	8002096 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002084:	4a0d      	ldr	r2, [pc, #52]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002086:	4b0d      	ldr	r3, [pc, #52]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002088:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800208a:	4914      	ldr	r1, [pc, #80]	; (80020dc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800208c:	4019      	ands	r1, r3
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	695b      	ldr	r3, [r3, #20]
 8002092:	430b      	orrs	r3, r1
 8002094:	64d3      	str	r3, [r2, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	2280      	movs	r2, #128	; 0x80
 800209c:	4013      	ands	r3, r2
 800209e:	d008      	beq.n	80020b2 <HAL_RCCEx_PeriphCLKConfig+0x232>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80020a0:	4a06      	ldr	r2, [pc, #24]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80020a2:	4b06      	ldr	r3, [pc, #24]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80020a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020a6:	490e      	ldr	r1, [pc, #56]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020a8:	4019      	ands	r1, r3
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	699b      	ldr	r3, [r3, #24]
 80020ae:	430b      	orrs	r3, r1
 80020b0:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  return HAL_OK;
 80020b2:	2300      	movs	r3, #0
}
 80020b4:	0018      	movs	r0, r3
 80020b6:	46bd      	mov	sp, r7
 80020b8:	b006      	add	sp, #24
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	40021000 	.word	0x40021000
 80020c0:	40007000 	.word	0x40007000
 80020c4:	fffcffff 	.word	0xfffcffff
 80020c8:	fff7ffff 	.word	0xfff7ffff
 80020cc:	00001388 	.word	0x00001388
 80020d0:	ffcfffff 	.word	0xffcfffff
 80020d4:	efffffff 	.word	0xefffffff
 80020d8:	fffff3ff 	.word	0xfffff3ff
 80020dc:	ffffcfff 	.word	0xffffcfff
 80020e0:	fff3ffff 	.word	0xfff3ffff

080020e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b082      	sub	sp, #8
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d101      	bne.n	80020f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e044      	b.n	8002180 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d107      	bne.n	800210e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2274      	movs	r2, #116	; 0x74
 8002102:	2100      	movs	r1, #0
 8002104:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	0018      	movs	r0, r3
 800210a:	f7fe fbf9 	bl	8000900 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2224      	movs	r2, #36	; 0x24
 8002112:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	687a      	ldr	r2, [r7, #4]
 800211a:	6812      	ldr	r2, [r2, #0]
 800211c:	6812      	ldr	r2, [r2, #0]
 800211e:	2101      	movs	r1, #1
 8002120:	438a      	bics	r2, r1
 8002122:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	0018      	movs	r0, r3
 8002128:	f000 f830 	bl	800218c <UART_SetConfig>
 800212c:	0003      	movs	r3, r0
 800212e:	2b01      	cmp	r3, #1
 8002130:	d101      	bne.n	8002136 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	e024      	b.n	8002180 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800213a:	2b00      	cmp	r3, #0
 800213c:	d003      	beq.n	8002146 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	0018      	movs	r0, r3
 8002142:	f000 fac7 	bl	80026d4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	687a      	ldr	r2, [r7, #4]
 800214c:	6812      	ldr	r2, [r2, #0]
 800214e:	6852      	ldr	r2, [r2, #4]
 8002150:	490d      	ldr	r1, [pc, #52]	; (8002188 <HAL_UART_Init+0xa4>)
 8002152:	400a      	ands	r2, r1
 8002154:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	687a      	ldr	r2, [r7, #4]
 800215c:	6812      	ldr	r2, [r2, #0]
 800215e:	6892      	ldr	r2, [r2, #8]
 8002160:	212a      	movs	r1, #42	; 0x2a
 8002162:	438a      	bics	r2, r1
 8002164:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	687a      	ldr	r2, [r7, #4]
 800216c:	6812      	ldr	r2, [r2, #0]
 800216e:	6812      	ldr	r2, [r2, #0]
 8002170:	2101      	movs	r1, #1
 8002172:	430a      	orrs	r2, r1
 8002174:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	0018      	movs	r0, r3
 800217a:	f000 fb57 	bl	800282c <UART_CheckIdleState>
 800217e:	0003      	movs	r3, r0
}
 8002180:	0018      	movs	r0, r3
 8002182:	46bd      	mov	sp, r7
 8002184:	b002      	add	sp, #8
 8002186:	bd80      	pop	{r7, pc}
 8002188:	ffffb7ff 	.word	0xffffb7ff

0800218c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800218c:	b5b0      	push	{r4, r5, r7, lr}
 800218e:	b08e      	sub	sp, #56	; 0x38
 8002190:	af00      	add	r7, sp, #0
 8002192:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002194:	231a      	movs	r3, #26
 8002196:	2218      	movs	r2, #24
 8002198:	4694      	mov	ip, r2
 800219a:	44bc      	add	ip, r7
 800219c:	4463      	add	r3, ip
 800219e:	2200      	movs	r2, #0
 80021a0:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80021a2:	69fb      	ldr	r3, [r7, #28]
 80021a4:	689a      	ldr	r2, [r3, #8]
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	691b      	ldr	r3, [r3, #16]
 80021aa:	431a      	orrs	r2, r3
 80021ac:	69fb      	ldr	r3, [r7, #28]
 80021ae:	695b      	ldr	r3, [r3, #20]
 80021b0:	431a      	orrs	r2, r3
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	69db      	ldr	r3, [r3, #28]
 80021b6:	4313      	orrs	r3, r2
 80021b8:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	69fa      	ldr	r2, [r7, #28]
 80021c0:	6812      	ldr	r2, [r2, #0]
 80021c2:	6812      	ldr	r2, [r2, #0]
 80021c4:	49ca      	ldr	r1, [pc, #808]	; (80024f0 <UART_SetConfig+0x364>)
 80021c6:	4011      	ands	r1, r2
 80021c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80021ca:	430a      	orrs	r2, r1
 80021cc:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	69fa      	ldr	r2, [r7, #28]
 80021d4:	6812      	ldr	r2, [r2, #0]
 80021d6:	6852      	ldr	r2, [r2, #4]
 80021d8:	49c6      	ldr	r1, [pc, #792]	; (80024f4 <UART_SetConfig+0x368>)
 80021da:	4011      	ands	r1, r2
 80021dc:	69fa      	ldr	r2, [r7, #28]
 80021de:	68d2      	ldr	r2, [r2, #12]
 80021e0:	430a      	orrs	r2, r1
 80021e2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80021e4:	69fb      	ldr	r3, [r7, #28]
 80021e6:	699b      	ldr	r3, [r3, #24]
 80021e8:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80021ea:	69fb      	ldr	r3, [r7, #28]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4ac2      	ldr	r2, [pc, #776]	; (80024f8 <UART_SetConfig+0x36c>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d004      	beq.n	80021fe <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80021f4:	69fb      	ldr	r3, [r7, #28]
 80021f6:	6a1b      	ldr	r3, [r3, #32]
 80021f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80021fa:	4313      	orrs	r3, r2
 80021fc:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	69fa      	ldr	r2, [r7, #28]
 8002204:	6812      	ldr	r2, [r2, #0]
 8002206:	6892      	ldr	r2, [r2, #8]
 8002208:	49bc      	ldr	r1, [pc, #752]	; (80024fc <UART_SetConfig+0x370>)
 800220a:	4011      	ands	r1, r2
 800220c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800220e:	430a      	orrs	r2, r1
 8002210:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4aba      	ldr	r2, [pc, #744]	; (8002500 <UART_SetConfig+0x374>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d134      	bne.n	8002286 <UART_SetConfig+0xfa>
 800221c:	4bb9      	ldr	r3, [pc, #740]	; (8002504 <UART_SetConfig+0x378>)
 800221e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002220:	2203      	movs	r2, #3
 8002222:	4013      	ands	r3, r2
 8002224:	2b01      	cmp	r3, #1
 8002226:	d015      	beq.n	8002254 <UART_SetConfig+0xc8>
 8002228:	d304      	bcc.n	8002234 <UART_SetConfig+0xa8>
 800222a:	2b02      	cmp	r3, #2
 800222c:	d00a      	beq.n	8002244 <UART_SetConfig+0xb8>
 800222e:	2b03      	cmp	r3, #3
 8002230:	d018      	beq.n	8002264 <UART_SetConfig+0xd8>
 8002232:	e01f      	b.n	8002274 <UART_SetConfig+0xe8>
 8002234:	231b      	movs	r3, #27
 8002236:	2218      	movs	r2, #24
 8002238:	4694      	mov	ip, r2
 800223a:	44bc      	add	ip, r7
 800223c:	4463      	add	r3, ip
 800223e:	2201      	movs	r2, #1
 8002240:	701a      	strb	r2, [r3, #0]
 8002242:	e0ab      	b.n	800239c <UART_SetConfig+0x210>
 8002244:	231b      	movs	r3, #27
 8002246:	2218      	movs	r2, #24
 8002248:	4694      	mov	ip, r2
 800224a:	44bc      	add	ip, r7
 800224c:	4463      	add	r3, ip
 800224e:	2202      	movs	r2, #2
 8002250:	701a      	strb	r2, [r3, #0]
 8002252:	e0a3      	b.n	800239c <UART_SetConfig+0x210>
 8002254:	231b      	movs	r3, #27
 8002256:	2218      	movs	r2, #24
 8002258:	4694      	mov	ip, r2
 800225a:	44bc      	add	ip, r7
 800225c:	4463      	add	r3, ip
 800225e:	2204      	movs	r2, #4
 8002260:	701a      	strb	r2, [r3, #0]
 8002262:	e09b      	b.n	800239c <UART_SetConfig+0x210>
 8002264:	231b      	movs	r3, #27
 8002266:	2218      	movs	r2, #24
 8002268:	4694      	mov	ip, r2
 800226a:	44bc      	add	ip, r7
 800226c:	4463      	add	r3, ip
 800226e:	2208      	movs	r2, #8
 8002270:	701a      	strb	r2, [r3, #0]
 8002272:	e093      	b.n	800239c <UART_SetConfig+0x210>
 8002274:	231b      	movs	r3, #27
 8002276:	2218      	movs	r2, #24
 8002278:	4694      	mov	ip, r2
 800227a:	44bc      	add	ip, r7
 800227c:	4463      	add	r3, ip
 800227e:	2210      	movs	r2, #16
 8002280:	701a      	strb	r2, [r3, #0]
 8002282:	46c0      	nop			; (mov r8, r8)
 8002284:	e08a      	b.n	800239c <UART_SetConfig+0x210>
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a9f      	ldr	r2, [pc, #636]	; (8002508 <UART_SetConfig+0x37c>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d137      	bne.n	8002300 <UART_SetConfig+0x174>
 8002290:	4b9c      	ldr	r3, [pc, #624]	; (8002504 <UART_SetConfig+0x378>)
 8002292:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002294:	220c      	movs	r2, #12
 8002296:	4013      	ands	r3, r2
 8002298:	2b04      	cmp	r3, #4
 800229a:	d018      	beq.n	80022ce <UART_SetConfig+0x142>
 800229c:	d802      	bhi.n	80022a4 <UART_SetConfig+0x118>
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d005      	beq.n	80022ae <UART_SetConfig+0x122>
 80022a2:	e024      	b.n	80022ee <UART_SetConfig+0x162>
 80022a4:	2b08      	cmp	r3, #8
 80022a6:	d00a      	beq.n	80022be <UART_SetConfig+0x132>
 80022a8:	2b0c      	cmp	r3, #12
 80022aa:	d018      	beq.n	80022de <UART_SetConfig+0x152>
 80022ac:	e01f      	b.n	80022ee <UART_SetConfig+0x162>
 80022ae:	231b      	movs	r3, #27
 80022b0:	2218      	movs	r2, #24
 80022b2:	4694      	mov	ip, r2
 80022b4:	44bc      	add	ip, r7
 80022b6:	4463      	add	r3, ip
 80022b8:	2200      	movs	r2, #0
 80022ba:	701a      	strb	r2, [r3, #0]
 80022bc:	e06e      	b.n	800239c <UART_SetConfig+0x210>
 80022be:	231b      	movs	r3, #27
 80022c0:	2218      	movs	r2, #24
 80022c2:	4694      	mov	ip, r2
 80022c4:	44bc      	add	ip, r7
 80022c6:	4463      	add	r3, ip
 80022c8:	2202      	movs	r2, #2
 80022ca:	701a      	strb	r2, [r3, #0]
 80022cc:	e066      	b.n	800239c <UART_SetConfig+0x210>
 80022ce:	231b      	movs	r3, #27
 80022d0:	2218      	movs	r2, #24
 80022d2:	4694      	mov	ip, r2
 80022d4:	44bc      	add	ip, r7
 80022d6:	4463      	add	r3, ip
 80022d8:	2204      	movs	r2, #4
 80022da:	701a      	strb	r2, [r3, #0]
 80022dc:	e05e      	b.n	800239c <UART_SetConfig+0x210>
 80022de:	231b      	movs	r3, #27
 80022e0:	2218      	movs	r2, #24
 80022e2:	4694      	mov	ip, r2
 80022e4:	44bc      	add	ip, r7
 80022e6:	4463      	add	r3, ip
 80022e8:	2208      	movs	r2, #8
 80022ea:	701a      	strb	r2, [r3, #0]
 80022ec:	e056      	b.n	800239c <UART_SetConfig+0x210>
 80022ee:	231b      	movs	r3, #27
 80022f0:	2218      	movs	r2, #24
 80022f2:	4694      	mov	ip, r2
 80022f4:	44bc      	add	ip, r7
 80022f6:	4463      	add	r3, ip
 80022f8:	2210      	movs	r2, #16
 80022fa:	701a      	strb	r2, [r3, #0]
 80022fc:	46c0      	nop			; (mov r8, r8)
 80022fe:	e04d      	b.n	800239c <UART_SetConfig+0x210>
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a7c      	ldr	r2, [pc, #496]	; (80024f8 <UART_SetConfig+0x36c>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d141      	bne.n	800238e <UART_SetConfig+0x202>
 800230a:	4b7e      	ldr	r3, [pc, #504]	; (8002504 <UART_SetConfig+0x378>)
 800230c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800230e:	23c0      	movs	r3, #192	; 0xc0
 8002310:	011b      	lsls	r3, r3, #4
 8002312:	4013      	ands	r3, r2
 8002314:	2280      	movs	r2, #128	; 0x80
 8002316:	00d2      	lsls	r2, r2, #3
 8002318:	4293      	cmp	r3, r2
 800231a:	d01f      	beq.n	800235c <UART_SetConfig+0x1d0>
 800231c:	2280      	movs	r2, #128	; 0x80
 800231e:	00d2      	lsls	r2, r2, #3
 8002320:	4293      	cmp	r3, r2
 8002322:	d802      	bhi.n	800232a <UART_SetConfig+0x19e>
 8002324:	2b00      	cmp	r3, #0
 8002326:	d009      	beq.n	800233c <UART_SetConfig+0x1b0>
 8002328:	e028      	b.n	800237c <UART_SetConfig+0x1f0>
 800232a:	2280      	movs	r2, #128	; 0x80
 800232c:	0112      	lsls	r2, r2, #4
 800232e:	4293      	cmp	r3, r2
 8002330:	d00c      	beq.n	800234c <UART_SetConfig+0x1c0>
 8002332:	22c0      	movs	r2, #192	; 0xc0
 8002334:	0112      	lsls	r2, r2, #4
 8002336:	4293      	cmp	r3, r2
 8002338:	d018      	beq.n	800236c <UART_SetConfig+0x1e0>
 800233a:	e01f      	b.n	800237c <UART_SetConfig+0x1f0>
 800233c:	231b      	movs	r3, #27
 800233e:	2218      	movs	r2, #24
 8002340:	4694      	mov	ip, r2
 8002342:	44bc      	add	ip, r7
 8002344:	4463      	add	r3, ip
 8002346:	2200      	movs	r2, #0
 8002348:	701a      	strb	r2, [r3, #0]
 800234a:	e027      	b.n	800239c <UART_SetConfig+0x210>
 800234c:	231b      	movs	r3, #27
 800234e:	2218      	movs	r2, #24
 8002350:	4694      	mov	ip, r2
 8002352:	44bc      	add	ip, r7
 8002354:	4463      	add	r3, ip
 8002356:	2202      	movs	r2, #2
 8002358:	701a      	strb	r2, [r3, #0]
 800235a:	e01f      	b.n	800239c <UART_SetConfig+0x210>
 800235c:	231b      	movs	r3, #27
 800235e:	2218      	movs	r2, #24
 8002360:	4694      	mov	ip, r2
 8002362:	44bc      	add	ip, r7
 8002364:	4463      	add	r3, ip
 8002366:	2204      	movs	r2, #4
 8002368:	701a      	strb	r2, [r3, #0]
 800236a:	e017      	b.n	800239c <UART_SetConfig+0x210>
 800236c:	231b      	movs	r3, #27
 800236e:	2218      	movs	r2, #24
 8002370:	4694      	mov	ip, r2
 8002372:	44bc      	add	ip, r7
 8002374:	4463      	add	r3, ip
 8002376:	2208      	movs	r2, #8
 8002378:	701a      	strb	r2, [r3, #0]
 800237a:	e00f      	b.n	800239c <UART_SetConfig+0x210>
 800237c:	231b      	movs	r3, #27
 800237e:	2218      	movs	r2, #24
 8002380:	4694      	mov	ip, r2
 8002382:	44bc      	add	ip, r7
 8002384:	4463      	add	r3, ip
 8002386:	2210      	movs	r2, #16
 8002388:	701a      	strb	r2, [r3, #0]
 800238a:	46c0      	nop			; (mov r8, r8)
 800238c:	e006      	b.n	800239c <UART_SetConfig+0x210>
 800238e:	231b      	movs	r3, #27
 8002390:	2218      	movs	r2, #24
 8002392:	4694      	mov	ip, r2
 8002394:	44bc      	add	ip, r7
 8002396:	4463      	add	r3, ip
 8002398:	2210      	movs	r2, #16
 800239a:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a55      	ldr	r2, [pc, #340]	; (80024f8 <UART_SetConfig+0x36c>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d000      	beq.n	80023a8 <UART_SetConfig+0x21c>
 80023a6:	e085      	b.n	80024b4 <UART_SetConfig+0x328>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80023a8:	231b      	movs	r3, #27
 80023aa:	2218      	movs	r2, #24
 80023ac:	4694      	mov	ip, r2
 80023ae:	44bc      	add	ip, r7
 80023b0:	4463      	add	r3, ip
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	2b02      	cmp	r3, #2
 80023b6:	d00d      	beq.n	80023d4 <UART_SetConfig+0x248>
 80023b8:	dc02      	bgt.n	80023c0 <UART_SetConfig+0x234>
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d005      	beq.n	80023ca <UART_SetConfig+0x23e>
 80023be:	e01d      	b.n	80023fc <UART_SetConfig+0x270>
 80023c0:	2b04      	cmp	r3, #4
 80023c2:	d012      	beq.n	80023ea <UART_SetConfig+0x25e>
 80023c4:	2b08      	cmp	r3, #8
 80023c6:	d015      	beq.n	80023f4 <UART_SetConfig+0x268>
 80023c8:	e018      	b.n	80023fc <UART_SetConfig+0x270>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80023ca:	f7ff fd2d 	bl	8001e28 <HAL_RCC_GetPCLK1Freq>
 80023ce:	0003      	movs	r3, r0
 80023d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80023d2:	e01d      	b.n	8002410 <UART_SetConfig+0x284>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80023d4:	4b4b      	ldr	r3, [pc, #300]	; (8002504 <UART_SetConfig+0x378>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	2210      	movs	r2, #16
 80023da:	4013      	ands	r3, r2
 80023dc:	d002      	beq.n	80023e4 <UART_SetConfig+0x258>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80023de:	4b4b      	ldr	r3, [pc, #300]	; (800250c <UART_SetConfig+0x380>)
 80023e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80023e2:	e015      	b.n	8002410 <UART_SetConfig+0x284>
          pclk = (uint32_t) HSI_VALUE;
 80023e4:	4b4a      	ldr	r3, [pc, #296]	; (8002510 <UART_SetConfig+0x384>)
 80023e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80023e8:	e012      	b.n	8002410 <UART_SetConfig+0x284>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80023ea:	f7ff fc71 	bl	8001cd0 <HAL_RCC_GetSysClockFreq>
 80023ee:	0003      	movs	r3, r0
 80023f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80023f2:	e00d      	b.n	8002410 <UART_SetConfig+0x284>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80023f4:	2380      	movs	r3, #128	; 0x80
 80023f6:	021b      	lsls	r3, r3, #8
 80023f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80023fa:	e009      	b.n	8002410 <UART_SetConfig+0x284>
      default:
        pclk = 0U;
 80023fc:	2300      	movs	r3, #0
 80023fe:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002400:	231a      	movs	r3, #26
 8002402:	2218      	movs	r2, #24
 8002404:	4694      	mov	ip, r2
 8002406:	44bc      	add	ip, r7
 8002408:	4463      	add	r3, ip
 800240a:	2201      	movs	r2, #1
 800240c:	701a      	strb	r2, [r3, #0]
        break;
 800240e:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002412:	2b00      	cmp	r3, #0
 8002414:	d100      	bne.n	8002418 <UART_SetConfig+0x28c>
 8002416:	e143      	b.n	80026a0 <UART_SetConfig+0x514>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	685a      	ldr	r2, [r3, #4]
 800241c:	0013      	movs	r3, r2
 800241e:	005b      	lsls	r3, r3, #1
 8002420:	189a      	adds	r2, r3, r2
 8002422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002424:	429a      	cmp	r2, r3
 8002426:	d805      	bhi.n	8002434 <UART_SetConfig+0x2a8>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002428:	69fb      	ldr	r3, [r7, #28]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	031a      	lsls	r2, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800242e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002430:	429a      	cmp	r2, r3
 8002432:	d207      	bcs.n	8002444 <UART_SetConfig+0x2b8>
      {
        ret = HAL_ERROR;
 8002434:	231a      	movs	r3, #26
 8002436:	2218      	movs	r2, #24
 8002438:	4694      	mov	ip, r2
 800243a:	44bc      	add	ip, r7
 800243c:	4463      	add	r3, ip
 800243e:	2201      	movs	r2, #1
 8002440:	701a      	strb	r2, [r3, #0]
 8002442:	e12d      	b.n	80026a0 <UART_SetConfig+0x514>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002446:	613b      	str	r3, [r7, #16]
 8002448:	2300      	movs	r3, #0
 800244a:	617b      	str	r3, [r7, #20]
 800244c:	6939      	ldr	r1, [r7, #16]
 800244e:	697a      	ldr	r2, [r7, #20]
 8002450:	000b      	movs	r3, r1
 8002452:	0e1b      	lsrs	r3, r3, #24
 8002454:	0010      	movs	r0, r2
 8002456:	0205      	lsls	r5, r0, #8
 8002458:	431d      	orrs	r5, r3
 800245a:	000b      	movs	r3, r1
 800245c:	021c      	lsls	r4, r3, #8
 800245e:	69fb      	ldr	r3, [r7, #28]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	085b      	lsrs	r3, r3, #1
 8002464:	60bb      	str	r3, [r7, #8]
 8002466:	2300      	movs	r3, #0
 8002468:	60fb      	str	r3, [r7, #12]
 800246a:	68b8      	ldr	r0, [r7, #8]
 800246c:	68f9      	ldr	r1, [r7, #12]
 800246e:	1900      	adds	r0, r0, r4
 8002470:	4169      	adcs	r1, r5
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	603b      	str	r3, [r7, #0]
 8002478:	2300      	movs	r3, #0
 800247a:	607b      	str	r3, [r7, #4]
 800247c:	683a      	ldr	r2, [r7, #0]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	f7fd fece 	bl	8000220 <__aeabi_uldivmod>
 8002484:	0003      	movs	r3, r0
 8002486:	000c      	movs	r4, r1
 8002488:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800248a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800248c:	4a21      	ldr	r2, [pc, #132]	; (8002514 <UART_SetConfig+0x388>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d908      	bls.n	80024a4 <UART_SetConfig+0x318>
 8002492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002494:	4a20      	ldr	r2, [pc, #128]	; (8002518 <UART_SetConfig+0x38c>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d804      	bhi.n	80024a4 <UART_SetConfig+0x318>
        {
          huart->Instance->BRR = usartdiv;
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80024a0:	60da      	str	r2, [r3, #12]
 80024a2:	e0fd      	b.n	80026a0 <UART_SetConfig+0x514>
        }
        else
        {
          ret = HAL_ERROR;
 80024a4:	231a      	movs	r3, #26
 80024a6:	2218      	movs	r2, #24
 80024a8:	4694      	mov	ip, r2
 80024aa:	44bc      	add	ip, r7
 80024ac:	4463      	add	r3, ip
 80024ae:	2201      	movs	r2, #1
 80024b0:	701a      	strb	r2, [r3, #0]
 80024b2:	e0f5      	b.n	80026a0 <UART_SetConfig+0x514>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80024b4:	69fb      	ldr	r3, [r7, #28]
 80024b6:	69da      	ldr	r2, [r3, #28]
 80024b8:	2380      	movs	r3, #128	; 0x80
 80024ba:	021b      	lsls	r3, r3, #8
 80024bc:	429a      	cmp	r2, r3
 80024be:	d000      	beq.n	80024c2 <UART_SetConfig+0x336>
 80024c0:	e095      	b.n	80025ee <UART_SetConfig+0x462>
  {
    switch (clocksource)
 80024c2:	231b      	movs	r3, #27
 80024c4:	2218      	movs	r2, #24
 80024c6:	4694      	mov	ip, r2
 80024c8:	44bc      	add	ip, r7
 80024ca:	4463      	add	r3, ip
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	2b08      	cmp	r3, #8
 80024d0:	d83a      	bhi.n	8002548 <UART_SetConfig+0x3bc>
 80024d2:	009a      	lsls	r2, r3, #2
 80024d4:	4b11      	ldr	r3, [pc, #68]	; (800251c <UART_SetConfig+0x390>)
 80024d6:	18d3      	adds	r3, r2, r3
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80024dc:	f7ff fca4 	bl	8001e28 <HAL_RCC_GetPCLK1Freq>
 80024e0:	0003      	movs	r3, r0
 80024e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80024e4:	e03a      	b.n	800255c <UART_SetConfig+0x3d0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80024e6:	f7ff fcb5 	bl	8001e54 <HAL_RCC_GetPCLK2Freq>
 80024ea:	0003      	movs	r3, r0
 80024ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80024ee:	e035      	b.n	800255c <UART_SetConfig+0x3d0>
 80024f0:	efff69f3 	.word	0xefff69f3
 80024f4:	ffffcfff 	.word	0xffffcfff
 80024f8:	40004800 	.word	0x40004800
 80024fc:	fffff4ff 	.word	0xfffff4ff
 8002500:	40013800 	.word	0x40013800
 8002504:	40021000 	.word	0x40021000
 8002508:	40004400 	.word	0x40004400
 800250c:	003d0900 	.word	0x003d0900
 8002510:	00f42400 	.word	0x00f42400
 8002514:	000002ff 	.word	0x000002ff
 8002518:	000fffff 	.word	0x000fffff
 800251c:	08002a50 	.word	0x08002a50
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002520:	4b67      	ldr	r3, [pc, #412]	; (80026c0 <UART_SetConfig+0x534>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	2210      	movs	r2, #16
 8002526:	4013      	ands	r3, r2
 8002528:	d002      	beq.n	8002530 <UART_SetConfig+0x3a4>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800252a:	4b66      	ldr	r3, [pc, #408]	; (80026c4 <UART_SetConfig+0x538>)
 800252c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800252e:	e015      	b.n	800255c <UART_SetConfig+0x3d0>
          pclk = (uint32_t) HSI_VALUE;
 8002530:	4b65      	ldr	r3, [pc, #404]	; (80026c8 <UART_SetConfig+0x53c>)
 8002532:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002534:	e012      	b.n	800255c <UART_SetConfig+0x3d0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002536:	f7ff fbcb 	bl	8001cd0 <HAL_RCC_GetSysClockFreq>
 800253a:	0003      	movs	r3, r0
 800253c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800253e:	e00d      	b.n	800255c <UART_SetConfig+0x3d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002540:	2380      	movs	r3, #128	; 0x80
 8002542:	021b      	lsls	r3, r3, #8
 8002544:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002546:	e009      	b.n	800255c <UART_SetConfig+0x3d0>
      default:
        pclk = 0U;
 8002548:	2300      	movs	r3, #0
 800254a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800254c:	231a      	movs	r3, #26
 800254e:	2218      	movs	r2, #24
 8002550:	4694      	mov	ip, r2
 8002552:	44bc      	add	ip, r7
 8002554:	4463      	add	r3, ip
 8002556:	2201      	movs	r2, #1
 8002558:	701a      	strb	r2, [r3, #0]
        break;
 800255a:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800255c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800255e:	2b00      	cmp	r3, #0
 8002560:	d100      	bne.n	8002564 <UART_SetConfig+0x3d8>
 8002562:	e09d      	b.n	80026a0 <UART_SetConfig+0x514>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002566:	005a      	lsls	r2, r3, #1
 8002568:	69fb      	ldr	r3, [r7, #28]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	085b      	lsrs	r3, r3, #1
 800256e:	18d2      	adds	r2, r2, r3
 8002570:	69fb      	ldr	r3, [r7, #28]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	0019      	movs	r1, r3
 8002576:	0010      	movs	r0, r2
 8002578:	f7fd fdc6 	bl	8000108 <__udivsi3>
 800257c:	0003      	movs	r3, r0
 800257e:	b29b      	uxth	r3, r3
 8002580:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002584:	2b0f      	cmp	r3, #15
 8002586:	d92a      	bls.n	80025de <UART_SetConfig+0x452>
 8002588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800258a:	4a50      	ldr	r2, [pc, #320]	; (80026cc <UART_SetConfig+0x540>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d826      	bhi.n	80025de <UART_SetConfig+0x452>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002592:	b29a      	uxth	r2, r3
 8002594:	230e      	movs	r3, #14
 8002596:	2118      	movs	r1, #24
 8002598:	468c      	mov	ip, r1
 800259a:	44bc      	add	ip, r7
 800259c:	4463      	add	r3, ip
 800259e:	210f      	movs	r1, #15
 80025a0:	438a      	bics	r2, r1
 80025a2:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80025a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025a6:	085b      	lsrs	r3, r3, #1
 80025a8:	b29b      	uxth	r3, r3
 80025aa:	2207      	movs	r2, #7
 80025ac:	4013      	ands	r3, r2
 80025ae:	b299      	uxth	r1, r3
 80025b0:	230e      	movs	r3, #14
 80025b2:	2218      	movs	r2, #24
 80025b4:	4694      	mov	ip, r2
 80025b6:	44bc      	add	ip, r7
 80025b8:	4463      	add	r3, ip
 80025ba:	220e      	movs	r2, #14
 80025bc:	2018      	movs	r0, #24
 80025be:	4684      	mov	ip, r0
 80025c0:	44bc      	add	ip, r7
 80025c2:	4462      	add	r2, ip
 80025c4:	8812      	ldrh	r2, [r2, #0]
 80025c6:	430a      	orrs	r2, r1
 80025c8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	220e      	movs	r2, #14
 80025d0:	2118      	movs	r1, #24
 80025d2:	468c      	mov	ip, r1
 80025d4:	44bc      	add	ip, r7
 80025d6:	4462      	add	r2, ip
 80025d8:	8812      	ldrh	r2, [r2, #0]
 80025da:	60da      	str	r2, [r3, #12]
 80025dc:	e060      	b.n	80026a0 <UART_SetConfig+0x514>
      }
      else
      {
        ret = HAL_ERROR;
 80025de:	231a      	movs	r3, #26
 80025e0:	2218      	movs	r2, #24
 80025e2:	4694      	mov	ip, r2
 80025e4:	44bc      	add	ip, r7
 80025e6:	4463      	add	r3, ip
 80025e8:	2201      	movs	r2, #1
 80025ea:	701a      	strb	r2, [r3, #0]
 80025ec:	e058      	b.n	80026a0 <UART_SetConfig+0x514>
      }
    }
  }
  else
  {
    switch (clocksource)
 80025ee:	231b      	movs	r3, #27
 80025f0:	2218      	movs	r2, #24
 80025f2:	4694      	mov	ip, r2
 80025f4:	44bc      	add	ip, r7
 80025f6:	4463      	add	r3, ip
 80025f8:	781b      	ldrb	r3, [r3, #0]
 80025fa:	2b08      	cmp	r3, #8
 80025fc:	d822      	bhi.n	8002644 <UART_SetConfig+0x4b8>
 80025fe:	009a      	lsls	r2, r3, #2
 8002600:	4b33      	ldr	r3, [pc, #204]	; (80026d0 <UART_SetConfig+0x544>)
 8002602:	18d3      	adds	r3, r2, r3
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002608:	f7ff fc0e 	bl	8001e28 <HAL_RCC_GetPCLK1Freq>
 800260c:	0003      	movs	r3, r0
 800260e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002610:	e022      	b.n	8002658 <UART_SetConfig+0x4cc>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002612:	f7ff fc1f 	bl	8001e54 <HAL_RCC_GetPCLK2Freq>
 8002616:	0003      	movs	r3, r0
 8002618:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800261a:	e01d      	b.n	8002658 <UART_SetConfig+0x4cc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800261c:	4b28      	ldr	r3, [pc, #160]	; (80026c0 <UART_SetConfig+0x534>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	2210      	movs	r2, #16
 8002622:	4013      	ands	r3, r2
 8002624:	d002      	beq.n	800262c <UART_SetConfig+0x4a0>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002626:	4b27      	ldr	r3, [pc, #156]	; (80026c4 <UART_SetConfig+0x538>)
 8002628:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800262a:	e015      	b.n	8002658 <UART_SetConfig+0x4cc>
          pclk = (uint32_t) HSI_VALUE;
 800262c:	4b26      	ldr	r3, [pc, #152]	; (80026c8 <UART_SetConfig+0x53c>)
 800262e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002630:	e012      	b.n	8002658 <UART_SetConfig+0x4cc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002632:	f7ff fb4d 	bl	8001cd0 <HAL_RCC_GetSysClockFreq>
 8002636:	0003      	movs	r3, r0
 8002638:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800263a:	e00d      	b.n	8002658 <UART_SetConfig+0x4cc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800263c:	2380      	movs	r3, #128	; 0x80
 800263e:	021b      	lsls	r3, r3, #8
 8002640:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002642:	e009      	b.n	8002658 <UART_SetConfig+0x4cc>
      default:
        pclk = 0U;
 8002644:	2300      	movs	r3, #0
 8002646:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002648:	231a      	movs	r3, #26
 800264a:	2218      	movs	r2, #24
 800264c:	4694      	mov	ip, r2
 800264e:	44bc      	add	ip, r7
 8002650:	4463      	add	r3, ip
 8002652:	2201      	movs	r2, #1
 8002654:	701a      	strb	r2, [r3, #0]
        break;
 8002656:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800265a:	2b00      	cmp	r3, #0
 800265c:	d020      	beq.n	80026a0 <UART_SetConfig+0x514>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	085a      	lsrs	r2, r3, #1
 8002664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002666:	18d2      	adds	r2, r2, r3
 8002668:	69fb      	ldr	r3, [r7, #28]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	0019      	movs	r1, r3
 800266e:	0010      	movs	r0, r2
 8002670:	f7fd fd4a 	bl	8000108 <__udivsi3>
 8002674:	0003      	movs	r3, r0
 8002676:	b29b      	uxth	r3, r3
 8002678:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800267a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800267c:	2b0f      	cmp	r3, #15
 800267e:	d908      	bls.n	8002692 <UART_SetConfig+0x506>
 8002680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002682:	4a12      	ldr	r2, [pc, #72]	; (80026cc <UART_SetConfig+0x540>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d804      	bhi.n	8002692 <UART_SetConfig+0x506>
      {
        huart->Instance->BRR = usartdiv;
 8002688:	69fb      	ldr	r3, [r7, #28]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800268e:	60da      	str	r2, [r3, #12]
 8002690:	e006      	b.n	80026a0 <UART_SetConfig+0x514>
      }
      else
      {
        ret = HAL_ERROR;
 8002692:	231a      	movs	r3, #26
 8002694:	2218      	movs	r2, #24
 8002696:	4694      	mov	ip, r2
 8002698:	44bc      	add	ip, r7
 800269a:	4463      	add	r3, ip
 800269c:	2201      	movs	r2, #1
 800269e:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80026a0:	69fb      	ldr	r3, [r7, #28]
 80026a2:	2200      	movs	r2, #0
 80026a4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80026a6:	69fb      	ldr	r3, [r7, #28]
 80026a8:	2200      	movs	r2, #0
 80026aa:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80026ac:	231a      	movs	r3, #26
 80026ae:	2218      	movs	r2, #24
 80026b0:	4694      	mov	ip, r2
 80026b2:	44bc      	add	ip, r7
 80026b4:	4463      	add	r3, ip
 80026b6:	781b      	ldrb	r3, [r3, #0]
}
 80026b8:	0018      	movs	r0, r3
 80026ba:	46bd      	mov	sp, r7
 80026bc:	b00e      	add	sp, #56	; 0x38
 80026be:	bdb0      	pop	{r4, r5, r7, pc}
 80026c0:	40021000 	.word	0x40021000
 80026c4:	003d0900 	.word	0x003d0900
 80026c8:	00f42400 	.word	0x00f42400
 80026cc:	0000ffff 	.word	0x0000ffff
 80026d0:	08002a74 	.word	0x08002a74

080026d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b082      	sub	sp, #8
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e0:	2201      	movs	r2, #1
 80026e2:	4013      	ands	r3, r2
 80026e4:	d00a      	beq.n	80026fc <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	687a      	ldr	r2, [r7, #4]
 80026ec:	6812      	ldr	r2, [r2, #0]
 80026ee:	6852      	ldr	r2, [r2, #4]
 80026f0:	4945      	ldr	r1, [pc, #276]	; (8002808 <UART_AdvFeatureConfig+0x134>)
 80026f2:	4011      	ands	r1, r2
 80026f4:	687a      	ldr	r2, [r7, #4]
 80026f6:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80026f8:	430a      	orrs	r2, r1
 80026fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002700:	2202      	movs	r2, #2
 8002702:	4013      	ands	r3, r2
 8002704:	d00a      	beq.n	800271c <UART_AdvFeatureConfig+0x48>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	687a      	ldr	r2, [r7, #4]
 800270c:	6812      	ldr	r2, [r2, #0]
 800270e:	6852      	ldr	r2, [r2, #4]
 8002710:	493e      	ldr	r1, [pc, #248]	; (800280c <UART_AdvFeatureConfig+0x138>)
 8002712:	4011      	ands	r1, r2
 8002714:	687a      	ldr	r2, [r7, #4]
 8002716:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002718:	430a      	orrs	r2, r1
 800271a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002720:	2204      	movs	r2, #4
 8002722:	4013      	ands	r3, r2
 8002724:	d00a      	beq.n	800273c <UART_AdvFeatureConfig+0x68>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	6812      	ldr	r2, [r2, #0]
 800272e:	6852      	ldr	r2, [r2, #4]
 8002730:	4937      	ldr	r1, [pc, #220]	; (8002810 <UART_AdvFeatureConfig+0x13c>)
 8002732:	4011      	ands	r1, r2
 8002734:	687a      	ldr	r2, [r7, #4]
 8002736:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002738:	430a      	orrs	r2, r1
 800273a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002740:	2208      	movs	r2, #8
 8002742:	4013      	ands	r3, r2
 8002744:	d00a      	beq.n	800275c <UART_AdvFeatureConfig+0x88>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	687a      	ldr	r2, [r7, #4]
 800274c:	6812      	ldr	r2, [r2, #0]
 800274e:	6852      	ldr	r2, [r2, #4]
 8002750:	4930      	ldr	r1, [pc, #192]	; (8002814 <UART_AdvFeatureConfig+0x140>)
 8002752:	4011      	ands	r1, r2
 8002754:	687a      	ldr	r2, [r7, #4]
 8002756:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002758:	430a      	orrs	r2, r1
 800275a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002760:	2210      	movs	r2, #16
 8002762:	4013      	ands	r3, r2
 8002764:	d00a      	beq.n	800277c <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	687a      	ldr	r2, [r7, #4]
 800276c:	6812      	ldr	r2, [r2, #0]
 800276e:	6892      	ldr	r2, [r2, #8]
 8002770:	4929      	ldr	r1, [pc, #164]	; (8002818 <UART_AdvFeatureConfig+0x144>)
 8002772:	4011      	ands	r1, r2
 8002774:	687a      	ldr	r2, [r7, #4]
 8002776:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002778:	430a      	orrs	r2, r1
 800277a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002780:	2220      	movs	r2, #32
 8002782:	4013      	ands	r3, r2
 8002784:	d00a      	beq.n	800279c <UART_AdvFeatureConfig+0xc8>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	687a      	ldr	r2, [r7, #4]
 800278c:	6812      	ldr	r2, [r2, #0]
 800278e:	6892      	ldr	r2, [r2, #8]
 8002790:	4922      	ldr	r1, [pc, #136]	; (800281c <UART_AdvFeatureConfig+0x148>)
 8002792:	4011      	ands	r1, r2
 8002794:	687a      	ldr	r2, [r7, #4]
 8002796:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002798:	430a      	orrs	r2, r1
 800279a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a0:	2240      	movs	r2, #64	; 0x40
 80027a2:	4013      	ands	r3, r2
 80027a4:	d01b      	beq.n	80027de <UART_AdvFeatureConfig+0x10a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	687a      	ldr	r2, [r7, #4]
 80027ac:	6812      	ldr	r2, [r2, #0]
 80027ae:	6852      	ldr	r2, [r2, #4]
 80027b0:	491b      	ldr	r1, [pc, #108]	; (8002820 <UART_AdvFeatureConfig+0x14c>)
 80027b2:	4011      	ands	r1, r2
 80027b4:	687a      	ldr	r2, [r7, #4]
 80027b6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80027b8:	430a      	orrs	r2, r1
 80027ba:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027c0:	2380      	movs	r3, #128	; 0x80
 80027c2:	035b      	lsls	r3, r3, #13
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d10a      	bne.n	80027de <UART_AdvFeatureConfig+0x10a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	687a      	ldr	r2, [r7, #4]
 80027ce:	6812      	ldr	r2, [r2, #0]
 80027d0:	6852      	ldr	r2, [r2, #4]
 80027d2:	4914      	ldr	r1, [pc, #80]	; (8002824 <UART_AdvFeatureConfig+0x150>)
 80027d4:	4011      	ands	r1, r2
 80027d6:	687a      	ldr	r2, [r7, #4]
 80027d8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80027da:	430a      	orrs	r2, r1
 80027dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e2:	2280      	movs	r2, #128	; 0x80
 80027e4:	4013      	ands	r3, r2
 80027e6:	d00a      	beq.n	80027fe <UART_AdvFeatureConfig+0x12a>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	687a      	ldr	r2, [r7, #4]
 80027ee:	6812      	ldr	r2, [r2, #0]
 80027f0:	6852      	ldr	r2, [r2, #4]
 80027f2:	490d      	ldr	r1, [pc, #52]	; (8002828 <UART_AdvFeatureConfig+0x154>)
 80027f4:	4011      	ands	r1, r2
 80027f6:	687a      	ldr	r2, [r7, #4]
 80027f8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80027fa:	430a      	orrs	r2, r1
 80027fc:	605a      	str	r2, [r3, #4]
  }
}
 80027fe:	46c0      	nop			; (mov r8, r8)
 8002800:	46bd      	mov	sp, r7
 8002802:	b002      	add	sp, #8
 8002804:	bd80      	pop	{r7, pc}
 8002806:	46c0      	nop			; (mov r8, r8)
 8002808:	fffdffff 	.word	0xfffdffff
 800280c:	fffeffff 	.word	0xfffeffff
 8002810:	fffbffff 	.word	0xfffbffff
 8002814:	ffff7fff 	.word	0xffff7fff
 8002818:	ffffefff 	.word	0xffffefff
 800281c:	ffffdfff 	.word	0xffffdfff
 8002820:	ffefffff 	.word	0xffefffff
 8002824:	ff9fffff 	.word	0xff9fffff
 8002828:	fff7ffff 	.word	0xfff7ffff

0800282c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b086      	sub	sp, #24
 8002830:	af02      	add	r7, sp, #8
 8002832:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2280      	movs	r2, #128	; 0x80
 8002838:	2100      	movs	r1, #0
 800283a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800283c:	f7fe f92a 	bl	8000a94 <HAL_GetTick>
 8002840:	0003      	movs	r3, r0
 8002842:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	2208      	movs	r2, #8
 800284c:	4013      	ands	r3, r2
 800284e:	2b08      	cmp	r3, #8
 8002850:	d10d      	bne.n	800286e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002852:	68fa      	ldr	r2, [r7, #12]
 8002854:	2380      	movs	r3, #128	; 0x80
 8002856:	0399      	lsls	r1, r3, #14
 8002858:	6878      	ldr	r0, [r7, #4]
 800285a:	4b18      	ldr	r3, [pc, #96]	; (80028bc <UART_CheckIdleState+0x90>)
 800285c:	9300      	str	r3, [sp, #0]
 800285e:	0013      	movs	r3, r2
 8002860:	2200      	movs	r2, #0
 8002862:	f000 f82d 	bl	80028c0 <UART_WaitOnFlagUntilTimeout>
 8002866:	1e03      	subs	r3, r0, #0
 8002868:	d001      	beq.n	800286e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800286a:	2303      	movs	r3, #3
 800286c:	e022      	b.n	80028b4 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	2204      	movs	r2, #4
 8002876:	4013      	ands	r3, r2
 8002878:	2b04      	cmp	r3, #4
 800287a:	d10d      	bne.n	8002898 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800287c:	68fa      	ldr	r2, [r7, #12]
 800287e:	2380      	movs	r3, #128	; 0x80
 8002880:	03d9      	lsls	r1, r3, #15
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	4b0d      	ldr	r3, [pc, #52]	; (80028bc <UART_CheckIdleState+0x90>)
 8002886:	9300      	str	r3, [sp, #0]
 8002888:	0013      	movs	r3, r2
 800288a:	2200      	movs	r2, #0
 800288c:	f000 f818 	bl	80028c0 <UART_WaitOnFlagUntilTimeout>
 8002890:	1e03      	subs	r3, r0, #0
 8002892:	d001      	beq.n	8002898 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002894:	2303      	movs	r3, #3
 8002896:	e00d      	b.n	80028b4 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2220      	movs	r2, #32
 800289c:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2220      	movs	r2, #32
 80028a2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2200      	movs	r2, #0
 80028a8:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2274      	movs	r2, #116	; 0x74
 80028ae:	2100      	movs	r1, #0
 80028b0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80028b2:	2300      	movs	r3, #0
}
 80028b4:	0018      	movs	r0, r3
 80028b6:	46bd      	mov	sp, r7
 80028b8:	b004      	add	sp, #16
 80028ba:	bd80      	pop	{r7, pc}
 80028bc:	01ffffff 	.word	0x01ffffff

080028c0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b084      	sub	sp, #16
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	60f8      	str	r0, [r7, #12]
 80028c8:	60b9      	str	r1, [r7, #8]
 80028ca:	603b      	str	r3, [r7, #0]
 80028cc:	1dfb      	adds	r3, r7, #7
 80028ce:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028d0:	e05e      	b.n	8002990 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028d2:	69bb      	ldr	r3, [r7, #24]
 80028d4:	3301      	adds	r3, #1
 80028d6:	d05b      	beq.n	8002990 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028d8:	f7fe f8dc 	bl	8000a94 <HAL_GetTick>
 80028dc:	0002      	movs	r2, r0
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	1ad2      	subs	r2, r2, r3
 80028e2:	69bb      	ldr	r3, [r7, #24]
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d802      	bhi.n	80028ee <UART_WaitOnFlagUntilTimeout+0x2e>
 80028e8:	69bb      	ldr	r3, [r7, #24]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d11b      	bne.n	8002926 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	68fa      	ldr	r2, [r7, #12]
 80028f4:	6812      	ldr	r2, [r2, #0]
 80028f6:	6812      	ldr	r2, [r2, #0]
 80028f8:	492f      	ldr	r1, [pc, #188]	; (80029b8 <UART_WaitOnFlagUntilTimeout+0xf8>)
 80028fa:	400a      	ands	r2, r1
 80028fc:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	68fa      	ldr	r2, [r7, #12]
 8002904:	6812      	ldr	r2, [r2, #0]
 8002906:	6892      	ldr	r2, [r2, #8]
 8002908:	2101      	movs	r1, #1
 800290a:	438a      	bics	r2, r1
 800290c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	2220      	movs	r2, #32
 8002912:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	2220      	movs	r2, #32
 8002918:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	2274      	movs	r2, #116	; 0x74
 800291e:	2100      	movs	r1, #0
 8002920:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002922:	2303      	movs	r3, #3
 8002924:	e044      	b.n	80029b0 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	2204      	movs	r2, #4
 800292e:	4013      	ands	r3, r2
 8002930:	d02e      	beq.n	8002990 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	69da      	ldr	r2, [r3, #28]
 8002938:	2380      	movs	r3, #128	; 0x80
 800293a:	011b      	lsls	r3, r3, #4
 800293c:	401a      	ands	r2, r3
 800293e:	2380      	movs	r3, #128	; 0x80
 8002940:	011b      	lsls	r3, r3, #4
 8002942:	429a      	cmp	r2, r3
 8002944:	d124      	bne.n	8002990 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	2280      	movs	r2, #128	; 0x80
 800294c:	0112      	lsls	r2, r2, #4
 800294e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	68fa      	ldr	r2, [r7, #12]
 8002956:	6812      	ldr	r2, [r2, #0]
 8002958:	6812      	ldr	r2, [r2, #0]
 800295a:	4917      	ldr	r1, [pc, #92]	; (80029b8 <UART_WaitOnFlagUntilTimeout+0xf8>)
 800295c:	400a      	ands	r2, r1
 800295e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	68fa      	ldr	r2, [r7, #12]
 8002966:	6812      	ldr	r2, [r2, #0]
 8002968:	6892      	ldr	r2, [r2, #8]
 800296a:	2101      	movs	r1, #1
 800296c:	438a      	bics	r2, r1
 800296e:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2220      	movs	r2, #32
 8002974:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	2220      	movs	r2, #32
 800297a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2280      	movs	r2, #128	; 0x80
 8002980:	2120      	movs	r1, #32
 8002982:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	2274      	movs	r2, #116	; 0x74
 8002988:	2100      	movs	r1, #0
 800298a:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800298c:	2303      	movs	r3, #3
 800298e:	e00f      	b.n	80029b0 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	69db      	ldr	r3, [r3, #28]
 8002996:	68ba      	ldr	r2, [r7, #8]
 8002998:	401a      	ands	r2, r3
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	425a      	negs	r2, r3
 80029a0:	4153      	adcs	r3, r2
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	001a      	movs	r2, r3
 80029a6:	1dfb      	adds	r3, r7, #7
 80029a8:	781b      	ldrb	r3, [r3, #0]
 80029aa:	429a      	cmp	r2, r3
 80029ac:	d091      	beq.n	80028d2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80029ae:	2300      	movs	r3, #0
}
 80029b0:	0018      	movs	r0, r3
 80029b2:	46bd      	mov	sp, r7
 80029b4:	b004      	add	sp, #16
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	fffffe5f 	.word	0xfffffe5f

080029bc <__libc_init_array>:
 80029bc:	b570      	push	{r4, r5, r6, lr}
 80029be:	2600      	movs	r6, #0
 80029c0:	4d0c      	ldr	r5, [pc, #48]	; (80029f4 <__libc_init_array+0x38>)
 80029c2:	4c0d      	ldr	r4, [pc, #52]	; (80029f8 <__libc_init_array+0x3c>)
 80029c4:	1b64      	subs	r4, r4, r5
 80029c6:	10a4      	asrs	r4, r4, #2
 80029c8:	42a6      	cmp	r6, r4
 80029ca:	d109      	bne.n	80029e0 <__libc_init_array+0x24>
 80029cc:	2600      	movs	r6, #0
 80029ce:	f000 f821 	bl	8002a14 <_init>
 80029d2:	4d0a      	ldr	r5, [pc, #40]	; (80029fc <__libc_init_array+0x40>)
 80029d4:	4c0a      	ldr	r4, [pc, #40]	; (8002a00 <__libc_init_array+0x44>)
 80029d6:	1b64      	subs	r4, r4, r5
 80029d8:	10a4      	asrs	r4, r4, #2
 80029da:	42a6      	cmp	r6, r4
 80029dc:	d105      	bne.n	80029ea <__libc_init_array+0x2e>
 80029de:	bd70      	pop	{r4, r5, r6, pc}
 80029e0:	00b3      	lsls	r3, r6, #2
 80029e2:	58eb      	ldr	r3, [r5, r3]
 80029e4:	4798      	blx	r3
 80029e6:	3601      	adds	r6, #1
 80029e8:	e7ee      	b.n	80029c8 <__libc_init_array+0xc>
 80029ea:	00b3      	lsls	r3, r6, #2
 80029ec:	58eb      	ldr	r3, [r5, r3]
 80029ee:	4798      	blx	r3
 80029f0:	3601      	adds	r6, #1
 80029f2:	e7f2      	b.n	80029da <__libc_init_array+0x1e>
 80029f4:	08002aa0 	.word	0x08002aa0
 80029f8:	08002aa0 	.word	0x08002aa0
 80029fc:	08002aa0 	.word	0x08002aa0
 8002a00:	08002aa4 	.word	0x08002aa4

08002a04 <memset>:
 8002a04:	0003      	movs	r3, r0
 8002a06:	1882      	adds	r2, r0, r2
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d100      	bne.n	8002a0e <memset+0xa>
 8002a0c:	4770      	bx	lr
 8002a0e:	7019      	strb	r1, [r3, #0]
 8002a10:	3301      	adds	r3, #1
 8002a12:	e7f9      	b.n	8002a08 <memset+0x4>

08002a14 <_init>:
 8002a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a16:	46c0      	nop			; (mov r8, r8)
 8002a18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a1a:	bc08      	pop	{r3}
 8002a1c:	469e      	mov	lr, r3
 8002a1e:	4770      	bx	lr

08002a20 <_fini>:
 8002a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a22:	46c0      	nop			; (mov r8, r8)
 8002a24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a26:	bc08      	pop	{r3}
 8002a28:	469e      	mov	lr, r3
 8002a2a:	4770      	bx	lr
