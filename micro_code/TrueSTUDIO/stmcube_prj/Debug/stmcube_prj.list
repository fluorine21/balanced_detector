
stmcube_prj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d50  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08003e10  08003e10  00013e10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08003ea0  08003ea0  00013ea0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08003ea8  08003ea8  00013ea8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08003eac  08003eac  00013eac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  08003eb0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000100  2000000c  08003ebc  0002000c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  2000010c  08003ebc  0002010c  2**0
                  ALLOC
  9 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 10 .debug_line   000043ee  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   00009181  00000000  00000000  00024422  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00001b29  00000000  00000000  0002d5a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000008e8  00000000  00000000  0002f0d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000820  00000000  00000000  0002f9b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002a22  00000000  00000000  000301d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00032bfa  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001e64  00000000  00000000  00032c78  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003df8 	.word	0x08003df8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08003df8 	.word	0x08003df8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	1c08      	adds	r0, r1, #0
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f830 	bl	80002b4 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4647      	mov	r7, r8
 8000266:	0415      	lsls	r5, r2, #16
 8000268:	0c2d      	lsrs	r5, r5, #16
 800026a:	002e      	movs	r6, r5
 800026c:	b580      	push	{r7, lr}
 800026e:	0407      	lsls	r7, r0, #16
 8000270:	0c14      	lsrs	r4, r2, #16
 8000272:	0c3f      	lsrs	r7, r7, #16
 8000274:	4699      	mov	r9, r3
 8000276:	0c03      	lsrs	r3, r0, #16
 8000278:	437e      	muls	r6, r7
 800027a:	435d      	muls	r5, r3
 800027c:	4367      	muls	r7, r4
 800027e:	4363      	muls	r3, r4
 8000280:	197f      	adds	r7, r7, r5
 8000282:	0c34      	lsrs	r4, r6, #16
 8000284:	19e4      	adds	r4, r4, r7
 8000286:	469c      	mov	ip, r3
 8000288:	42a5      	cmp	r5, r4
 800028a:	d903      	bls.n	8000294 <__aeabi_lmul+0x34>
 800028c:	2380      	movs	r3, #128	; 0x80
 800028e:	025b      	lsls	r3, r3, #9
 8000290:	4698      	mov	r8, r3
 8000292:	44c4      	add	ip, r8
 8000294:	464b      	mov	r3, r9
 8000296:	4351      	muls	r1, r2
 8000298:	4343      	muls	r3, r0
 800029a:	0436      	lsls	r6, r6, #16
 800029c:	0c36      	lsrs	r6, r6, #16
 800029e:	0c25      	lsrs	r5, r4, #16
 80002a0:	0424      	lsls	r4, r4, #16
 80002a2:	4465      	add	r5, ip
 80002a4:	19a4      	adds	r4, r4, r6
 80002a6:	1859      	adds	r1, r3, r1
 80002a8:	1949      	adds	r1, r1, r5
 80002aa:	0020      	movs	r0, r4
 80002ac:	bc0c      	pop	{r2, r3}
 80002ae:	4690      	mov	r8, r2
 80002b0:	4699      	mov	r9, r3
 80002b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002b4 <__udivmoddi4>:
 80002b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002b6:	4657      	mov	r7, sl
 80002b8:	464e      	mov	r6, r9
 80002ba:	4645      	mov	r5, r8
 80002bc:	46de      	mov	lr, fp
 80002be:	b5e0      	push	{r5, r6, r7, lr}
 80002c0:	0004      	movs	r4, r0
 80002c2:	b083      	sub	sp, #12
 80002c4:	000d      	movs	r5, r1
 80002c6:	4692      	mov	sl, r2
 80002c8:	4699      	mov	r9, r3
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d82f      	bhi.n	800032e <__udivmoddi4+0x7a>
 80002ce:	d02c      	beq.n	800032a <__udivmoddi4+0x76>
 80002d0:	4649      	mov	r1, r9
 80002d2:	4650      	mov	r0, sl
 80002d4:	f000 f8ae 	bl	8000434 <__clzdi2>
 80002d8:	0029      	movs	r1, r5
 80002da:	0006      	movs	r6, r0
 80002dc:	0020      	movs	r0, r4
 80002de:	f000 f8a9 	bl	8000434 <__clzdi2>
 80002e2:	1a33      	subs	r3, r6, r0
 80002e4:	4698      	mov	r8, r3
 80002e6:	3b20      	subs	r3, #32
 80002e8:	469b      	mov	fp, r3
 80002ea:	d500      	bpl.n	80002ee <__udivmoddi4+0x3a>
 80002ec:	e074      	b.n	80003d8 <__udivmoddi4+0x124>
 80002ee:	4653      	mov	r3, sl
 80002f0:	465a      	mov	r2, fp
 80002f2:	4093      	lsls	r3, r2
 80002f4:	001f      	movs	r7, r3
 80002f6:	4653      	mov	r3, sl
 80002f8:	4642      	mov	r2, r8
 80002fa:	4093      	lsls	r3, r2
 80002fc:	001e      	movs	r6, r3
 80002fe:	42af      	cmp	r7, r5
 8000300:	d829      	bhi.n	8000356 <__udivmoddi4+0xa2>
 8000302:	d026      	beq.n	8000352 <__udivmoddi4+0x9e>
 8000304:	465b      	mov	r3, fp
 8000306:	1ba4      	subs	r4, r4, r6
 8000308:	41bd      	sbcs	r5, r7
 800030a:	2b00      	cmp	r3, #0
 800030c:	da00      	bge.n	8000310 <__udivmoddi4+0x5c>
 800030e:	e079      	b.n	8000404 <__udivmoddi4+0x150>
 8000310:	2200      	movs	r2, #0
 8000312:	2300      	movs	r3, #0
 8000314:	9200      	str	r2, [sp, #0]
 8000316:	9301      	str	r3, [sp, #4]
 8000318:	2301      	movs	r3, #1
 800031a:	465a      	mov	r2, fp
 800031c:	4093      	lsls	r3, r2
 800031e:	9301      	str	r3, [sp, #4]
 8000320:	2301      	movs	r3, #1
 8000322:	4642      	mov	r2, r8
 8000324:	4093      	lsls	r3, r2
 8000326:	9300      	str	r3, [sp, #0]
 8000328:	e019      	b.n	800035e <__udivmoddi4+0xaa>
 800032a:	4282      	cmp	r2, r0
 800032c:	d9d0      	bls.n	80002d0 <__udivmoddi4+0x1c>
 800032e:	2200      	movs	r2, #0
 8000330:	2300      	movs	r3, #0
 8000332:	9200      	str	r2, [sp, #0]
 8000334:	9301      	str	r3, [sp, #4]
 8000336:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000338:	2b00      	cmp	r3, #0
 800033a:	d001      	beq.n	8000340 <__udivmoddi4+0x8c>
 800033c:	601c      	str	r4, [r3, #0]
 800033e:	605d      	str	r5, [r3, #4]
 8000340:	9800      	ldr	r0, [sp, #0]
 8000342:	9901      	ldr	r1, [sp, #4]
 8000344:	b003      	add	sp, #12
 8000346:	bc3c      	pop	{r2, r3, r4, r5}
 8000348:	4690      	mov	r8, r2
 800034a:	4699      	mov	r9, r3
 800034c:	46a2      	mov	sl, r4
 800034e:	46ab      	mov	fp, r5
 8000350:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000352:	42a3      	cmp	r3, r4
 8000354:	d9d6      	bls.n	8000304 <__udivmoddi4+0x50>
 8000356:	2200      	movs	r2, #0
 8000358:	2300      	movs	r3, #0
 800035a:	9200      	str	r2, [sp, #0]
 800035c:	9301      	str	r3, [sp, #4]
 800035e:	4643      	mov	r3, r8
 8000360:	2b00      	cmp	r3, #0
 8000362:	d0e8      	beq.n	8000336 <__udivmoddi4+0x82>
 8000364:	07fb      	lsls	r3, r7, #31
 8000366:	0872      	lsrs	r2, r6, #1
 8000368:	431a      	orrs	r2, r3
 800036a:	4646      	mov	r6, r8
 800036c:	087b      	lsrs	r3, r7, #1
 800036e:	e00e      	b.n	800038e <__udivmoddi4+0xda>
 8000370:	42ab      	cmp	r3, r5
 8000372:	d101      	bne.n	8000378 <__udivmoddi4+0xc4>
 8000374:	42a2      	cmp	r2, r4
 8000376:	d80c      	bhi.n	8000392 <__udivmoddi4+0xde>
 8000378:	1aa4      	subs	r4, r4, r2
 800037a:	419d      	sbcs	r5, r3
 800037c:	2001      	movs	r0, #1
 800037e:	1924      	adds	r4, r4, r4
 8000380:	416d      	adcs	r5, r5
 8000382:	2100      	movs	r1, #0
 8000384:	3e01      	subs	r6, #1
 8000386:	1824      	adds	r4, r4, r0
 8000388:	414d      	adcs	r5, r1
 800038a:	2e00      	cmp	r6, #0
 800038c:	d006      	beq.n	800039c <__udivmoddi4+0xe8>
 800038e:	42ab      	cmp	r3, r5
 8000390:	d9ee      	bls.n	8000370 <__udivmoddi4+0xbc>
 8000392:	3e01      	subs	r6, #1
 8000394:	1924      	adds	r4, r4, r4
 8000396:	416d      	adcs	r5, r5
 8000398:	2e00      	cmp	r6, #0
 800039a:	d1f8      	bne.n	800038e <__udivmoddi4+0xda>
 800039c:	465b      	mov	r3, fp
 800039e:	9800      	ldr	r0, [sp, #0]
 80003a0:	9901      	ldr	r1, [sp, #4]
 80003a2:	1900      	adds	r0, r0, r4
 80003a4:	4169      	adcs	r1, r5
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	db22      	blt.n	80003f0 <__udivmoddi4+0x13c>
 80003aa:	002b      	movs	r3, r5
 80003ac:	465a      	mov	r2, fp
 80003ae:	40d3      	lsrs	r3, r2
 80003b0:	002a      	movs	r2, r5
 80003b2:	4644      	mov	r4, r8
 80003b4:	40e2      	lsrs	r2, r4
 80003b6:	001c      	movs	r4, r3
 80003b8:	465b      	mov	r3, fp
 80003ba:	0015      	movs	r5, r2
 80003bc:	2b00      	cmp	r3, #0
 80003be:	db2c      	blt.n	800041a <__udivmoddi4+0x166>
 80003c0:	0026      	movs	r6, r4
 80003c2:	409e      	lsls	r6, r3
 80003c4:	0033      	movs	r3, r6
 80003c6:	0026      	movs	r6, r4
 80003c8:	4647      	mov	r7, r8
 80003ca:	40be      	lsls	r6, r7
 80003cc:	0032      	movs	r2, r6
 80003ce:	1a80      	subs	r0, r0, r2
 80003d0:	4199      	sbcs	r1, r3
 80003d2:	9000      	str	r0, [sp, #0]
 80003d4:	9101      	str	r1, [sp, #4]
 80003d6:	e7ae      	b.n	8000336 <__udivmoddi4+0x82>
 80003d8:	4642      	mov	r2, r8
 80003da:	2320      	movs	r3, #32
 80003dc:	1a9b      	subs	r3, r3, r2
 80003de:	4652      	mov	r2, sl
 80003e0:	40da      	lsrs	r2, r3
 80003e2:	4641      	mov	r1, r8
 80003e4:	0013      	movs	r3, r2
 80003e6:	464a      	mov	r2, r9
 80003e8:	408a      	lsls	r2, r1
 80003ea:	0017      	movs	r7, r2
 80003ec:	431f      	orrs	r7, r3
 80003ee:	e782      	b.n	80002f6 <__udivmoddi4+0x42>
 80003f0:	4642      	mov	r2, r8
 80003f2:	2320      	movs	r3, #32
 80003f4:	1a9b      	subs	r3, r3, r2
 80003f6:	002a      	movs	r2, r5
 80003f8:	4646      	mov	r6, r8
 80003fa:	409a      	lsls	r2, r3
 80003fc:	0023      	movs	r3, r4
 80003fe:	40f3      	lsrs	r3, r6
 8000400:	4313      	orrs	r3, r2
 8000402:	e7d5      	b.n	80003b0 <__udivmoddi4+0xfc>
 8000404:	4642      	mov	r2, r8
 8000406:	2320      	movs	r3, #32
 8000408:	2100      	movs	r1, #0
 800040a:	1a9b      	subs	r3, r3, r2
 800040c:	2200      	movs	r2, #0
 800040e:	9100      	str	r1, [sp, #0]
 8000410:	9201      	str	r2, [sp, #4]
 8000412:	2201      	movs	r2, #1
 8000414:	40da      	lsrs	r2, r3
 8000416:	9201      	str	r2, [sp, #4]
 8000418:	e782      	b.n	8000320 <__udivmoddi4+0x6c>
 800041a:	4642      	mov	r2, r8
 800041c:	2320      	movs	r3, #32
 800041e:	0026      	movs	r6, r4
 8000420:	1a9b      	subs	r3, r3, r2
 8000422:	40de      	lsrs	r6, r3
 8000424:	002f      	movs	r7, r5
 8000426:	46b4      	mov	ip, r6
 8000428:	4097      	lsls	r7, r2
 800042a:	4666      	mov	r6, ip
 800042c:	003b      	movs	r3, r7
 800042e:	4333      	orrs	r3, r6
 8000430:	e7c9      	b.n	80003c6 <__udivmoddi4+0x112>
 8000432:	46c0      	nop			; (mov r8, r8)

08000434 <__clzdi2>:
 8000434:	b510      	push	{r4, lr}
 8000436:	2900      	cmp	r1, #0
 8000438:	d103      	bne.n	8000442 <__clzdi2+0xe>
 800043a:	f000 f807 	bl	800044c <__clzsi2>
 800043e:	3020      	adds	r0, #32
 8000440:	e002      	b.n	8000448 <__clzdi2+0x14>
 8000442:	1c08      	adds	r0, r1, #0
 8000444:	f000 f802 	bl	800044c <__clzsi2>
 8000448:	bd10      	pop	{r4, pc}
 800044a:	46c0      	nop			; (mov r8, r8)

0800044c <__clzsi2>:
 800044c:	211c      	movs	r1, #28
 800044e:	2301      	movs	r3, #1
 8000450:	041b      	lsls	r3, r3, #16
 8000452:	4298      	cmp	r0, r3
 8000454:	d301      	bcc.n	800045a <__clzsi2+0xe>
 8000456:	0c00      	lsrs	r0, r0, #16
 8000458:	3910      	subs	r1, #16
 800045a:	0a1b      	lsrs	r3, r3, #8
 800045c:	4298      	cmp	r0, r3
 800045e:	d301      	bcc.n	8000464 <__clzsi2+0x18>
 8000460:	0a00      	lsrs	r0, r0, #8
 8000462:	3908      	subs	r1, #8
 8000464:	091b      	lsrs	r3, r3, #4
 8000466:	4298      	cmp	r0, r3
 8000468:	d301      	bcc.n	800046e <__clzsi2+0x22>
 800046a:	0900      	lsrs	r0, r0, #4
 800046c:	3904      	subs	r1, #4
 800046e:	a202      	add	r2, pc, #8	; (adr r2, 8000478 <__clzsi2+0x2c>)
 8000470:	5c10      	ldrb	r0, [r2, r0]
 8000472:	1840      	adds	r0, r0, r1
 8000474:	4770      	bx	lr
 8000476:	46c0      	nop			; (mov r8, r8)
 8000478:	02020304 	.word	0x02020304
 800047c:	01010101 	.word	0x01010101
	...

08000488 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000488:	480d      	ldr	r0, [pc, #52]	; (80004c0 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800048a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800048c:	480d      	ldr	r0, [pc, #52]	; (80004c4 <LoopForever+0x6>)
  ldr r1, =_edata
 800048e:	490e      	ldr	r1, [pc, #56]	; (80004c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000490:	4a0e      	ldr	r2, [pc, #56]	; (80004cc <LoopForever+0xe>)
  movs r3, #0
 8000492:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000494:	e002      	b.n	800049c <LoopCopyDataInit>

08000496 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000496:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000498:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800049a:	3304      	adds	r3, #4

0800049c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800049c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800049e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004a0:	d3f9      	bcc.n	8000496 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004a2:	4a0b      	ldr	r2, [pc, #44]	; (80004d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80004a4:	4c0b      	ldr	r4, [pc, #44]	; (80004d4 <LoopForever+0x16>)
  movs r3, #0
 80004a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004a8:	e001      	b.n	80004ae <LoopFillZerobss>

080004aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004ac:	3204      	adds	r2, #4

080004ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004b0:	d3fb      	bcc.n	80004aa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80004b2:	f000 fd3b 	bl	8000f2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80004b6:	f003 fc73 	bl	8003da0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80004ba:	f000 faad 	bl	8000a18 <main>

080004be <LoopForever>:

LoopForever:
    b LoopForever
 80004be:	e7fe      	b.n	80004be <LoopForever>
   ldr   r0, =_estack
 80004c0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80004c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004c8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80004cc:	08003eb0 	.word	0x08003eb0
  ldr r2, =_sbss
 80004d0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80004d4:	2000010c 	.word	0x2000010c

080004d8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80004d8:	e7fe      	b.n	80004d8 <ADC1_COMP_IRQHandler>

080004da <handler_entry>:
#define CMD_SET_LED1 0x07
#define CMD_SET_LED2 0x08


void handler_entry()
{
 80004da:	b580      	push	{r7, lr}
 80004dc:	af00      	add	r7, sp, #0


	//handle command
	while(1)
	{
		handle_command();
 80004de:	f000 f801 	bl	80004e4 <handle_command>
 80004e2:	e7fc      	b.n	80004de <handler_entry+0x4>

080004e4 <handle_command>:
	}
}


void handle_command()
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b082      	sub	sp, #8
 80004e8:	af00      	add	r7, sp, #0
	//Wait for an incoming byte
	u8 pre_byte;
	//if HAL returns an error here
	if(get_uart_byte(&pre_byte))
 80004ea:	1dfb      	adds	r3, r7, #7
 80004ec:	0018      	movs	r0, r3
 80004ee:	f000 fa3d 	bl	800096c <get_uart_byte>
 80004f2:	1e03      	subs	r3, r0, #0
 80004f4:	d000      	beq.n	80004f8 <handle_command+0x14>
 80004f6:	e0a3      	b.n	8000640 <handle_command+0x15c>
	{
		return;//Just try again
	}

	//If the preamble byte is bad
	if(pre_byte != BYTE_PREAMBLE)
 80004f8:	1dfb      	adds	r3, r7, #7
 80004fa:	781b      	ldrb	r3, [r3, #0]
 80004fc:	2baa      	cmp	r3, #170	; 0xaa
 80004fe:	d000      	beq.n	8000502 <handle_command+0x1e>
 8000500:	e0a0      	b.n	8000644 <handle_command+0x160>
		return;//Try again
	}

	//Wait for the command byte
	u8 cmd_byte;
	if(get_uart_byte(&cmd_byte))
 8000502:	1dbb      	adds	r3, r7, #6
 8000504:	0018      	movs	r0, r3
 8000506:	f000 fa31 	bl	800096c <get_uart_byte>
 800050a:	1e03      	subs	r3, r0, #0
 800050c:	d000      	beq.n	8000510 <handle_command+0x2c>
 800050e:	e09b      	b.n	8000648 <handle_command+0x164>
	{
		return;//abort if reception fails
	}

	//Switch the command
	u8 res = 0;
 8000510:	1d7b      	adds	r3, r7, #5
 8000512:	2200      	movs	r2, #0
 8000514:	701a      	strb	r2, [r3, #0]
	u8 arg = 0;
 8000516:	1d3b      	adds	r3, r7, #4
 8000518:	2200      	movs	r2, #0
 800051a:	701a      	strb	r2, [r3, #0]
	u16 adc_res;
	switch(cmd_byte)
 800051c:	1dbb      	adds	r3, r7, #6
 800051e:	781b      	ldrb	r3, [r3, #0]
 8000520:	2b08      	cmp	r3, #8
 8000522:	d900      	bls.n	8000526 <handle_command+0x42>
 8000524:	e086      	b.n	8000634 <handle_command+0x150>
 8000526:	009a      	lsls	r2, r3, #2
 8000528:	4b4f      	ldr	r3, [pc, #316]	; (8000668 <handle_command+0x184>)
 800052a:	18d3      	adds	r3, r2, r3
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	469f      	mov	pc, r3
			//Do nothing, by default ack byte is sent at end
			break;

		case CMD_SET_LEFT:
			//Get the next byte
			if(get_uart_byte(&arg)){return;}
 8000530:	1d3b      	adds	r3, r7, #4
 8000532:	0018      	movs	r0, r3
 8000534:	f000 fa1a 	bl	800096c <get_uart_byte>
 8000538:	1e03      	subs	r3, r0, #0
 800053a:	d000      	beq.n	800053e <handle_command+0x5a>
 800053c:	e086      	b.n	800064c <handle_command+0x168>
			//Use it to set the left attenuation
			set_left_attenuation(arg);
 800053e:	1d3b      	adds	r3, r7, #4
 8000540:	781b      	ldrb	r3, [r3, #0]
 8000542:	0018      	movs	r0, r3
 8000544:	f000 f892 	bl	800066c <set_left_attenuation>
			break;
 8000548:	e074      	b.n	8000634 <handle_command+0x150>

		case CMD_SET_RIGHT:
			//Get the next byte
			if(get_uart_byte(&arg)){return;}
 800054a:	1d3b      	adds	r3, r7, #4
 800054c:	0018      	movs	r0, r3
 800054e:	f000 fa0d 	bl	800096c <get_uart_byte>
 8000552:	1e03      	subs	r3, r0, #0
 8000554:	d000      	beq.n	8000558 <handle_command+0x74>
 8000556:	e07b      	b.n	8000650 <handle_command+0x16c>
			//Use it to set the right attenuation
			set_right_attenuation(arg);
 8000558:	1d3b      	adds	r3, r7, #4
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	0018      	movs	r0, r3
 800055e:	f000 f8d3 	bl	8000708 <set_right_attenuation>
			break;
 8000562:	e067      	b.n	8000634 <handle_command+0x150>

		case CMD_SET_INPUT_GAIN:
			//Get the next byte
			if(get_uart_byte(&arg)){return;}
 8000564:	1d3b      	adds	r3, r7, #4
 8000566:	0018      	movs	r0, r3
 8000568:	f000 fa00 	bl	800096c <get_uart_byte>
 800056c:	1e03      	subs	r3, r0, #0
 800056e:	d000      	beq.n	8000572 <handle_command+0x8e>
 8000570:	e070      	b.n	8000654 <handle_command+0x170>
			//Use it to set the input gain
			set_diff_gain(arg);
 8000572:	1d3b      	adds	r3, r7, #4
 8000574:	781b      	ldrb	r3, [r3, #0]
 8000576:	0018      	movs	r0, r3
 8000578:	f000 f918 	bl	80007ac <set_diff_gain>
			break;
 800057c:	e05a      	b.n	8000634 <handle_command+0x150>

		case CMD_SET_OUTPUT_GAIN:
			//Get the next byte
			if(get_uart_byte(&arg)){return;}
 800057e:	1d3b      	adds	r3, r7, #4
 8000580:	0018      	movs	r0, r3
 8000582:	f000 f9f3 	bl	800096c <get_uart_byte>
 8000586:	1e03      	subs	r3, r0, #0
 8000588:	d166      	bne.n	8000658 <handle_command+0x174>
			//Use it to set the output gain (15dB or 0dB)
			set_amp_enable(arg);
 800058a:	1d3b      	adds	r3, r7, #4
 800058c:	781b      	ldrb	r3, [r3, #0]
 800058e:	0018      	movs	r0, r3
 8000590:	f000 f96b 	bl	800086a <set_amp_enable>
			break;
 8000594:	e04e      	b.n	8000634 <handle_command+0x150>

		case CMD_GET_ADC1:
			//Read ADC1's value
			read_adc(0, &adc_res);
 8000596:	1cbb      	adds	r3, r7, #2
 8000598:	0019      	movs	r1, r3
 800059a:	2000      	movs	r0, #0
 800059c:	f000 f994 	bl	80008c8 <read_adc>
			//Send it back over uart with msb first
			arg = (adc_res >> 8) & 0xff;
 80005a0:	1cbb      	adds	r3, r7, #2
 80005a2:	881b      	ldrh	r3, [r3, #0]
 80005a4:	0a1b      	lsrs	r3, r3, #8
 80005a6:	b29b      	uxth	r3, r3
 80005a8:	b2da      	uxtb	r2, r3
 80005aa:	1d3b      	adds	r3, r7, #4
 80005ac:	701a      	strb	r2, [r3, #0]
			send_uart_byte(&arg);
 80005ae:	1d3b      	adds	r3, r7, #4
 80005b0:	0018      	movs	r0, r3
 80005b2:	f000 f9f1 	bl	8000998 <send_uart_byte>
			arg = adc_res & 0xff;
 80005b6:	1cbb      	adds	r3, r7, #2
 80005b8:	881b      	ldrh	r3, [r3, #0]
 80005ba:	b2da      	uxtb	r2, r3
 80005bc:	1d3b      	adds	r3, r7, #4
 80005be:	701a      	strb	r2, [r3, #0]
			send_uart_byte(&arg);
 80005c0:	1d3b      	adds	r3, r7, #4
 80005c2:	0018      	movs	r0, r3
 80005c4:	f000 f9e8 	bl	8000998 <send_uart_byte>
			break;
 80005c8:	e034      	b.n	8000634 <handle_command+0x150>

		case CMD_GET_ADC2:
			//Read ADC1's value
			read_adc(1, &adc_res);
 80005ca:	1cbb      	adds	r3, r7, #2
 80005cc:	0019      	movs	r1, r3
 80005ce:	2001      	movs	r0, #1
 80005d0:	f000 f97a 	bl	80008c8 <read_adc>
			//Send it back over uart with msb first
			arg = (adc_res >> 8) & 0xff;
 80005d4:	1cbb      	adds	r3, r7, #2
 80005d6:	881b      	ldrh	r3, [r3, #0]
 80005d8:	0a1b      	lsrs	r3, r3, #8
 80005da:	b29b      	uxth	r3, r3
 80005dc:	b2da      	uxtb	r2, r3
 80005de:	1d3b      	adds	r3, r7, #4
 80005e0:	701a      	strb	r2, [r3, #0]
			send_uart_byte(&arg);
 80005e2:	1d3b      	adds	r3, r7, #4
 80005e4:	0018      	movs	r0, r3
 80005e6:	f000 f9d7 	bl	8000998 <send_uart_byte>
			arg = adc_res & 0xff;
 80005ea:	1cbb      	adds	r3, r7, #2
 80005ec:	881b      	ldrh	r3, [r3, #0]
 80005ee:	b2da      	uxtb	r2, r3
 80005f0:	1d3b      	adds	r3, r7, #4
 80005f2:	701a      	strb	r2, [r3, #0]
			send_uart_byte(&arg);
 80005f4:	1d3b      	adds	r3, r7, #4
 80005f6:	0018      	movs	r0, r3
 80005f8:	f000 f9ce 	bl	8000998 <send_uart_byte>
			break;
 80005fc:	e01a      	b.n	8000634 <handle_command+0x150>

		case CMD_SET_LED1:
			//Get the next byte
			if(get_uart_byte(&arg)){return;}
 80005fe:	1d3b      	adds	r3, r7, #4
 8000600:	0018      	movs	r0, r3
 8000602:	f000 f9b3 	bl	800096c <get_uart_byte>
 8000606:	1e03      	subs	r3, r0, #0
 8000608:	d128      	bne.n	800065c <handle_command+0x178>
			//set the LED state
			set_led(0, arg);
 800060a:	1d3b      	adds	r3, r7, #4
 800060c:	781b      	ldrb	r3, [r3, #0]
 800060e:	0019      	movs	r1, r3
 8000610:	2000      	movs	r0, #0
 8000612:	f000 f9d5 	bl	80009c0 <set_led>
			break;
 8000616:	e00d      	b.n	8000634 <handle_command+0x150>

		case CMD_SET_LED2:
			//Get the next byte
			if(get_uart_byte(&arg)){return;}
 8000618:	1d3b      	adds	r3, r7, #4
 800061a:	0018      	movs	r0, r3
 800061c:	f000 f9a6 	bl	800096c <get_uart_byte>
 8000620:	1e03      	subs	r3, r0, #0
 8000622:	d11d      	bne.n	8000660 <handle_command+0x17c>
			//set the LED state
			set_led(1, arg);
 8000624:	1d3b      	adds	r3, r7, #4
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	0019      	movs	r1, r3
 800062a:	2001      	movs	r0, #1
 800062c:	f000 f9c8 	bl	80009c0 <set_led>
			break;
 8000630:	e000      	b.n	8000634 <handle_command+0x150>
			break;
 8000632:	46c0      	nop			; (mov r8, r8)

	}
	//Send the ack
	send_uart_byte(&res);
 8000634:	1d7b      	adds	r3, r7, #5
 8000636:	0018      	movs	r0, r3
 8000638:	f000 f9ae 	bl	8000998 <send_uart_byte>
	return;
 800063c:	46c0      	nop			; (mov r8, r8)
 800063e:	e010      	b.n	8000662 <handle_command+0x17e>
		return;//Just try again
 8000640:	46c0      	nop			; (mov r8, r8)
 8000642:	e00e      	b.n	8000662 <handle_command+0x17e>
		return;//Try again
 8000644:	46c0      	nop			; (mov r8, r8)
 8000646:	e00c      	b.n	8000662 <handle_command+0x17e>
		return;//abort if reception fails
 8000648:	46c0      	nop			; (mov r8, r8)
 800064a:	e00a      	b.n	8000662 <handle_command+0x17e>
			if(get_uart_byte(&arg)){return;}
 800064c:	46c0      	nop			; (mov r8, r8)
 800064e:	e008      	b.n	8000662 <handle_command+0x17e>
			if(get_uart_byte(&arg)){return;}
 8000650:	46c0      	nop			; (mov r8, r8)
 8000652:	e006      	b.n	8000662 <handle_command+0x17e>
			if(get_uart_byte(&arg)){return;}
 8000654:	46c0      	nop			; (mov r8, r8)
 8000656:	e004      	b.n	8000662 <handle_command+0x17e>
			if(get_uart_byte(&arg)){return;}
 8000658:	46c0      	nop			; (mov r8, r8)
 800065a:	e002      	b.n	8000662 <handle_command+0x17e>
			if(get_uart_byte(&arg)){return;}
 800065c:	46c0      	nop			; (mov r8, r8)
 800065e:	e000      	b.n	8000662 <handle_command+0x17e>
			if(get_uart_byte(&arg)){return;}
 8000660:	46c0      	nop			; (mov r8, r8)
}
 8000662:	46bd      	mov	sp, r7
 8000664:	b002      	add	sp, #8
 8000666:	bd80      	pop	{r7, pc}
 8000668:	08003e10 	.word	0x08003e10

0800066c <set_left_attenuation>:
//Declare the adc instance and uart
extern ADC_HandleTypeDef hadc;
extern UART_HandleTypeDef huart2;

void set_left_attenuation(u8 val)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b082      	sub	sp, #8
 8000670:	af00      	add	r7, sp, #0
 8000672:	0002      	movs	r2, r0
 8000674:	1dfb      	adds	r3, r7, #7
 8000676:	701a      	strb	r2, [r3, #0]
	//Set each bit one at a time by selecting the relevant bit in val
	HAL_GPIO_WritePin(V5L_GPIO_Port, V5L_Pin, val & (1<<4) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000678:	1dfb      	adds	r3, r7, #7
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	2210      	movs	r2, #16
 800067e:	4013      	ands	r3, r2
 8000680:	1e5a      	subs	r2, r3, #1
 8000682:	4193      	sbcs	r3, r2
 8000684:	b2db      	uxtb	r3, r3
 8000686:	001a      	movs	r2, r3
 8000688:	4b1e      	ldr	r3, [pc, #120]	; (8000704 <set_left_attenuation+0x98>)
 800068a:	2180      	movs	r1, #128	; 0x80
 800068c:	0018      	movs	r0, r3
 800068e:	f001 fc19 	bl	8001ec4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(V4L_GPIO_Port, V4L_Pin, val & (1<<3) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000692:	1dfb      	adds	r3, r7, #7
 8000694:	781b      	ldrb	r3, [r3, #0]
 8000696:	2208      	movs	r2, #8
 8000698:	4013      	ands	r3, r2
 800069a:	1e5a      	subs	r2, r3, #1
 800069c:	4193      	sbcs	r3, r2
 800069e:	b2db      	uxtb	r3, r3
 80006a0:	001a      	movs	r2, r3
 80006a2:	4b18      	ldr	r3, [pc, #96]	; (8000704 <set_left_attenuation+0x98>)
 80006a4:	2108      	movs	r1, #8
 80006a6:	0018      	movs	r0, r3
 80006a8:	f001 fc0c 	bl	8001ec4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(V3L_GPIO_Port, V3L_Pin, val & (1<<2) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80006ac:	1dfb      	adds	r3, r7, #7
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	2204      	movs	r2, #4
 80006b2:	4013      	ands	r3, r2
 80006b4:	1e5a      	subs	r2, r3, #1
 80006b6:	4193      	sbcs	r3, r2
 80006b8:	b2db      	uxtb	r3, r3
 80006ba:	001a      	movs	r2, r3
 80006bc:	4b11      	ldr	r3, [pc, #68]	; (8000704 <set_left_attenuation+0x98>)
 80006be:	2110      	movs	r1, #16
 80006c0:	0018      	movs	r0, r3
 80006c2:	f001 fbff 	bl	8001ec4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(V2L_GPIO_Port, V2L_Pin, val & (1<<1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80006c6:	1dfb      	adds	r3, r7, #7
 80006c8:	781b      	ldrb	r3, [r3, #0]
 80006ca:	2202      	movs	r2, #2
 80006cc:	4013      	ands	r3, r2
 80006ce:	1e5a      	subs	r2, r3, #1
 80006d0:	4193      	sbcs	r3, r2
 80006d2:	b2db      	uxtb	r3, r3
 80006d4:	001a      	movs	r2, r3
 80006d6:	4b0b      	ldr	r3, [pc, #44]	; (8000704 <set_left_attenuation+0x98>)
 80006d8:	2140      	movs	r1, #64	; 0x40
 80006da:	0018      	movs	r0, r3
 80006dc:	f001 fbf2 	bl	8001ec4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(V1L_GPIO_Port, V1L_Pin, val & (1<<0) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80006e0:	1dfb      	adds	r3, r7, #7
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	2201      	movs	r2, #1
 80006e6:	4013      	ands	r3, r2
 80006e8:	1e5a      	subs	r2, r3, #1
 80006ea:	4193      	sbcs	r3, r2
 80006ec:	b2db      	uxtb	r3, r3
 80006ee:	001a      	movs	r2, r3
 80006f0:	4b04      	ldr	r3, [pc, #16]	; (8000704 <set_left_attenuation+0x98>)
 80006f2:	2120      	movs	r1, #32
 80006f4:	0018      	movs	r0, r3
 80006f6:	f001 fbe5 	bl	8001ec4 <HAL_GPIO_WritePin>
}
 80006fa:	46c0      	nop			; (mov r8, r8)
 80006fc:	46bd      	mov	sp, r7
 80006fe:	b002      	add	sp, #8
 8000700:	bd80      	pop	{r7, pc}
 8000702:	46c0      	nop			; (mov r8, r8)
 8000704:	50000400 	.word	0x50000400

08000708 <set_right_attenuation>:

void set_right_attenuation(u8 val)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
 800070e:	0002      	movs	r2, r0
 8000710:	1dfb      	adds	r3, r7, #7
 8000712:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(V5R_GPIO_Port, V5R_Pin, val & (1<<4) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000714:	1dfb      	adds	r3, r7, #7
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	2210      	movs	r2, #16
 800071a:	4013      	ands	r3, r2
 800071c:	1e5a      	subs	r2, r3, #1
 800071e:	4193      	sbcs	r3, r2
 8000720:	b2db      	uxtb	r3, r3
 8000722:	001a      	movs	r2, r3
 8000724:	23a0      	movs	r3, #160	; 0xa0
 8000726:	05db      	lsls	r3, r3, #23
 8000728:	2110      	movs	r1, #16
 800072a:	0018      	movs	r0, r3
 800072c:	f001 fbca 	bl	8001ec4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(V4R_GPIO_Port, V4R_Pin, val & (1<<3) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000730:	1dfb      	adds	r3, r7, #7
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	2208      	movs	r2, #8
 8000736:	4013      	ands	r3, r2
 8000738:	1e5a      	subs	r2, r3, #1
 800073a:	4193      	sbcs	r3, r2
 800073c:	b2db      	uxtb	r3, r3
 800073e:	001a      	movs	r2, r3
 8000740:	23a0      	movs	r3, #160	; 0xa0
 8000742:	05db      	lsls	r3, r3, #23
 8000744:	2120      	movs	r1, #32
 8000746:	0018      	movs	r0, r3
 8000748:	f001 fbbc 	bl	8001ec4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(V3R_GPIO_Port, V3R_Pin, val & (1<<2) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800074c:	1dfb      	adds	r3, r7, #7
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	2204      	movs	r2, #4
 8000752:	4013      	ands	r3, r2
 8000754:	1e5a      	subs	r2, r3, #1
 8000756:	4193      	sbcs	r3, r2
 8000758:	b2db      	uxtb	r3, r3
 800075a:	001a      	movs	r2, r3
 800075c:	23a0      	movs	r3, #160	; 0xa0
 800075e:	05db      	lsls	r3, r3, #23
 8000760:	2140      	movs	r1, #64	; 0x40
 8000762:	0018      	movs	r0, r3
 8000764:	f001 fbae 	bl	8001ec4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(V2R_GPIO_Port, V2R_Pin, val & (1<<1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000768:	1dfb      	adds	r3, r7, #7
 800076a:	781b      	ldrb	r3, [r3, #0]
 800076c:	2202      	movs	r2, #2
 800076e:	4013      	ands	r3, r2
 8000770:	1e5a      	subs	r2, r3, #1
 8000772:	4193      	sbcs	r3, r2
 8000774:	b2db      	uxtb	r3, r3
 8000776:	001a      	movs	r2, r3
 8000778:	23a0      	movs	r3, #160	; 0xa0
 800077a:	05db      	lsls	r3, r3, #23
 800077c:	2180      	movs	r1, #128	; 0x80
 800077e:	0018      	movs	r0, r3
 8000780:	f001 fba0 	bl	8001ec4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(V1R_GPIO_Port, V1R_Pin, val & (1<<0) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000784:	1dfb      	adds	r3, r7, #7
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	2201      	movs	r2, #1
 800078a:	4013      	ands	r3, r2
 800078c:	1e5a      	subs	r2, r3, #1
 800078e:	4193      	sbcs	r3, r2
 8000790:	b2db      	uxtb	r3, r3
 8000792:	001a      	movs	r2, r3
 8000794:	4b04      	ldr	r3, [pc, #16]	; (80007a8 <set_right_attenuation+0xa0>)
 8000796:	2101      	movs	r1, #1
 8000798:	0018      	movs	r0, r3
 800079a:	f001 fb93 	bl	8001ec4 <HAL_GPIO_WritePin>
}
 800079e:	46c0      	nop			; (mov r8, r8)
 80007a0:	46bd      	mov	sp, r7
 80007a2:	b002      	add	sp, #8
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	46c0      	nop			; (mov r8, r8)
 80007a8:	50000400 	.word	0x50000400

080007ac <set_diff_gain>:

//5-bit gain setting for differential amplifier
//See data sheet for gain definitions
void set_diff_gain(u8 val)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b084      	sub	sp, #16
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	0002      	movs	r2, r0
 80007b4:	1dfb      	adds	r3, r7, #7
 80007b6:	701a      	strb	r2, [r3, #0]
	//Pull CS and SCLK low
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 80007b8:	2380      	movs	r3, #128	; 0x80
 80007ba:	0059      	lsls	r1, r3, #1
 80007bc:	23a0      	movs	r3, #160	; 0xa0
 80007be:	05db      	lsls	r3, r3, #23
 80007c0:	2200      	movs	r2, #0
 80007c2:	0018      	movs	r0, r3
 80007c4:	f001 fb7e 	bl	8001ec4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_RESET);
 80007c8:	2380      	movs	r3, #128	; 0x80
 80007ca:	0099      	lsls	r1, r3, #2
 80007cc:	23a0      	movs	r3, #160	; 0xa0
 80007ce:	05db      	lsls	r3, r3, #23
 80007d0:	2200      	movs	r2, #0
 80007d2:	0018      	movs	r0, r3
 80007d4:	f001 fb76 	bl	8001ec4 <HAL_GPIO_WritePin>

	for(int i = 0; i < 8; i = i + 1)
 80007d8:	2300      	movs	r3, #0
 80007da:	60fb      	str	r3, [r7, #12]
 80007dc:	e036      	b.n	800084c <set_diff_gain+0xa0>
	{
		//If this is the last 3 bits then set them all to 0
		if(i > 4)
 80007de:	68fb      	ldr	r3, [r7, #12]
 80007e0:	2b04      	cmp	r3, #4
 80007e2:	dd08      	ble.n	80007f6 <set_diff_gain+0x4a>
		{
			HAL_GPIO_WritePin(SDIO_GPIO_Port, SDIO_Pin, GPIO_PIN_RESET);
 80007e4:	2380      	movs	r3, #128	; 0x80
 80007e6:	00d9      	lsls	r1, r3, #3
 80007e8:	23a0      	movs	r3, #160	; 0xa0
 80007ea:	05db      	lsls	r3, r3, #23
 80007ec:	2200      	movs	r2, #0
 80007ee:	0018      	movs	r0, r3
 80007f0:	f001 fb68 	bl	8001ec4 <HAL_GPIO_WritePin>
 80007f4:	e011      	b.n	800081a <set_diff_gain+0x6e>
		}
		else//Otherwise start tapping out the specified gain
		{
			HAL_GPIO_WritePin(SDIO_GPIO_Port, SDIO_Pin, val & (1 << i) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80007f6:	1dfb      	adds	r3, r7, #7
 80007f8:	781a      	ldrb	r2, [r3, #0]
 80007fa:	68fb      	ldr	r3, [r7, #12]
 80007fc:	411a      	asrs	r2, r3
 80007fe:	0013      	movs	r3, r2
 8000800:	2201      	movs	r2, #1
 8000802:	4013      	ands	r3, r2
 8000804:	1e5a      	subs	r2, r3, #1
 8000806:	4193      	sbcs	r3, r2
 8000808:	b2db      	uxtb	r3, r3
 800080a:	001a      	movs	r2, r3
 800080c:	2380      	movs	r3, #128	; 0x80
 800080e:	00d9      	lsls	r1, r3, #3
 8000810:	23a0      	movs	r3, #160	; 0xa0
 8000812:	05db      	lsls	r3, r3, #23
 8000814:	0018      	movs	r0, r3
 8000816:	f001 fb55 	bl	8001ec4 <HAL_GPIO_WritePin>
		}
		//Cycle the clock
		HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_SET);
 800081a:	2380      	movs	r3, #128	; 0x80
 800081c:	0099      	lsls	r1, r3, #2
 800081e:	23a0      	movs	r3, #160	; 0xa0
 8000820:	05db      	lsls	r3, r3, #23
 8000822:	2201      	movs	r2, #1
 8000824:	0018      	movs	r0, r3
 8000826:	f001 fb4d 	bl	8001ec4 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 800082a:	2001      	movs	r0, #1
 800082c:	f000 fbf4 	bl	8001018 <HAL_Delay>
		HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_RESET);
 8000830:	2380      	movs	r3, #128	; 0x80
 8000832:	0099      	lsls	r1, r3, #2
 8000834:	23a0      	movs	r3, #160	; 0xa0
 8000836:	05db      	lsls	r3, r3, #23
 8000838:	2200      	movs	r2, #0
 800083a:	0018      	movs	r0, r3
 800083c:	f001 fb42 	bl	8001ec4 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8000840:	2001      	movs	r0, #1
 8000842:	f000 fbe9 	bl	8001018 <HAL_Delay>
	for(int i = 0; i < 8; i = i + 1)
 8000846:	68fb      	ldr	r3, [r7, #12]
 8000848:	3301      	adds	r3, #1
 800084a:	60fb      	str	r3, [r7, #12]
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	2b07      	cmp	r3, #7
 8000850:	ddc5      	ble.n	80007de <set_diff_gain+0x32>
	}

	//Deselect CS
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8000852:	2380      	movs	r3, #128	; 0x80
 8000854:	0059      	lsls	r1, r3, #1
 8000856:	23a0      	movs	r3, #160	; 0xa0
 8000858:	05db      	lsls	r3, r3, #23
 800085a:	2201      	movs	r2, #1
 800085c:	0018      	movs	r0, r3
 800085e:	f001 fb31 	bl	8001ec4 <HAL_GPIO_WritePin>
}
 8000862:	46c0      	nop			; (mov r8, r8)
 8000864:	46bd      	mov	sp, r7
 8000866:	b004      	add	sp, #16
 8000868:	bd80      	pop	{r7, pc}

0800086a <set_amp_enable>:

//Enables or disables output amplifier
void set_amp_enable(u8 val)
{
 800086a:	b580      	push	{r7, lr}
 800086c:	b082      	sub	sp, #8
 800086e:	af00      	add	r7, sp, #0
 8000870:	0002      	movs	r2, r0
 8000872:	1dfb      	adds	r3, r7, #7
 8000874:	701a      	strb	r2, [r3, #0]
	//If we're enabling
	if(val)
 8000876:	1dfb      	adds	r3, r7, #7
 8000878:	781b      	ldrb	r3, [r3, #0]
 800087a:	2b00      	cmp	r3, #0
 800087c:	d010      	beq.n	80008a0 <set_amp_enable+0x36>
	{
		HAL_GPIO_WritePin(VA_GPIO_Port, VA_Pin, GPIO_PIN_RESET);
 800087e:	2380      	movs	r3, #128	; 0x80
 8000880:	0119      	lsls	r1, r3, #4
 8000882:	23a0      	movs	r3, #160	; 0xa0
 8000884:	05db      	lsls	r3, r3, #23
 8000886:	2200      	movs	r2, #0
 8000888:	0018      	movs	r0, r3
 800088a:	f001 fb1b 	bl	8001ec4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(VB_GPIO_Port, VB_Pin, GPIO_PIN_SET);
 800088e:	2380      	movs	r3, #128	; 0x80
 8000890:	0159      	lsls	r1, r3, #5
 8000892:	23a0      	movs	r3, #160	; 0xa0
 8000894:	05db      	lsls	r3, r3, #23
 8000896:	2201      	movs	r2, #1
 8000898:	0018      	movs	r0, r3
 800089a:	f001 fb13 	bl	8001ec4 <HAL_GPIO_WritePin>
	else
	{
		HAL_GPIO_WritePin(VA_GPIO_Port, VA_Pin, GPIO_PIN_SET);
		HAL_GPIO_WritePin(VB_GPIO_Port, VB_Pin, GPIO_PIN_RESET);
	}
}
 800089e:	e00f      	b.n	80008c0 <set_amp_enable+0x56>
		HAL_GPIO_WritePin(VA_GPIO_Port, VA_Pin, GPIO_PIN_SET);
 80008a0:	2380      	movs	r3, #128	; 0x80
 80008a2:	0119      	lsls	r1, r3, #4
 80008a4:	23a0      	movs	r3, #160	; 0xa0
 80008a6:	05db      	lsls	r3, r3, #23
 80008a8:	2201      	movs	r2, #1
 80008aa:	0018      	movs	r0, r3
 80008ac:	f001 fb0a 	bl	8001ec4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(VB_GPIO_Port, VB_Pin, GPIO_PIN_RESET);
 80008b0:	2380      	movs	r3, #128	; 0x80
 80008b2:	0159      	lsls	r1, r3, #5
 80008b4:	23a0      	movs	r3, #160	; 0xa0
 80008b6:	05db      	lsls	r3, r3, #23
 80008b8:	2200      	movs	r2, #0
 80008ba:	0018      	movs	r0, r3
 80008bc:	f001 fb02 	bl	8001ec4 <HAL_GPIO_WritePin>
}
 80008c0:	46c0      	nop			; (mov r8, r8)
 80008c2:	46bd      	mov	sp, r7
 80008c4:	b002      	add	sp, #8
 80008c6:	bd80      	pop	{r7, pc}

080008c8 <read_adc>:

//If sel = 0, get ADC0 else ADC1
//Returns status (0 if OK) and returns read value via pass by reference
u8 read_adc(u8 sel, u16 *val)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b086      	sub	sp, #24
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	0002      	movs	r2, r0
 80008d0:	6039      	str	r1, [r7, #0]
 80008d2:	1dfb      	adds	r3, r7, #7
 80008d4:	701a      	strb	r2, [r3, #0]

	u8 ret_val = 0;
 80008d6:	2317      	movs	r3, #23
 80008d8:	18fb      	adds	r3, r7, r3
 80008da:	2200      	movs	r2, #0
 80008dc:	701a      	strb	r2, [r3, #0]

	ADC_ChannelConfTypeDef sConfig = {0};
 80008de:	230c      	movs	r3, #12
 80008e0:	18fb      	adds	r3, r7, r3
 80008e2:	0018      	movs	r0, r3
 80008e4:	2308      	movs	r3, #8
 80008e6:	001a      	movs	r2, r3
 80008e8:	2100      	movs	r1, #0
 80008ea:	f003 fa7d 	bl	8003de8 <memset>
	if(sel)
 80008ee:	1dfb      	adds	r3, r7, #7
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d004      	beq.n	8000900 <read_adc+0x38>
	{
		sConfig.Channel = ADC_CHANNEL_0;
 80008f6:	230c      	movs	r3, #12
 80008f8:	18fb      	adds	r3, r7, r3
 80008fa:	2201      	movs	r2, #1
 80008fc:	601a      	str	r2, [r3, #0]
 80008fe:	e003      	b.n	8000908 <read_adc+0x40>
	}
	else
	{
		sConfig.Channel = ADC_CHANNEL_1;
 8000900:	230c      	movs	r3, #12
 8000902:	18fb      	adds	r3, r7, r3
 8000904:	4a17      	ldr	r2, [pc, #92]	; (8000964 <read_adc+0x9c>)
 8000906:	601a      	str	r2, [r3, #0]
	}
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000908:	230c      	movs	r3, #12
 800090a:	18fb      	adds	r3, r7, r3
 800090c:	2280      	movs	r2, #128	; 0x80
 800090e:	0152      	lsls	r2, r2, #5
 8000910:	605a      	str	r2, [r3, #4]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000912:	230c      	movs	r3, #12
 8000914:	18fa      	adds	r2, r7, r3
 8000916:	4b14      	ldr	r3, [pc, #80]	; (8000968 <read_adc+0xa0>)
 8000918:	0011      	movs	r1, r2
 800091a:	0018      	movs	r0, r3
 800091c:	f000 fe4a 	bl	80015b4 <HAL_ADC_ConfigChannel>
 8000920:	1e03      	subs	r3, r0, #0
 8000922:	d003      	beq.n	800092c <read_adc+0x64>
	{
		ret_val = 1;
 8000924:	2317      	movs	r3, #23
 8000926:	18fb      	adds	r3, r7, r3
 8000928:	2201      	movs	r2, #1
 800092a:	701a      	strb	r2, [r3, #0]
	}

	//Start the conversion
	HAL_ADC_Start(&hadc);
 800092c:	4b0e      	ldr	r3, [pc, #56]	; (8000968 <read_adc+0xa0>)
 800092e:	0018      	movs	r0, r3
 8000930:	f000 fd08 	bl	8001344 <HAL_ADC_Start>
    //Poll ADC1 Perihperal & TimeOut = 1mSec
	HAL_ADC_PollForConversion(&hadc, 1);
 8000934:	4b0c      	ldr	r3, [pc, #48]	; (8000968 <read_adc+0xa0>)
 8000936:	2101      	movs	r1, #1
 8000938:	0018      	movs	r0, r3
 800093a:	f000 fd99 	bl	8001470 <HAL_ADC_PollForConversion>
	//Get the result and return it
	*val = HAL_ADC_GetValue(&hadc);
 800093e:	4b0a      	ldr	r3, [pc, #40]	; (8000968 <read_adc+0xa0>)
 8000940:	0018      	movs	r0, r3
 8000942:	f000 fe2b 	bl	800159c <HAL_ADC_GetValue>
 8000946:	0003      	movs	r3, r0
 8000948:	b29a      	uxth	r2, r3
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	801a      	strh	r2, [r3, #0]
	HAL_ADC_Stop(&hadc);
 800094e:	4b06      	ldr	r3, [pc, #24]	; (8000968 <read_adc+0xa0>)
 8000950:	0018      	movs	r0, r3
 8000952:	f000 fd4b 	bl	80013ec <HAL_ADC_Stop>

	return ret_val;
 8000956:	2317      	movs	r3, #23
 8000958:	18fb      	adds	r3, r7, r3
 800095a:	781b      	ldrb	r3, [r3, #0]
}
 800095c:	0018      	movs	r0, r3
 800095e:	46bd      	mov	sp, r7
 8000960:	b006      	add	sp, #24
 8000962:	bd80      	pop	{r7, pc}
 8000964:	04000002 	.word	0x04000002
 8000968:	200000ac 	.word	0x200000ac

0800096c <get_uart_byte>:


}

u8 get_uart_byte(u8 * res)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
	return HAL_UART_Receive(&huart2, res, 1, HAL_MAX_DELAY) == HAL_OK ? 0 : 1;
 8000974:	2301      	movs	r3, #1
 8000976:	425b      	negs	r3, r3
 8000978:	6879      	ldr	r1, [r7, #4]
 800097a:	4806      	ldr	r0, [pc, #24]	; (8000994 <get_uart_byte+0x28>)
 800097c:	2201      	movs	r2, #1
 800097e:	f002 fa77 	bl	8002e70 <HAL_UART_Receive>
 8000982:	0003      	movs	r3, r0
 8000984:	1e5a      	subs	r2, r3, #1
 8000986:	4193      	sbcs	r3, r2
 8000988:	b2db      	uxtb	r3, r3
}
 800098a:	0018      	movs	r0, r3
 800098c:	46bd      	mov	sp, r7
 800098e:	b002      	add	sp, #8
 8000990:	bd80      	pop	{r7, pc}
 8000992:	46c0      	nop			; (mov r8, r8)
 8000994:	20000028 	.word	0x20000028

08000998 <send_uart_byte>:


//Returns status not result
//0 result is success
u8 send_uart_byte(u8 * bt)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
	return HAL_UART_Transmit(&huart2, bt, 1, 1) == HAL_OK ? 0 : 1;
 80009a0:	6879      	ldr	r1, [r7, #4]
 80009a2:	4806      	ldr	r0, [pc, #24]	; (80009bc <send_uart_byte+0x24>)
 80009a4:	2301      	movs	r3, #1
 80009a6:	2201      	movs	r2, #1
 80009a8:	f002 f9ba 	bl	8002d20 <HAL_UART_Transmit>
 80009ac:	0003      	movs	r3, r0
 80009ae:	1e5a      	subs	r2, r3, #1
 80009b0:	4193      	sbcs	r3, r2
 80009b2:	b2db      	uxtb	r3, r3
}
 80009b4:	0018      	movs	r0, r3
 80009b6:	46bd      	mov	sp, r7
 80009b8:	b002      	add	sp, #8
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	20000028 	.word	0x20000028

080009c0 <set_led>:

void set_led(u8 num, u8 val)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	0002      	movs	r2, r0
 80009c8:	1dfb      	adds	r3, r7, #7
 80009ca:	701a      	strb	r2, [r3, #0]
 80009cc:	1dbb      	adds	r3, r7, #6
 80009ce:	1c0a      	adds	r2, r1, #0
 80009d0:	701a      	strb	r2, [r3, #0]
	if(num)
 80009d2:	1dfb      	adds	r3, r7, #7
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d00c      	beq.n	80009f4 <set_led+0x34>
	{
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, val ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80009da:	1dbb      	adds	r3, r7, #6
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	1e5a      	subs	r2, r3, #1
 80009e0:	4193      	sbcs	r3, r2
 80009e2:	b2db      	uxtb	r3, r3
 80009e4:	001a      	movs	r2, r3
 80009e6:	2380      	movs	r3, #128	; 0x80
 80009e8:	01db      	lsls	r3, r3, #7
 80009ea:	480a      	ldr	r0, [pc, #40]	; (8000a14 <set_led+0x54>)
 80009ec:	0019      	movs	r1, r3
 80009ee:	f001 fa69 	bl	8001ec4 <HAL_GPIO_WritePin>
	}
	else
	{
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, val ? GPIO_PIN_SET : GPIO_PIN_RESET);
	}
}
 80009f2:	e00b      	b.n	8000a0c <set_led+0x4c>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, val ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80009f4:	1dbb      	adds	r3, r7, #6
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	1e5a      	subs	r2, r3, #1
 80009fa:	4193      	sbcs	r3, r2
 80009fc:	b2db      	uxtb	r3, r3
 80009fe:	001a      	movs	r2, r3
 8000a00:	2380      	movs	r3, #128	; 0x80
 8000a02:	021b      	lsls	r3, r3, #8
 8000a04:	4803      	ldr	r0, [pc, #12]	; (8000a14 <set_led+0x54>)
 8000a06:	0019      	movs	r1, r3
 8000a08:	f001 fa5c 	bl	8001ec4 <HAL_GPIO_WritePin>
}
 8000a0c:	46c0      	nop			; (mov r8, r8)
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	b002      	add	sp, #8
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	50000800 	.word	0x50000800

08000a18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a1c:	f000 fa8c 	bl	8000f38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a20:	f000 f80a 	bl	8000a38 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a24:	f000 f920 	bl	8000c68 <MX_GPIO_Init>
  MX_ADC_Init();
 8000a28:	f000 f87c 	bl	8000b24 <MX_ADC_Init>
  MX_USART2_UART_Init();
 8000a2c:	f000 f8ec 	bl	8000c08 <MX_USART2_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  handler_entry();
 8000a30:	f7ff fd53 	bl	80004da <handler_entry>
 8000a34:	e7fc      	b.n	8000a30 <main+0x18>
	...

08000a38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b09a      	sub	sp, #104	; 0x68
 8000a3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a3e:	2334      	movs	r3, #52	; 0x34
 8000a40:	18fb      	adds	r3, r7, r3
 8000a42:	0018      	movs	r0, r3
 8000a44:	2334      	movs	r3, #52	; 0x34
 8000a46:	001a      	movs	r2, r3
 8000a48:	2100      	movs	r1, #0
 8000a4a:	f003 f9cd 	bl	8003de8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a4e:	2320      	movs	r3, #32
 8000a50:	18fb      	adds	r3, r7, r3
 8000a52:	0018      	movs	r0, r3
 8000a54:	2314      	movs	r3, #20
 8000a56:	001a      	movs	r2, r3
 8000a58:	2100      	movs	r1, #0
 8000a5a:	f003 f9c5 	bl	8003de8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a5e:	1d3b      	adds	r3, r7, #4
 8000a60:	0018      	movs	r0, r3
 8000a62:	231c      	movs	r3, #28
 8000a64:	001a      	movs	r2, r3
 8000a66:	2100      	movs	r1, #0
 8000a68:	f003 f9be 	bl	8003de8 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a6c:	4b2b      	ldr	r3, [pc, #172]	; (8000b1c <SystemClock_Config+0xe4>)
 8000a6e:	4a2b      	ldr	r2, [pc, #172]	; (8000b1c <SystemClock_Config+0xe4>)
 8000a70:	6812      	ldr	r2, [r2, #0]
 8000a72:	492b      	ldr	r1, [pc, #172]	; (8000b20 <SystemClock_Config+0xe8>)
 8000a74:	400a      	ands	r2, r1
 8000a76:	2180      	movs	r1, #128	; 0x80
 8000a78:	0109      	lsls	r1, r1, #4
 8000a7a:	430a      	orrs	r2, r1
 8000a7c:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000a7e:	2334      	movs	r3, #52	; 0x34
 8000a80:	18fb      	adds	r3, r7, r3
 8000a82:	2210      	movs	r2, #16
 8000a84:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000a86:	2334      	movs	r3, #52	; 0x34
 8000a88:	18fb      	adds	r3, r7, r3
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000a8e:	2334      	movs	r3, #52	; 0x34
 8000a90:	18fb      	adds	r3, r7, r3
 8000a92:	2200      	movs	r2, #0
 8000a94:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8000a96:	2334      	movs	r3, #52	; 0x34
 8000a98:	18fb      	adds	r3, r7, r3
 8000a9a:	22a0      	movs	r2, #160	; 0xa0
 8000a9c:	0212      	lsls	r2, r2, #8
 8000a9e:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000aa0:	2334      	movs	r3, #52	; 0x34
 8000aa2:	18fb      	adds	r3, r7, r3
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aa8:	2334      	movs	r3, #52	; 0x34
 8000aaa:	18fb      	adds	r3, r7, r3
 8000aac:	0018      	movs	r0, r3
 8000aae:	f001 fa27 	bl	8001f00 <HAL_RCC_OscConfig>
 8000ab2:	1e03      	subs	r3, r0, #0
 8000ab4:	d001      	beq.n	8000aba <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000ab6:	f000 f96d 	bl	8000d94 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aba:	2320      	movs	r3, #32
 8000abc:	18fb      	adds	r3, r7, r3
 8000abe:	220f      	movs	r2, #15
 8000ac0:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000ac2:	2320      	movs	r3, #32
 8000ac4:	18fb      	adds	r3, r7, r3
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aca:	2320      	movs	r3, #32
 8000acc:	18fb      	adds	r3, r7, r3
 8000ace:	2200      	movs	r2, #0
 8000ad0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ad2:	2320      	movs	r3, #32
 8000ad4:	18fb      	adds	r3, r7, r3
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ada:	2320      	movs	r3, #32
 8000adc:	18fb      	adds	r3, r7, r3
 8000ade:	2200      	movs	r2, #0
 8000ae0:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ae2:	2320      	movs	r3, #32
 8000ae4:	18fb      	adds	r3, r7, r3
 8000ae6:	2100      	movs	r1, #0
 8000ae8:	0018      	movs	r0, r3
 8000aea:	f001 fd73 	bl	80025d4 <HAL_RCC_ClockConfig>
 8000aee:	1e03      	subs	r3, r0, #0
 8000af0:	d001      	beq.n	8000af6 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000af2:	f000 f94f 	bl	8000d94 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000af6:	1d3b      	adds	r3, r7, #4
 8000af8:	2202      	movs	r2, #2
 8000afa:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000afc:	1d3b      	adds	r3, r7, #4
 8000afe:	2200      	movs	r2, #0
 8000b00:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b02:	1d3b      	adds	r3, r7, #4
 8000b04:	0018      	movs	r0, r3
 8000b06:	f001 ff85 	bl	8002a14 <HAL_RCCEx_PeriphCLKConfig>
 8000b0a:	1e03      	subs	r3, r0, #0
 8000b0c:	d001      	beq.n	8000b12 <SystemClock_Config+0xda>
  {
    Error_Handler();
 8000b0e:	f000 f941 	bl	8000d94 <Error_Handler>
  }
}
 8000b12:	46c0      	nop			; (mov r8, r8)
 8000b14:	46bd      	mov	sp, r7
 8000b16:	b01a      	add	sp, #104	; 0x68
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	46c0      	nop			; (mov r8, r8)
 8000b1c:	40007000 	.word	0x40007000
 8000b20:	ffffe7ff 	.word	0xffffe7ff

08000b24 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b2a:	003b      	movs	r3, r7
 8000b2c:	0018      	movs	r0, r3
 8000b2e:	2308      	movs	r3, #8
 8000b30:	001a      	movs	r2, r3
 8000b32:	2100      	movs	r1, #0
 8000b34:	f003 f958 	bl	8003de8 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000b38:	4b30      	ldr	r3, [pc, #192]	; (8000bfc <MX_ADC_Init+0xd8>)
 8000b3a:	4a31      	ldr	r2, [pc, #196]	; (8000c00 <MX_ADC_Init+0xdc>)
 8000b3c:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8000b3e:	4b2f      	ldr	r3, [pc, #188]	; (8000bfc <MX_ADC_Init+0xd8>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8000b44:	4b2d      	ldr	r3, [pc, #180]	; (8000bfc <MX_ADC_Init+0xd8>)
 8000b46:	22c0      	movs	r2, #192	; 0xc0
 8000b48:	0612      	lsls	r2, r2, #24
 8000b4a:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000b4c:	4b2b      	ldr	r3, [pc, #172]	; (8000bfc <MX_ADC_Init+0xd8>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000b52:	4b2a      	ldr	r3, [pc, #168]	; (8000bfc <MX_ADC_Init+0xd8>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000b58:	4b28      	ldr	r3, [pc, #160]	; (8000bfc <MX_ADC_Init+0xd8>)
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b5e:	4b27      	ldr	r3, [pc, #156]	; (8000bfc <MX_ADC_Init+0xd8>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000b64:	4b25      	ldr	r3, [pc, #148]	; (8000bfc <MX_ADC_Init+0xd8>)
 8000b66:	2220      	movs	r2, #32
 8000b68:	2100      	movs	r1, #0
 8000b6a:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000b6c:	4b23      	ldr	r3, [pc, #140]	; (8000bfc <MX_ADC_Init+0xd8>)
 8000b6e:	2221      	movs	r2, #33	; 0x21
 8000b70:	2100      	movs	r1, #0
 8000b72:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b74:	4b21      	ldr	r3, [pc, #132]	; (8000bfc <MX_ADC_Init+0xd8>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b7a:	4b20      	ldr	r3, [pc, #128]	; (8000bfc <MX_ADC_Init+0xd8>)
 8000b7c:	22c2      	movs	r2, #194	; 0xc2
 8000b7e:	32ff      	adds	r2, #255	; 0xff
 8000b80:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000b82:	4b1e      	ldr	r3, [pc, #120]	; (8000bfc <MX_ADC_Init+0xd8>)
 8000b84:	222c      	movs	r2, #44	; 0x2c
 8000b86:	2100      	movs	r1, #0
 8000b88:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b8a:	4b1c      	ldr	r3, [pc, #112]	; (8000bfc <MX_ADC_Init+0xd8>)
 8000b8c:	2204      	movs	r2, #4
 8000b8e:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b90:	4b1a      	ldr	r3, [pc, #104]	; (8000bfc <MX_ADC_Init+0xd8>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000b96:	4b19      	ldr	r3, [pc, #100]	; (8000bfc <MX_ADC_Init+0xd8>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = ENABLE;
 8000b9c:	4b17      	ldr	r3, [pc, #92]	; (8000bfc <MX_ADC_Init+0xd8>)
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000ba2:	4b16      	ldr	r3, [pc, #88]	; (8000bfc <MX_ADC_Init+0xd8>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000ba8:	4b14      	ldr	r3, [pc, #80]	; (8000bfc <MX_ADC_Init+0xd8>)
 8000baa:	0018      	movs	r0, r3
 8000bac:	f000 fa56 	bl	800105c <HAL_ADC_Init>
 8000bb0:	1e03      	subs	r3, r0, #0
 8000bb2:	d001      	beq.n	8000bb8 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8000bb4:	f000 f8ee 	bl	8000d94 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000bb8:	003b      	movs	r3, r7
 8000bba:	2201      	movs	r2, #1
 8000bbc:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000bbe:	003b      	movs	r3, r7
 8000bc0:	2280      	movs	r2, #128	; 0x80
 8000bc2:	0152      	lsls	r2, r2, #5
 8000bc4:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000bc6:	003a      	movs	r2, r7
 8000bc8:	4b0c      	ldr	r3, [pc, #48]	; (8000bfc <MX_ADC_Init+0xd8>)
 8000bca:	0011      	movs	r1, r2
 8000bcc:	0018      	movs	r0, r3
 8000bce:	f000 fcf1 	bl	80015b4 <HAL_ADC_ConfigChannel>
 8000bd2:	1e03      	subs	r3, r0, #0
 8000bd4:	d001      	beq.n	8000bda <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8000bd6:	f000 f8dd 	bl	8000d94 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000bda:	003b      	movs	r3, r7
 8000bdc:	4a09      	ldr	r2, [pc, #36]	; (8000c04 <MX_ADC_Init+0xe0>)
 8000bde:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000be0:	003a      	movs	r2, r7
 8000be2:	4b06      	ldr	r3, [pc, #24]	; (8000bfc <MX_ADC_Init+0xd8>)
 8000be4:	0011      	movs	r1, r2
 8000be6:	0018      	movs	r0, r3
 8000be8:	f000 fce4 	bl	80015b4 <HAL_ADC_ConfigChannel>
 8000bec:	1e03      	subs	r3, r0, #0
 8000bee:	d001      	beq.n	8000bf4 <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 8000bf0:	f000 f8d0 	bl	8000d94 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000bf4:	46c0      	nop			; (mov r8, r8)
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	b002      	add	sp, #8
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	200000ac 	.word	0x200000ac
 8000c00:	40012400 	.word	0x40012400
 8000c04:	04000002 	.word	0x04000002

08000c08 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c0c:	4b14      	ldr	r3, [pc, #80]	; (8000c60 <MX_USART2_UART_Init+0x58>)
 8000c0e:	4a15      	ldr	r2, [pc, #84]	; (8000c64 <MX_USART2_UART_Init+0x5c>)
 8000c10:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c12:	4b13      	ldr	r3, [pc, #76]	; (8000c60 <MX_USART2_UART_Init+0x58>)
 8000c14:	22e1      	movs	r2, #225	; 0xe1
 8000c16:	0252      	lsls	r2, r2, #9
 8000c18:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c1a:	4b11      	ldr	r3, [pc, #68]	; (8000c60 <MX_USART2_UART_Init+0x58>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c20:	4b0f      	ldr	r3, [pc, #60]	; (8000c60 <MX_USART2_UART_Init+0x58>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c26:	4b0e      	ldr	r3, [pc, #56]	; (8000c60 <MX_USART2_UART_Init+0x58>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c2c:	4b0c      	ldr	r3, [pc, #48]	; (8000c60 <MX_USART2_UART_Init+0x58>)
 8000c2e:	220c      	movs	r2, #12
 8000c30:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c32:	4b0b      	ldr	r3, [pc, #44]	; (8000c60 <MX_USART2_UART_Init+0x58>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c38:	4b09      	ldr	r3, [pc, #36]	; (8000c60 <MX_USART2_UART_Init+0x58>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c3e:	4b08      	ldr	r3, [pc, #32]	; (8000c60 <MX_USART2_UART_Init+0x58>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c44:	4b06      	ldr	r3, [pc, #24]	; (8000c60 <MX_USART2_UART_Init+0x58>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c4a:	4b05      	ldr	r3, [pc, #20]	; (8000c60 <MX_USART2_UART_Init+0x58>)
 8000c4c:	0018      	movs	r0, r3
 8000c4e:	f002 f813 	bl	8002c78 <HAL_UART_Init>
 8000c52:	1e03      	subs	r3, r0, #0
 8000c54:	d001      	beq.n	8000c5a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000c56:	f000 f89d 	bl	8000d94 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c5a:	46c0      	nop			; (mov r8, r8)
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	20000028 	.word	0x20000028
 8000c64:	40004400 	.word	0x40004400

08000c68 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b088      	sub	sp, #32
 8000c6c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c6e:	230c      	movs	r3, #12
 8000c70:	18fb      	adds	r3, r7, r3
 8000c72:	0018      	movs	r0, r3
 8000c74:	2314      	movs	r3, #20
 8000c76:	001a      	movs	r2, r3
 8000c78:	2100      	movs	r1, #0
 8000c7a:	f003 f8b5 	bl	8003de8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c7e:	4b41      	ldr	r3, [pc, #260]	; (8000d84 <MX_GPIO_Init+0x11c>)
 8000c80:	4a40      	ldr	r2, [pc, #256]	; (8000d84 <MX_GPIO_Init+0x11c>)
 8000c82:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000c84:	2104      	movs	r1, #4
 8000c86:	430a      	orrs	r2, r1
 8000c88:	62da      	str	r2, [r3, #44]	; 0x2c
 8000c8a:	4b3e      	ldr	r3, [pc, #248]	; (8000d84 <MX_GPIO_Init+0x11c>)
 8000c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c8e:	2204      	movs	r2, #4
 8000c90:	4013      	ands	r3, r2
 8000c92:	60bb      	str	r3, [r7, #8]
 8000c94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c96:	4b3b      	ldr	r3, [pc, #236]	; (8000d84 <MX_GPIO_Init+0x11c>)
 8000c98:	4a3a      	ldr	r2, [pc, #232]	; (8000d84 <MX_GPIO_Init+0x11c>)
 8000c9a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000c9c:	2101      	movs	r1, #1
 8000c9e:	430a      	orrs	r2, r1
 8000ca0:	62da      	str	r2, [r3, #44]	; 0x2c
 8000ca2:	4b38      	ldr	r3, [pc, #224]	; (8000d84 <MX_GPIO_Init+0x11c>)
 8000ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ca6:	2201      	movs	r2, #1
 8000ca8:	4013      	ands	r3, r2
 8000caa:	607b      	str	r3, [r7, #4]
 8000cac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cae:	4b35      	ldr	r3, [pc, #212]	; (8000d84 <MX_GPIO_Init+0x11c>)
 8000cb0:	4a34      	ldr	r2, [pc, #208]	; (8000d84 <MX_GPIO_Init+0x11c>)
 8000cb2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000cb4:	2102      	movs	r1, #2
 8000cb6:	430a      	orrs	r2, r1
 8000cb8:	62da      	str	r2, [r3, #44]	; 0x2c
 8000cba:	4b32      	ldr	r3, [pc, #200]	; (8000d84 <MX_GPIO_Init+0x11c>)
 8000cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cbe:	2202      	movs	r2, #2
 8000cc0:	4013      	ands	r3, r2
 8000cc2:	603b      	str	r3, [r7, #0]
 8000cc4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 8000cc6:	23c0      	movs	r3, #192	; 0xc0
 8000cc8:	021b      	lsls	r3, r3, #8
 8000cca:	482f      	ldr	r0, [pc, #188]	; (8000d88 <MX_GPIO_Init+0x120>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	0019      	movs	r1, r3
 8000cd0:	f001 f8f8 	bl	8001ec4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, V5R_Pin|V4R_Pin|V3R_Pin|V2R_Pin
 8000cd4:	492d      	ldr	r1, [pc, #180]	; (8000d8c <MX_GPIO_Init+0x124>)
 8000cd6:	23a0      	movs	r3, #160	; 0xa0
 8000cd8:	05db      	lsls	r3, r3, #23
 8000cda:	2200      	movs	r2, #0
 8000cdc:	0018      	movs	r0, r3
 8000cde:	f001 f8f1 	bl	8001ec4 <HAL_GPIO_WritePin>
                          |CS_Pin|SCLK_Pin|SDIO_Pin|VA_Pin
                          |VB_Pin|SV2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, V1R_Pin|SV1_Pin|V4L_Pin|V3L_Pin
 8000ce2:	4b2b      	ldr	r3, [pc, #172]	; (8000d90 <MX_GPIO_Init+0x128>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	21fb      	movs	r1, #251	; 0xfb
 8000ce8:	0018      	movs	r0, r3
 8000cea:	f001 f8eb 	bl	8001ec4 <HAL_GPIO_WritePin>
                          |V1L_Pin|V2L_Pin|V5L_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 8000cee:	230c      	movs	r3, #12
 8000cf0:	18fb      	adds	r3, r7, r3
 8000cf2:	22c0      	movs	r2, #192	; 0xc0
 8000cf4:	0212      	lsls	r2, r2, #8
 8000cf6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf8:	230c      	movs	r3, #12
 8000cfa:	18fb      	adds	r3, r7, r3
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d00:	230c      	movs	r3, #12
 8000d02:	18fb      	adds	r3, r7, r3
 8000d04:	2200      	movs	r2, #0
 8000d06:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d08:	230c      	movs	r3, #12
 8000d0a:	18fb      	adds	r3, r7, r3
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d10:	230c      	movs	r3, #12
 8000d12:	18fb      	adds	r3, r7, r3
 8000d14:	4a1c      	ldr	r2, [pc, #112]	; (8000d88 <MX_GPIO_Init+0x120>)
 8000d16:	0019      	movs	r1, r3
 8000d18:	0010      	movs	r0, r2
 8000d1a:	f000 ff5d 	bl	8001bd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : V5R_Pin V4R_Pin V3R_Pin V2R_Pin
                           CS_Pin SCLK_Pin SDIO_Pin VA_Pin
                           VB_Pin SV2_Pin */
  GPIO_InitStruct.Pin = V5R_Pin|V4R_Pin|V3R_Pin|V2R_Pin
 8000d1e:	230c      	movs	r3, #12
 8000d20:	18fb      	adds	r3, r7, r3
 8000d22:	4a1a      	ldr	r2, [pc, #104]	; (8000d8c <MX_GPIO_Init+0x124>)
 8000d24:	601a      	str	r2, [r3, #0]
                          |CS_Pin|SCLK_Pin|SDIO_Pin|VA_Pin
                          |VB_Pin|SV2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d26:	230c      	movs	r3, #12
 8000d28:	18fb      	adds	r3, r7, r3
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2e:	230c      	movs	r3, #12
 8000d30:	18fb      	adds	r3, r7, r3
 8000d32:	2200      	movs	r2, #0
 8000d34:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d36:	230c      	movs	r3, #12
 8000d38:	18fb      	adds	r3, r7, r3
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d3e:	230c      	movs	r3, #12
 8000d40:	18fa      	adds	r2, r7, r3
 8000d42:	23a0      	movs	r3, #160	; 0xa0
 8000d44:	05db      	lsls	r3, r3, #23
 8000d46:	0011      	movs	r1, r2
 8000d48:	0018      	movs	r0, r3
 8000d4a:	f000 ff45 	bl	8001bd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : V1R_Pin SV1_Pin V4L_Pin V3L_Pin
                           V1L_Pin V2L_Pin V5L_Pin */
  GPIO_InitStruct.Pin = V1R_Pin|SV1_Pin|V4L_Pin|V3L_Pin
 8000d4e:	230c      	movs	r3, #12
 8000d50:	18fb      	adds	r3, r7, r3
 8000d52:	22fb      	movs	r2, #251	; 0xfb
 8000d54:	601a      	str	r2, [r3, #0]
                          |V1L_Pin|V2L_Pin|V5L_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d56:	230c      	movs	r3, #12
 8000d58:	18fb      	adds	r3, r7, r3
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5e:	230c      	movs	r3, #12
 8000d60:	18fb      	adds	r3, r7, r3
 8000d62:	2200      	movs	r2, #0
 8000d64:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d66:	230c      	movs	r3, #12
 8000d68:	18fb      	adds	r3, r7, r3
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d6e:	230c      	movs	r3, #12
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	4a07      	ldr	r2, [pc, #28]	; (8000d90 <MX_GPIO_Init+0x128>)
 8000d74:	0019      	movs	r1, r3
 8000d76:	0010      	movs	r0, r2
 8000d78:	f000 ff2e 	bl	8001bd8 <HAL_GPIO_Init>

}
 8000d7c:	46c0      	nop			; (mov r8, r8)
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	b008      	add	sp, #32
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	40021000 	.word	0x40021000
 8000d88:	50000800 	.word	0x50000800
 8000d8c:	00009ff0 	.word	0x00009ff0
 8000d90:	50000400 	.word	0x50000400

08000d94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d98:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d9a:	e7fe      	b.n	8000d9a <Error_Handler+0x6>

08000d9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000da0:	4b07      	ldr	r3, [pc, #28]	; (8000dc0 <HAL_MspInit+0x24>)
 8000da2:	4a07      	ldr	r2, [pc, #28]	; (8000dc0 <HAL_MspInit+0x24>)
 8000da4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000da6:	2101      	movs	r1, #1
 8000da8:	430a      	orrs	r2, r1
 8000daa:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dac:	4b04      	ldr	r3, [pc, #16]	; (8000dc0 <HAL_MspInit+0x24>)
 8000dae:	4a04      	ldr	r2, [pc, #16]	; (8000dc0 <HAL_MspInit+0x24>)
 8000db0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8000db2:	2180      	movs	r1, #128	; 0x80
 8000db4:	0549      	lsls	r1, r1, #21
 8000db6:	430a      	orrs	r2, r1
 8000db8:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dba:	46c0      	nop			; (mov r8, r8)
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	40021000 	.word	0x40021000

08000dc4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b088      	sub	sp, #32
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dcc:	230c      	movs	r3, #12
 8000dce:	18fb      	adds	r3, r7, r3
 8000dd0:	0018      	movs	r0, r3
 8000dd2:	2314      	movs	r3, #20
 8000dd4:	001a      	movs	r2, r3
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	f003 f806 	bl	8003de8 <memset>
  if(hadc->Instance==ADC1)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a16      	ldr	r2, [pc, #88]	; (8000e3c <HAL_ADC_MspInit+0x78>)
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d126      	bne.n	8000e34 <HAL_ADC_MspInit+0x70>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000de6:	4b16      	ldr	r3, [pc, #88]	; (8000e40 <HAL_ADC_MspInit+0x7c>)
 8000de8:	4a15      	ldr	r2, [pc, #84]	; (8000e40 <HAL_ADC_MspInit+0x7c>)
 8000dea:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000dec:	2180      	movs	r1, #128	; 0x80
 8000dee:	0089      	lsls	r1, r1, #2
 8000df0:	430a      	orrs	r2, r1
 8000df2:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df4:	4b12      	ldr	r3, [pc, #72]	; (8000e40 <HAL_ADC_MspInit+0x7c>)
 8000df6:	4a12      	ldr	r2, [pc, #72]	; (8000e40 <HAL_ADC_MspInit+0x7c>)
 8000df8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000dfa:	2101      	movs	r1, #1
 8000dfc:	430a      	orrs	r2, r1
 8000dfe:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e00:	4b0f      	ldr	r3, [pc, #60]	; (8000e40 <HAL_ADC_MspInit+0x7c>)
 8000e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e04:	2201      	movs	r2, #1
 8000e06:	4013      	ands	r3, r2
 8000e08:	60bb      	str	r3, [r7, #8]
 8000e0a:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    PA1     ------> ADC_IN1
    */
    GPIO_InitStruct.Pin = ADC1_Pin|ADC2_Pin;
 8000e0c:	230c      	movs	r3, #12
 8000e0e:	18fb      	adds	r3, r7, r3
 8000e10:	2203      	movs	r2, #3
 8000e12:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e14:	230c      	movs	r3, #12
 8000e16:	18fb      	adds	r3, r7, r3
 8000e18:	2203      	movs	r2, #3
 8000e1a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1c:	230c      	movs	r3, #12
 8000e1e:	18fb      	adds	r3, r7, r3
 8000e20:	2200      	movs	r2, #0
 8000e22:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e24:	230c      	movs	r3, #12
 8000e26:	18fa      	adds	r2, r7, r3
 8000e28:	23a0      	movs	r3, #160	; 0xa0
 8000e2a:	05db      	lsls	r3, r3, #23
 8000e2c:	0011      	movs	r1, r2
 8000e2e:	0018      	movs	r0, r3
 8000e30:	f000 fed2 	bl	8001bd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000e34:	46c0      	nop			; (mov r8, r8)
 8000e36:	46bd      	mov	sp, r7
 8000e38:	b008      	add	sp, #32
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	40012400 	.word	0x40012400
 8000e40:	40021000 	.word	0x40021000

08000e44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b088      	sub	sp, #32
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e4c:	230c      	movs	r3, #12
 8000e4e:	18fb      	adds	r3, r7, r3
 8000e50:	0018      	movs	r0, r3
 8000e52:	2314      	movs	r3, #20
 8000e54:	001a      	movs	r2, r3
 8000e56:	2100      	movs	r1, #0
 8000e58:	f002 ffc6 	bl	8003de8 <memset>
  if(huart->Instance==USART2)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a1e      	ldr	r2, [pc, #120]	; (8000edc <HAL_UART_MspInit+0x98>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d136      	bne.n	8000ed4 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e66:	4b1e      	ldr	r3, [pc, #120]	; (8000ee0 <HAL_UART_MspInit+0x9c>)
 8000e68:	4a1d      	ldr	r2, [pc, #116]	; (8000ee0 <HAL_UART_MspInit+0x9c>)
 8000e6a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8000e6c:	2180      	movs	r1, #128	; 0x80
 8000e6e:	0289      	lsls	r1, r1, #10
 8000e70:	430a      	orrs	r2, r1
 8000e72:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e74:	4b1a      	ldr	r3, [pc, #104]	; (8000ee0 <HAL_UART_MspInit+0x9c>)
 8000e76:	4a1a      	ldr	r2, [pc, #104]	; (8000ee0 <HAL_UART_MspInit+0x9c>)
 8000e78:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000e7a:	2101      	movs	r1, #1
 8000e7c:	430a      	orrs	r2, r1
 8000e7e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e80:	4b17      	ldr	r3, [pc, #92]	; (8000ee0 <HAL_UART_MspInit+0x9c>)
 8000e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e84:	2201      	movs	r2, #1
 8000e86:	4013      	ands	r3, r2
 8000e88:	60bb      	str	r3, [r7, #8]
 8000e8a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000e8c:	230c      	movs	r3, #12
 8000e8e:	18fb      	adds	r3, r7, r3
 8000e90:	220c      	movs	r2, #12
 8000e92:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e94:	230c      	movs	r3, #12
 8000e96:	18fb      	adds	r3, r7, r3
 8000e98:	2202      	movs	r2, #2
 8000e9a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9c:	230c      	movs	r3, #12
 8000e9e:	18fb      	adds	r3, r7, r3
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ea4:	230c      	movs	r3, #12
 8000ea6:	18fb      	adds	r3, r7, r3
 8000ea8:	2203      	movs	r2, #3
 8000eaa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8000eac:	230c      	movs	r3, #12
 8000eae:	18fb      	adds	r3, r7, r3
 8000eb0:	2204      	movs	r2, #4
 8000eb2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eb4:	230c      	movs	r3, #12
 8000eb6:	18fa      	adds	r2, r7, r3
 8000eb8:	23a0      	movs	r3, #160	; 0xa0
 8000eba:	05db      	lsls	r3, r3, #23
 8000ebc:	0011      	movs	r1, r2
 8000ebe:	0018      	movs	r0, r3
 8000ec0:	f000 fe8a 	bl	8001bd8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	2100      	movs	r1, #0
 8000ec8:	201c      	movs	r0, #28
 8000eca:	f000 fdc9 	bl	8001a60 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000ece:	201c      	movs	r0, #28
 8000ed0:	f000 fddc 	bl	8001a8c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ed4:	46c0      	nop			; (mov r8, r8)
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	b008      	add	sp, #32
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	40004400 	.word	0x40004400
 8000ee0:	40021000 	.word	0x40021000

08000ee4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ee8:	e7fe      	b.n	8000ee8 <NMI_Handler+0x4>

08000eea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eea:	b580      	push	{r7, lr}
 8000eec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eee:	e7fe      	b.n	8000eee <HardFault_Handler+0x4>

08000ef0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000ef4:	46c0      	nop			; (mov r8, r8)
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}

08000efa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000efa:	b580      	push	{r7, lr}
 8000efc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000efe:	46c0      	nop			; (mov r8, r8)
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}

08000f04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f08:	f000 f86a 	bl	8000fe0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f0c:	46c0      	nop			; (mov r8, r8)
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
	...

08000f14 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000f18:	4b03      	ldr	r3, [pc, #12]	; (8000f28 <USART2_IRQHandler+0x14>)
 8000f1a:	0018      	movs	r0, r3
 8000f1c:	f002 f896 	bl	800304c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000f20:	46c0      	nop			; (mov r8, r8)
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	46c0      	nop			; (mov r8, r8)
 8000f28:	20000028 	.word	0x20000028

08000f2c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f30:	46c0      	nop			; (mov r8, r8)
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
	...

08000f38 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f3e:	1dfb      	adds	r3, r7, #7
 8000f40:	2200      	movs	r2, #0
 8000f42:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000f44:	4b0b      	ldr	r3, [pc, #44]	; (8000f74 <HAL_Init+0x3c>)
 8000f46:	4a0b      	ldr	r2, [pc, #44]	; (8000f74 <HAL_Init+0x3c>)
 8000f48:	6812      	ldr	r2, [r2, #0]
 8000f4a:	2140      	movs	r1, #64	; 0x40
 8000f4c:	430a      	orrs	r2, r1
 8000f4e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f50:	2000      	movs	r0, #0
 8000f52:	f000 f811 	bl	8000f78 <HAL_InitTick>
 8000f56:	1e03      	subs	r3, r0, #0
 8000f58:	d003      	beq.n	8000f62 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000f5a:	1dfb      	adds	r3, r7, #7
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	701a      	strb	r2, [r3, #0]
 8000f60:	e001      	b.n	8000f66 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f62:	f7ff ff1b 	bl	8000d9c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f66:	1dfb      	adds	r3, r7, #7
 8000f68:	781b      	ldrb	r3, [r3, #0]
}
 8000f6a:	0018      	movs	r0, r3
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	b002      	add	sp, #8
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	46c0      	nop			; (mov r8, r8)
 8000f74:	40022000 	.word	0x40022000

08000f78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f78:	b590      	push	{r4, r7, lr}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f80:	4b14      	ldr	r3, [pc, #80]	; (8000fd4 <HAL_InitTick+0x5c>)
 8000f82:	681c      	ldr	r4, [r3, #0]
 8000f84:	4b14      	ldr	r3, [pc, #80]	; (8000fd8 <HAL_InitTick+0x60>)
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	0019      	movs	r1, r3
 8000f8a:	23fa      	movs	r3, #250	; 0xfa
 8000f8c:	0098      	lsls	r0, r3, #2
 8000f8e:	f7ff f8bb 	bl	8000108 <__udivsi3>
 8000f92:	0003      	movs	r3, r0
 8000f94:	0019      	movs	r1, r3
 8000f96:	0020      	movs	r0, r4
 8000f98:	f7ff f8b6 	bl	8000108 <__udivsi3>
 8000f9c:	0003      	movs	r3, r0
 8000f9e:	0018      	movs	r0, r3
 8000fa0:	f000 fd84 	bl	8001aac <HAL_SYSTICK_Config>
 8000fa4:	1e03      	subs	r3, r0, #0
 8000fa6:	d001      	beq.n	8000fac <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	e00f      	b.n	8000fcc <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2b03      	cmp	r3, #3
 8000fb0:	d80b      	bhi.n	8000fca <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fb2:	6879      	ldr	r1, [r7, #4]
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	425b      	negs	r3, r3
 8000fb8:	2200      	movs	r2, #0
 8000fba:	0018      	movs	r0, r3
 8000fbc:	f000 fd50 	bl	8001a60 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fc0:	4b06      	ldr	r3, [pc, #24]	; (8000fdc <HAL_InitTick+0x64>)
 8000fc2:	687a      	ldr	r2, [r7, #4]
 8000fc4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	e000      	b.n	8000fcc <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000fca:	2301      	movs	r3, #1
}
 8000fcc:	0018      	movs	r0, r3
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	b003      	add	sp, #12
 8000fd2:	bd90      	pop	{r4, r7, pc}
 8000fd4:	20000000 	.word	0x20000000
 8000fd8:	20000008 	.word	0x20000008
 8000fdc:	20000004 	.word	0x20000004

08000fe0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fe4:	4b05      	ldr	r3, [pc, #20]	; (8000ffc <HAL_IncTick+0x1c>)
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	001a      	movs	r2, r3
 8000fea:	4b05      	ldr	r3, [pc, #20]	; (8001000 <HAL_IncTick+0x20>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	18d2      	adds	r2, r2, r3
 8000ff0:	4b03      	ldr	r3, [pc, #12]	; (8001000 <HAL_IncTick+0x20>)
 8000ff2:	601a      	str	r2, [r3, #0]
}
 8000ff4:	46c0      	nop			; (mov r8, r8)
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	46c0      	nop			; (mov r8, r8)
 8000ffc:	20000008 	.word	0x20000008
 8001000:	20000108 	.word	0x20000108

08001004 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
  return uwTick;
 8001008:	4b02      	ldr	r3, [pc, #8]	; (8001014 <HAL_GetTick+0x10>)
 800100a:	681b      	ldr	r3, [r3, #0]
}
 800100c:	0018      	movs	r0, r3
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	46c0      	nop			; (mov r8, r8)
 8001014:	20000108 	.word	0x20000108

08001018 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b084      	sub	sp, #16
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001020:	f7ff fff0 	bl	8001004 <HAL_GetTick>
 8001024:	0003      	movs	r3, r0
 8001026:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	3301      	adds	r3, #1
 8001030:	d005      	beq.n	800103e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001032:	4b09      	ldr	r3, [pc, #36]	; (8001058 <HAL_Delay+0x40>)
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	001a      	movs	r2, r3
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	189b      	adds	r3, r3, r2
 800103c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800103e:	46c0      	nop			; (mov r8, r8)
 8001040:	f7ff ffe0 	bl	8001004 <HAL_GetTick>
 8001044:	0002      	movs	r2, r0
 8001046:	68bb      	ldr	r3, [r7, #8]
 8001048:	1ad2      	subs	r2, r2, r3
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	429a      	cmp	r2, r3
 800104e:	d3f7      	bcc.n	8001040 <HAL_Delay+0x28>
  {
  }
}
 8001050:	46c0      	nop			; (mov r8, r8)
 8001052:	46bd      	mov	sp, r7
 8001054:	b004      	add	sp, #16
 8001056:	bd80      	pop	{r7, pc}
 8001058:	20000008 	.word	0x20000008

0800105c <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800105c:	b590      	push	{r4, r7, lr}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d101      	bne.n	800106e <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 800106a:	2301      	movs	r3, #1
 800106c:	e159      	b.n	8001322 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001072:	2b00      	cmp	r3, #0
 8001074:	d10a      	bne.n	800108c <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2200      	movs	r2, #0
 800107a:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2250      	movs	r2, #80	; 0x50
 8001080:	2100      	movs	r1, #0
 8001082:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	0018      	movs	r0, r3
 8001088:	f7ff fe9c 	bl	8000dc4 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001090:	2210      	movs	r2, #16
 8001092:	4013      	ands	r3, r2
 8001094:	2b10      	cmp	r3, #16
 8001096:	d005      	beq.n	80010a4 <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	689b      	ldr	r3, [r3, #8]
 800109e:	2204      	movs	r2, #4
 80010a0:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80010a2:	d00b      	beq.n	80010bc <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010a8:	2210      	movs	r2, #16
 80010aa:	431a      	orrs	r2, r3
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2250      	movs	r2, #80	; 0x50
 80010b4:	2100      	movs	r1, #0
 80010b6:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80010b8:	2301      	movs	r3, #1
 80010ba:	e132      	b.n	8001322 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010c0:	4a9a      	ldr	r2, [pc, #616]	; (800132c <HAL_ADC_Init+0x2d0>)
 80010c2:	4013      	ands	r3, r2
 80010c4:	2202      	movs	r2, #2
 80010c6:	431a      	orrs	r2, r3
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	689b      	ldr	r3, [r3, #8]
 80010d2:	2203      	movs	r2, #3
 80010d4:	4013      	ands	r3, r2
 80010d6:	2b01      	cmp	r3, #1
 80010d8:	d108      	bne.n	80010ec <HAL_ADC_Init+0x90>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	2201      	movs	r2, #1
 80010e2:	4013      	ands	r3, r2
 80010e4:	2b01      	cmp	r3, #1
 80010e6:	d101      	bne.n	80010ec <HAL_ADC_Init+0x90>
 80010e8:	2301      	movs	r3, #1
 80010ea:	e000      	b.n	80010ee <HAL_ADC_Init+0x92>
 80010ec:	2300      	movs	r3, #0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d149      	bne.n	8001186 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	685a      	ldr	r2, [r3, #4]
 80010f6:	23c0      	movs	r3, #192	; 0xc0
 80010f8:	061b      	lsls	r3, r3, #24
 80010fa:	429a      	cmp	r2, r3
 80010fc:	d00b      	beq.n	8001116 <HAL_ADC_Init+0xba>
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	685a      	ldr	r2, [r3, #4]
 8001102:	2380      	movs	r3, #128	; 0x80
 8001104:	05db      	lsls	r3, r3, #23
 8001106:	429a      	cmp	r2, r3
 8001108:	d005      	beq.n	8001116 <HAL_ADC_Init+0xba>
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	685a      	ldr	r2, [r3, #4]
 800110e:	2380      	movs	r3, #128	; 0x80
 8001110:	061b      	lsls	r3, r3, #24
 8001112:	429a      	cmp	r2, r3
 8001114:	d111      	bne.n	800113a <HAL_ADC_Init+0xde>
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	687a      	ldr	r2, [r7, #4]
 800111c:	6812      	ldr	r2, [r2, #0]
 800111e:	6912      	ldr	r2, [r2, #16]
 8001120:	0092      	lsls	r2, r2, #2
 8001122:	0892      	lsrs	r2, r2, #2
 8001124:	611a      	str	r2, [r3, #16]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	687a      	ldr	r2, [r7, #4]
 800112c:	6812      	ldr	r2, [r2, #0]
 800112e:	6911      	ldr	r1, [r2, #16]
 8001130:	687a      	ldr	r2, [r7, #4]
 8001132:	6852      	ldr	r2, [r2, #4]
 8001134:	430a      	orrs	r2, r1
 8001136:	611a      	str	r2, [r3, #16]
 8001138:	e014      	b.n	8001164 <HAL_ADC_Init+0x108>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	687a      	ldr	r2, [r7, #4]
 8001140:	6812      	ldr	r2, [r2, #0]
 8001142:	6912      	ldr	r2, [r2, #16]
 8001144:	0092      	lsls	r2, r2, #2
 8001146:	0892      	lsrs	r2, r2, #2
 8001148:	611a      	str	r2, [r3, #16]
 800114a:	4b79      	ldr	r3, [pc, #484]	; (8001330 <HAL_ADC_Init+0x2d4>)
 800114c:	4a78      	ldr	r2, [pc, #480]	; (8001330 <HAL_ADC_Init+0x2d4>)
 800114e:	6812      	ldr	r2, [r2, #0]
 8001150:	4978      	ldr	r1, [pc, #480]	; (8001334 <HAL_ADC_Init+0x2d8>)
 8001152:	400a      	ands	r2, r1
 8001154:	601a      	str	r2, [r3, #0]
 8001156:	4a76      	ldr	r2, [pc, #472]	; (8001330 <HAL_ADC_Init+0x2d4>)
 8001158:	4b75      	ldr	r3, [pc, #468]	; (8001330 <HAL_ADC_Init+0x2d4>)
 800115a:	6819      	ldr	r1, [r3, #0]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	430b      	orrs	r3, r1
 8001162:	6013      	str	r3, [r2, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	687a      	ldr	r2, [r7, #4]
 800116a:	6812      	ldr	r2, [r2, #0]
 800116c:	68d2      	ldr	r2, [r2, #12]
 800116e:	2118      	movs	r1, #24
 8001170:	438a      	bics	r2, r1
 8001172:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	687a      	ldr	r2, [r7, #4]
 800117a:	6812      	ldr	r2, [r2, #0]
 800117c:	68d1      	ldr	r1, [r2, #12]
 800117e:	687a      	ldr	r2, [r7, #4]
 8001180:	6892      	ldr	r2, [r2, #8]
 8001182:	430a      	orrs	r2, r1
 8001184:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8001186:	4b6a      	ldr	r3, [pc, #424]	; (8001330 <HAL_ADC_Init+0x2d4>)
 8001188:	4a69      	ldr	r2, [pc, #420]	; (8001330 <HAL_ADC_Init+0x2d4>)
 800118a:	6812      	ldr	r2, [r2, #0]
 800118c:	496a      	ldr	r1, [pc, #424]	; (8001338 <HAL_ADC_Init+0x2dc>)
 800118e:	400a      	ands	r2, r1
 8001190:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 8001192:	4a67      	ldr	r2, [pc, #412]	; (8001330 <HAL_ADC_Init+0x2d4>)
 8001194:	4b66      	ldr	r3, [pc, #408]	; (8001330 <HAL_ADC_Init+0x2d4>)
 8001196:	6819      	ldr	r1, [r3, #0]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800119c:	065b      	lsls	r3, r3, #25
 800119e:	430b      	orrs	r3, r1
 80011a0:	6013      	str	r3, [r2, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	689a      	ldr	r2, [r3, #8]
 80011a8:	2380      	movs	r3, #128	; 0x80
 80011aa:	055b      	lsls	r3, r3, #21
 80011ac:	4013      	ands	r3, r2
 80011ae:	d108      	bne.n	80011c2 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	687a      	ldr	r2, [r7, #4]
 80011b6:	6812      	ldr	r2, [r2, #0]
 80011b8:	6892      	ldr	r2, [r2, #8]
 80011ba:	2180      	movs	r1, #128	; 0x80
 80011bc:	0549      	lsls	r1, r1, #21
 80011be:	430a      	orrs	r2, r1
 80011c0:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	687a      	ldr	r2, [r7, #4]
 80011c8:	6812      	ldr	r2, [r2, #0]
 80011ca:	68d2      	ldr	r2, [r2, #12]
 80011cc:	495b      	ldr	r1, [pc, #364]	; (800133c <HAL_ADC_Init+0x2e0>)
 80011ce:	400a      	ands	r2, r1
 80011d0:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	687a      	ldr	r2, [r7, #4]
 80011d8:	6812      	ldr	r2, [r2, #0]
 80011da:	68d1      	ldr	r1, [r2, #12]
 80011dc:	687a      	ldr	r2, [r7, #4]
 80011de:	68d0      	ldr	r0, [r2, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80011e0:	687a      	ldr	r2, [r7, #4]
 80011e2:	6912      	ldr	r2, [r2, #16]
 80011e4:	2a02      	cmp	r2, #2
 80011e6:	d101      	bne.n	80011ec <HAL_ADC_Init+0x190>
 80011e8:	2204      	movs	r2, #4
 80011ea:	e000      	b.n	80011ee <HAL_ADC_Init+0x192>
 80011ec:	2200      	movs	r2, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80011ee:	4310      	orrs	r0, r2
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80011f0:	687a      	ldr	r2, [r7, #4]
 80011f2:	2420      	movs	r4, #32
 80011f4:	5d12      	ldrb	r2, [r2, r4]
 80011f6:	0352      	lsls	r2, r2, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80011f8:	4310      	orrs	r0, r2
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80011fa:	687a      	ldr	r2, [r7, #4]
 80011fc:	242c      	movs	r4, #44	; 0x2c
 80011fe:	5d12      	ldrb	r2, [r2, r4]
 8001200:	0052      	lsls	r2, r2, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001202:	4310      	orrs	r0, r2
                            hadc->Init.Overrun                               |
 8001204:	687a      	ldr	r2, [r7, #4]
 8001206:	6b12      	ldr	r2, [r2, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001208:	4310      	orrs	r0, r2
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800120a:	687a      	ldr	r2, [r7, #4]
 800120c:	6992      	ldr	r2, [r2, #24]
 800120e:	0392      	lsls	r2, r2, #14
                            hadc->Init.Overrun                               |
 8001210:	4310      	orrs	r0, r2
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8001212:	687a      	ldr	r2, [r7, #4]
 8001214:	69d2      	ldr	r2, [r2, #28]
 8001216:	03d2      	lsls	r2, r2, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8001218:	4302      	orrs	r2, r0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800121a:	430a      	orrs	r2, r1
 800121c:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001222:	23c2      	movs	r3, #194	; 0xc2
 8001224:	33ff      	adds	r3, #255	; 0xff
 8001226:	429a      	cmp	r2, r3
 8001228:	d00b      	beq.n	8001242 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	687a      	ldr	r2, [r7, #4]
 8001230:	6812      	ldr	r2, [r2, #0]
 8001232:	68d1      	ldr	r1, [r2, #12]
 8001234:	687a      	ldr	r2, [r7, #4]
 8001236:	6a50      	ldr	r0, [r2, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8001238:	687a      	ldr	r2, [r7, #4]
 800123a:	6a92      	ldr	r2, [r2, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800123c:	4302      	orrs	r2, r0
 800123e:	430a      	orrs	r2, r1
 8001240:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2221      	movs	r2, #33	; 0x21
 8001246:	5c9b      	ldrb	r3, [r3, r2]
 8001248:	2b01      	cmp	r3, #1
 800124a:	d11a      	bne.n	8001282 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2220      	movs	r2, #32
 8001250:	5c9b      	ldrb	r3, [r3, r2]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d109      	bne.n	800126a <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	687a      	ldr	r2, [r7, #4]
 800125c:	6812      	ldr	r2, [r2, #0]
 800125e:	68d2      	ldr	r2, [r2, #12]
 8001260:	2180      	movs	r1, #128	; 0x80
 8001262:	0249      	lsls	r1, r1, #9
 8001264:	430a      	orrs	r2, r1
 8001266:	60da      	str	r2, [r3, #12]
 8001268:	e00b      	b.n	8001282 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800126e:	2220      	movs	r2, #32
 8001270:	431a      	orrs	r2, r3
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800127a:	2201      	movs	r2, #1
 800127c:	431a      	orrs	r2, r3
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001286:	2b01      	cmp	r3, #1
 8001288:	d11f      	bne.n	80012ca <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	687a      	ldr	r2, [r7, #4]
 8001290:	6812      	ldr	r2, [r2, #0]
 8001292:	6912      	ldr	r2, [r2, #16]
 8001294:	492a      	ldr	r1, [pc, #168]	; (8001340 <HAL_ADC_Init+0x2e4>)
 8001296:	400a      	ands	r2, r1
 8001298:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	687a      	ldr	r2, [r7, #4]
 80012a0:	6812      	ldr	r2, [r2, #0]
 80012a2:	6911      	ldr	r1, [r2, #16]
 80012a4:	687a      	ldr	r2, [r7, #4]
 80012a6:	6c10      	ldr	r0, [r2, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 80012a8:	687a      	ldr	r2, [r7, #4]
 80012aa:	6c52      	ldr	r2, [r2, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80012ac:	4310      	orrs	r0, r2
                               hadc->Init.Oversample.TriggeredMode );
 80012ae:	687a      	ldr	r2, [r7, #4]
 80012b0:	6c92      	ldr	r2, [r2, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 80012b2:	4302      	orrs	r2, r0
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80012b4:	430a      	orrs	r2, r1
 80012b6:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	687a      	ldr	r2, [r7, #4]
 80012be:	6812      	ldr	r2, [r2, #0]
 80012c0:	6912      	ldr	r2, [r2, #16]
 80012c2:	2101      	movs	r1, #1
 80012c4:	430a      	orrs	r2, r1
 80012c6:	611a      	str	r2, [r3, #16]
 80012c8:	e00e      	b.n	80012e8 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	691b      	ldr	r3, [r3, #16]
 80012d0:	2201      	movs	r2, #1
 80012d2:	4013      	ands	r3, r2
 80012d4:	2b01      	cmp	r3, #1
 80012d6:	d107      	bne.n	80012e8 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	687a      	ldr	r2, [r7, #4]
 80012de:	6812      	ldr	r2, [r2, #0]
 80012e0:	6912      	ldr	r2, [r2, #16]
 80012e2:	2101      	movs	r1, #1
 80012e4:	438a      	bics	r2, r1
 80012e6:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	687a      	ldr	r2, [r7, #4]
 80012ee:	6812      	ldr	r2, [r2, #0]
 80012f0:	6952      	ldr	r2, [r2, #20]
 80012f2:	2107      	movs	r1, #7
 80012f4:	438a      	bics	r2, r1
 80012f6:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	687a      	ldr	r2, [r7, #4]
 80012fe:	6812      	ldr	r2, [r2, #0]
 8001300:	6951      	ldr	r1, [r2, #20]
 8001302:	687a      	ldr	r2, [r7, #4]
 8001304:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001306:	430a      	orrs	r2, r1
 8001308:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2200      	movs	r2, #0
 800130e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001314:	2203      	movs	r2, #3
 8001316:	4393      	bics	r3, r2
 8001318:	2201      	movs	r2, #1
 800131a:	431a      	orrs	r2, r3
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8001320:	2300      	movs	r3, #0
}
 8001322:	0018      	movs	r0, r3
 8001324:	46bd      	mov	sp, r7
 8001326:	b003      	add	sp, #12
 8001328:	bd90      	pop	{r4, r7, pc}
 800132a:	46c0      	nop			; (mov r8, r8)
 800132c:	fffffefd 	.word	0xfffffefd
 8001330:	40012708 	.word	0x40012708
 8001334:	ffc3ffff 	.word	0xffc3ffff
 8001338:	fdffffff 	.word	0xfdffffff
 800133c:	fffe0219 	.word	0xfffe0219
 8001340:	fffffc03 	.word	0xfffffc03

08001344 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001344:	b590      	push	{r4, r7, lr}
 8001346:	b085      	sub	sp, #20
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800134c:	230f      	movs	r3, #15
 800134e:	18fb      	adds	r3, r7, r3
 8001350:	2200      	movs	r2, #0
 8001352:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	689b      	ldr	r3, [r3, #8]
 800135a:	2204      	movs	r2, #4
 800135c:	4013      	ands	r3, r2
 800135e:	d138      	bne.n	80013d2 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2250      	movs	r2, #80	; 0x50
 8001364:	5c9b      	ldrb	r3, [r3, r2]
 8001366:	2b01      	cmp	r3, #1
 8001368:	d101      	bne.n	800136e <HAL_ADC_Start+0x2a>
 800136a:	2302      	movs	r3, #2
 800136c:	e038      	b.n	80013e0 <HAL_ADC_Start+0x9c>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2250      	movs	r2, #80	; 0x50
 8001372:	2101      	movs	r1, #1
 8001374:	5499      	strb	r1, [r3, r2]
    
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	69db      	ldr	r3, [r3, #28]
 800137a:	2b01      	cmp	r3, #1
 800137c:	d007      	beq.n	800138e <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 800137e:	230f      	movs	r3, #15
 8001380:	18fc      	adds	r4, r7, r3
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	0018      	movs	r0, r3
 8001386:	f000 f99b 	bl	80016c0 <ADC_Enable>
 800138a:	0003      	movs	r3, r0
 800138c:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800138e:	230f      	movs	r3, #15
 8001390:	18fb      	adds	r3, r7, r3
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d120      	bne.n	80013da <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800139c:	4a12      	ldr	r2, [pc, #72]	; (80013e8 <HAL_ADC_Start+0xa4>)
 800139e:	4013      	ands	r3, r2
 80013a0:	2280      	movs	r2, #128	; 0x80
 80013a2:	0052      	lsls	r2, r2, #1
 80013a4:	431a      	orrs	r2, r3
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2200      	movs	r2, #0
 80013ae:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2250      	movs	r2, #80	; 0x50
 80013b4:	2100      	movs	r1, #0
 80013b6:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	221c      	movs	r2, #28
 80013be:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	687a      	ldr	r2, [r7, #4]
 80013c6:	6812      	ldr	r2, [r2, #0]
 80013c8:	6892      	ldr	r2, [r2, #8]
 80013ca:	2104      	movs	r1, #4
 80013cc:	430a      	orrs	r2, r1
 80013ce:	609a      	str	r2, [r3, #8]
 80013d0:	e003      	b.n	80013da <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80013d2:	230f      	movs	r3, #15
 80013d4:	18fb      	adds	r3, r7, r3
 80013d6:	2202      	movs	r2, #2
 80013d8:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80013da:	230f      	movs	r3, #15
 80013dc:	18fb      	adds	r3, r7, r3
 80013de:	781b      	ldrb	r3, [r3, #0]
}
 80013e0:	0018      	movs	r0, r3
 80013e2:	46bd      	mov	sp, r7
 80013e4:	b005      	add	sp, #20
 80013e6:	bd90      	pop	{r4, r7, pc}
 80013e8:	fffff0fe 	.word	0xfffff0fe

080013ec <HAL_ADC_Stop>:
  *         case of auto_injection mode), disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80013ec:	b590      	push	{r4, r7, lr}
 80013ee:	b085      	sub	sp, #20
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013f4:	230f      	movs	r3, #15
 80013f6:	18fb      	adds	r3, r7, r3
 80013f8:	2200      	movs	r2, #0
 80013fa:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2250      	movs	r2, #80	; 0x50
 8001400:	5c9b      	ldrb	r3, [r3, r2]
 8001402:	2b01      	cmp	r3, #1
 8001404:	d101      	bne.n	800140a <HAL_ADC_Stop+0x1e>
 8001406:	2302      	movs	r3, #2
 8001408:	e02c      	b.n	8001464 <HAL_ADC_Stop+0x78>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2250      	movs	r2, #80	; 0x50
 800140e:	2101      	movs	r1, #1
 8001410:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8001412:	230f      	movs	r3, #15
 8001414:	18fc      	adds	r4, r7, r3
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	0018      	movs	r0, r3
 800141a:	f000 fa11 	bl	8001840 <ADC_ConversionStop>
 800141e:	0003      	movs	r3, r0
 8001420:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001422:	230f      	movs	r3, #15
 8001424:	18fb      	adds	r3, r7, r3
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d114      	bne.n	8001456 <HAL_ADC_Stop+0x6a>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800142c:	230f      	movs	r3, #15
 800142e:	18fc      	adds	r4, r7, r3
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	0018      	movs	r0, r3
 8001434:	f000 f9a4 	bl	8001780 <ADC_Disable>
 8001438:	0003      	movs	r3, r0
 800143a:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800143c:	230f      	movs	r3, #15
 800143e:	18fb      	adds	r3, r7, r3
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d107      	bne.n	8001456 <HAL_ADC_Stop+0x6a>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800144a:	4a08      	ldr	r2, [pc, #32]	; (800146c <HAL_ADC_Stop+0x80>)
 800144c:	4013      	ands	r3, r2
 800144e:	2201      	movs	r2, #1
 8001450:	431a      	orrs	r2, r3
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2250      	movs	r2, #80	; 0x50
 800145a:	2100      	movs	r1, #0
 800145c:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 800145e:	230f      	movs	r3, #15
 8001460:	18fb      	adds	r3, r7, r3
 8001462:	781b      	ldrb	r3, [r3, #0]
}
 8001464:	0018      	movs	r0, r3
 8001466:	46bd      	mov	sp, r7
 8001468:	b005      	add	sp, #20
 800146a:	bd90      	pop	{r4, r7, pc}
 800146c:	fffffefe 	.word	0xfffffefe

08001470 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b084      	sub	sp, #16
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800147a:	2300      	movs	r3, #0
 800147c:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 800147e:	2300      	movs	r3, #0
 8001480:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	695b      	ldr	r3, [r3, #20]
 8001486:	2b08      	cmp	r3, #8
 8001488:	d102      	bne.n	8001490 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800148a:	2308      	movs	r3, #8
 800148c:	60fb      	str	r3, [r7, #12]
 800148e:	e014      	b.n	80014ba <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	68db      	ldr	r3, [r3, #12]
 8001496:	2201      	movs	r2, #1
 8001498:	4013      	ands	r3, r2
 800149a:	2b01      	cmp	r3, #1
 800149c:	d10b      	bne.n	80014b6 <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014a2:	2220      	movs	r2, #32
 80014a4:	431a      	orrs	r2, r3
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2250      	movs	r2, #80	; 0x50
 80014ae:	2100      	movs	r1, #0
 80014b0:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 80014b2:	2301      	movs	r3, #1
 80014b4:	e06c      	b.n	8001590 <HAL_ADC_PollForConversion+0x120>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80014b6:	230c      	movs	r3, #12
 80014b8:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80014ba:	f7ff fda3 	bl	8001004 <HAL_GetTick>
 80014be:	0003      	movs	r3, r0
 80014c0:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80014c2:	e019      	b.n	80014f8 <HAL_ADC_PollForConversion+0x88>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	3301      	adds	r3, #1
 80014c8:	d016      	beq.n	80014f8 <HAL_ADC_PollForConversion+0x88>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d007      	beq.n	80014e0 <HAL_ADC_PollForConversion+0x70>
 80014d0:	f7ff fd98 	bl	8001004 <HAL_GetTick>
 80014d4:	0002      	movs	r2, r0
 80014d6:	68bb      	ldr	r3, [r7, #8]
 80014d8:	1ad2      	subs	r2, r2, r3
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	429a      	cmp	r2, r3
 80014de:	d90b      	bls.n	80014f8 <HAL_ADC_PollForConversion+0x88>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014e4:	2204      	movs	r2, #4
 80014e6:	431a      	orrs	r2, r3
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2250      	movs	r2, #80	; 0x50
 80014f0:	2100      	movs	r1, #0
 80014f2:	5499      	strb	r1, [r3, r2]
        
        return HAL_TIMEOUT;
 80014f4:	2303      	movs	r3, #3
 80014f6:	e04b      	b.n	8001590 <HAL_ADC_PollForConversion+0x120>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	68fa      	ldr	r2, [r7, #12]
 8001500:	4013      	ands	r3, r2
 8001502:	d0df      	beq.n	80014c4 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001508:	2280      	movs	r2, #128	; 0x80
 800150a:	0092      	lsls	r2, r2, #2
 800150c:	431a      	orrs	r2, r3
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	68da      	ldr	r2, [r3, #12]
 8001518:	23c0      	movs	r3, #192	; 0xc0
 800151a:	011b      	lsls	r3, r3, #4
 800151c:	4013      	ands	r3, r2
 800151e:	d12e      	bne.n	800157e <HAL_ADC_PollForConversion+0x10e>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2220      	movs	r2, #32
 8001524:	5c9b      	ldrb	r3, [r3, r2]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001526:	2b00      	cmp	r3, #0
 8001528:	d129      	bne.n	800157e <HAL_ADC_PollForConversion+0x10e>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	2208      	movs	r2, #8
 8001532:	4013      	ands	r3, r2
 8001534:	2b08      	cmp	r3, #8
 8001536:	d122      	bne.n	800157e <HAL_ADC_PollForConversion+0x10e>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	689b      	ldr	r3, [r3, #8]
 800153e:	2204      	movs	r2, #4
 8001540:	4013      	ands	r3, r2
 8001542:	d110      	bne.n	8001566 <HAL_ADC_PollForConversion+0xf6>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	687a      	ldr	r2, [r7, #4]
 800154a:	6812      	ldr	r2, [r2, #0]
 800154c:	6852      	ldr	r2, [r2, #4]
 800154e:	210c      	movs	r1, #12
 8001550:	438a      	bics	r2, r1
 8001552:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001558:	4a0f      	ldr	r2, [pc, #60]	; (8001598 <HAL_ADC_PollForConversion+0x128>)
 800155a:	4013      	ands	r3, r2
 800155c:	2201      	movs	r2, #1
 800155e:	431a      	orrs	r2, r3
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	655a      	str	r2, [r3, #84]	; 0x54
 8001564:	e00b      	b.n	800157e <HAL_ADC_PollForConversion+0x10e>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800156a:	2220      	movs	r2, #32
 800156c:	431a      	orrs	r2, r3
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001576:	2201      	movs	r2, #1
 8001578:	431a      	orrs	r2, r3
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	659a      	str	r2, [r3, #88]	; 0x58
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	699b      	ldr	r3, [r3, #24]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d103      	bne.n	800158e <HAL_ADC_PollForConversion+0x11e>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	220c      	movs	r2, #12
 800158c:	601a      	str	r2, [r3, #0]
  }
  
  /* Return function status */
  return HAL_OK;
 800158e:	2300      	movs	r3, #0
}
 8001590:	0018      	movs	r0, r3
 8001592:	46bd      	mov	sp, r7
 8001594:	b004      	add	sp, #16
 8001596:	bd80      	pop	{r7, pc}
 8001598:	fffffefe 	.word	0xfffffefe

0800159c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80015aa:	0018      	movs	r0, r3
 80015ac:	46bd      	mov	sp, r7
 80015ae:	b002      	add	sp, #8
 80015b0:	bd80      	pop	{r7, pc}
	...

080015b4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
 80015bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2250      	movs	r2, #80	; 0x50
 80015c2:	5c9b      	ldrb	r3, [r3, r2]
 80015c4:	2b01      	cmp	r3, #1
 80015c6:	d101      	bne.n	80015cc <HAL_ADC_ConfigChannel+0x18>
 80015c8:	2302      	movs	r3, #2
 80015ca:	e06c      	b.n	80016a6 <HAL_ADC_ConfigChannel+0xf2>
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2250      	movs	r2, #80	; 0x50
 80015d0:	2101      	movs	r1, #1
 80015d2:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	2204      	movs	r2, #4
 80015dc:	4013      	ands	r3, r2
 80015de:	d00b      	beq.n	80015f8 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015e4:	2220      	movs	r2, #32
 80015e6:	431a      	orrs	r2, r3
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2250      	movs	r2, #80	; 0x50
 80015f0:	2100      	movs	r1, #0
 80015f2:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80015f4:	2301      	movs	r3, #1
 80015f6:	e056      	b.n	80016a6 <HAL_ADC_ConfigChannel+0xf2>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	4a2c      	ldr	r2, [pc, #176]	; (80016b0 <HAL_ADC_ConfigChannel+0xfc>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d028      	beq.n	8001654 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	687a      	ldr	r2, [r7, #4]
 8001608:	6812      	ldr	r2, [r2, #0]
 800160a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800160c:	683a      	ldr	r2, [r7, #0]
 800160e:	6812      	ldr	r2, [r2, #0]
 8001610:	0352      	lsls	r2, r2, #13
 8001612:	0b52      	lsrs	r2, r2, #13
 8001614:	430a      	orrs	r2, r1
 8001616:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	2380      	movs	r3, #128	; 0x80
 800161e:	02db      	lsls	r3, r3, #11
 8001620:	4013      	ands	r3, r2
 8001622:	d009      	beq.n	8001638 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 8001624:	4b23      	ldr	r3, [pc, #140]	; (80016b4 <HAL_ADC_ConfigChannel+0x100>)
 8001626:	4a23      	ldr	r2, [pc, #140]	; (80016b4 <HAL_ADC_ConfigChannel+0x100>)
 8001628:	6812      	ldr	r2, [r2, #0]
 800162a:	2180      	movs	r1, #128	; 0x80
 800162c:	0409      	lsls	r1, r1, #16
 800162e:	430a      	orrs	r2, r1
 8001630:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8001632:	200a      	movs	r0, #10
 8001634:	f000 f94a 	bl	80018cc <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	2380      	movs	r3, #128	; 0x80
 800163e:	029b      	lsls	r3, r3, #10
 8001640:	4013      	ands	r3, r2
 8001642:	d02b      	beq.n	800169c <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 8001644:	4b1b      	ldr	r3, [pc, #108]	; (80016b4 <HAL_ADC_ConfigChannel+0x100>)
 8001646:	4a1b      	ldr	r2, [pc, #108]	; (80016b4 <HAL_ADC_ConfigChannel+0x100>)
 8001648:	6812      	ldr	r2, [r2, #0]
 800164a:	2180      	movs	r1, #128	; 0x80
 800164c:	03c9      	lsls	r1, r1, #15
 800164e:	430a      	orrs	r2, r1
 8001650:	601a      	str	r2, [r3, #0]
 8001652:	e023      	b.n	800169c <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	687a      	ldr	r2, [r7, #4]
 800165a:	6812      	ldr	r2, [r2, #0]
 800165c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800165e:	683a      	ldr	r2, [r7, #0]
 8001660:	6812      	ldr	r2, [r2, #0]
 8001662:	0352      	lsls	r2, r2, #13
 8001664:	0b52      	lsrs	r2, r2, #13
 8001666:	43d2      	mvns	r2, r2
 8001668:	400a      	ands	r2, r1
 800166a:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	2380      	movs	r3, #128	; 0x80
 8001672:	02db      	lsls	r3, r3, #11
 8001674:	4013      	ands	r3, r2
 8001676:	d005      	beq.n	8001684 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 8001678:	4b0e      	ldr	r3, [pc, #56]	; (80016b4 <HAL_ADC_ConfigChannel+0x100>)
 800167a:	4a0e      	ldr	r2, [pc, #56]	; (80016b4 <HAL_ADC_ConfigChannel+0x100>)
 800167c:	6812      	ldr	r2, [r2, #0]
 800167e:	490e      	ldr	r1, [pc, #56]	; (80016b8 <HAL_ADC_ConfigChannel+0x104>)
 8001680:	400a      	ands	r2, r1
 8001682:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	2380      	movs	r3, #128	; 0x80
 800168a:	029b      	lsls	r3, r3, #10
 800168c:	4013      	ands	r3, r2
 800168e:	d005      	beq.n	800169c <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8001690:	4b08      	ldr	r3, [pc, #32]	; (80016b4 <HAL_ADC_ConfigChannel+0x100>)
 8001692:	4a08      	ldr	r2, [pc, #32]	; (80016b4 <HAL_ADC_ConfigChannel+0x100>)
 8001694:	6812      	ldr	r2, [r2, #0]
 8001696:	4909      	ldr	r1, [pc, #36]	; (80016bc <HAL_ADC_ConfigChannel+0x108>)
 8001698:	400a      	ands	r2, r1
 800169a:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2250      	movs	r2, #80	; 0x50
 80016a0:	2100      	movs	r1, #0
 80016a2:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 80016a4:	2300      	movs	r3, #0
}
 80016a6:	0018      	movs	r0, r3
 80016a8:	46bd      	mov	sp, r7
 80016aa:	b002      	add	sp, #8
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	46c0      	nop			; (mov r8, r8)
 80016b0:	00001001 	.word	0x00001001
 80016b4:	40012708 	.word	0x40012708
 80016b8:	ff7fffff 	.word	0xff7fffff
 80016bc:	ffbfffff 	.word	0xffbfffff

080016c0 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b084      	sub	sp, #16
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80016c8:	2300      	movs	r3, #0
 80016ca:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	689b      	ldr	r3, [r3, #8]
 80016d2:	2203      	movs	r2, #3
 80016d4:	4013      	ands	r3, r2
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d108      	bne.n	80016ec <ADC_Enable+0x2c>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	2201      	movs	r2, #1
 80016e2:	4013      	ands	r3, r2
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d101      	bne.n	80016ec <ADC_Enable+0x2c>
 80016e8:	2301      	movs	r3, #1
 80016ea:	e000      	b.n	80016ee <ADC_Enable+0x2e>
 80016ec:	2300      	movs	r3, #0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d13f      	bne.n	8001772 <ADC_Enable+0xb2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	689b      	ldr	r3, [r3, #8]
 80016f8:	4a20      	ldr	r2, [pc, #128]	; (800177c <ADC_Enable+0xbc>)
 80016fa:	4013      	ands	r3, r2
 80016fc:	d00d      	beq.n	800171a <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001702:	2210      	movs	r2, #16
 8001704:	431a      	orrs	r2, r3
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800170e:	2201      	movs	r2, #1
 8001710:	431a      	orrs	r2, r3
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	659a      	str	r2, [r3, #88]	; 0x58
      
      return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	e02c      	b.n	8001774 <ADC_Enable+0xb4>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	687a      	ldr	r2, [r7, #4]
 8001720:	6812      	ldr	r2, [r2, #0]
 8001722:	6892      	ldr	r2, [r2, #8]
 8001724:	2101      	movs	r1, #1
 8001726:	430a      	orrs	r2, r1
 8001728:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 800172a:	2001      	movs	r0, #1
 800172c:	f000 f8ce 	bl	80018cc <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8001730:	f7ff fc68 	bl	8001004 <HAL_GetTick>
 8001734:	0003      	movs	r3, r0
 8001736:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001738:	e014      	b.n	8001764 <ADC_Enable+0xa4>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800173a:	f7ff fc63 	bl	8001004 <HAL_GetTick>
 800173e:	0002      	movs	r2, r0
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	1ad3      	subs	r3, r2, r3
 8001744:	2b0a      	cmp	r3, #10
 8001746:	d90d      	bls.n	8001764 <ADC_Enable+0xa4>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800174c:	2210      	movs	r2, #16
 800174e:	431a      	orrs	r2, r3
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001758:	2201      	movs	r2, #1
 800175a:	431a      	orrs	r2, r3
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 8001760:	2301      	movs	r3, #1
 8001762:	e007      	b.n	8001774 <ADC_Enable+0xb4>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	2201      	movs	r2, #1
 800176c:	4013      	ands	r3, r2
 800176e:	2b01      	cmp	r3, #1
 8001770:	d1e3      	bne.n	800173a <ADC_Enable+0x7a>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001772:	2300      	movs	r3, #0
}
 8001774:	0018      	movs	r0, r3
 8001776:	46bd      	mov	sp, r7
 8001778:	b004      	add	sp, #16
 800177a:	bd80      	pop	{r7, pc}
 800177c:	80000017 	.word	0x80000017

08001780 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b084      	sub	sp, #16
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001788:	2300      	movs	r3, #0
 800178a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	689b      	ldr	r3, [r3, #8]
 8001792:	2203      	movs	r2, #3
 8001794:	4013      	ands	r3, r2
 8001796:	2b01      	cmp	r3, #1
 8001798:	d108      	bne.n	80017ac <ADC_Disable+0x2c>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	2201      	movs	r2, #1
 80017a2:	4013      	ands	r3, r2
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	d101      	bne.n	80017ac <ADC_Disable+0x2c>
 80017a8:	2301      	movs	r3, #1
 80017aa:	e000      	b.n	80017ae <ADC_Disable+0x2e>
 80017ac:	2300      	movs	r3, #0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d041      	beq.n	8001836 <ADC_Disable+0xb6>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	2205      	movs	r2, #5
 80017ba:	4013      	ands	r3, r2
 80017bc:	2b01      	cmp	r3, #1
 80017be:	d110      	bne.n	80017e2 <ADC_Disable+0x62>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	687a      	ldr	r2, [r7, #4]
 80017c6:	6812      	ldr	r2, [r2, #0]
 80017c8:	6892      	ldr	r2, [r2, #8]
 80017ca:	2102      	movs	r1, #2
 80017cc:	430a      	orrs	r2, r1
 80017ce:	609a      	str	r2, [r3, #8]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	2203      	movs	r2, #3
 80017d6:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80017d8:	f7ff fc14 	bl	8001004 <HAL_GetTick>
 80017dc:	0003      	movs	r3, r0
 80017de:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80017e0:	e022      	b.n	8001828 <ADC_Disable+0xa8>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017e6:	2210      	movs	r2, #16
 80017e8:	431a      	orrs	r2, r3
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017f2:	2201      	movs	r2, #1
 80017f4:	431a      	orrs	r2, r3
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	e01c      	b.n	8001838 <ADC_Disable+0xb8>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80017fe:	f7ff fc01 	bl	8001004 <HAL_GetTick>
 8001802:	0002      	movs	r2, r0
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	1ad3      	subs	r3, r2, r3
 8001808:	2b0a      	cmp	r3, #10
 800180a:	d90d      	bls.n	8001828 <ADC_Disable+0xa8>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001810:	2210      	movs	r2, #16
 8001812:	431a      	orrs	r2, r3
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800181c:	2201      	movs	r2, #1
 800181e:	431a      	orrs	r2, r3
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 8001824:	2301      	movs	r3, #1
 8001826:	e007      	b.n	8001838 <ADC_Disable+0xb8>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	689b      	ldr	r3, [r3, #8]
 800182e:	2201      	movs	r2, #1
 8001830:	4013      	ands	r3, r2
 8001832:	2b01      	cmp	r3, #1
 8001834:	d0e3      	beq.n	80017fe <ADC_Disable+0x7e>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001836:	2300      	movs	r3, #0
}
 8001838:	0018      	movs	r0, r3
 800183a:	46bd      	mov	sp, r7
 800183c:	b004      	add	sp, #16
 800183e:	bd80      	pop	{r7, pc}

08001840 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b084      	sub	sp, #16
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001848:	2300      	movs	r3, #0
 800184a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	2204      	movs	r2, #4
 8001854:	4013      	ands	r3, r2
 8001856:	d034      	beq.n	80018c2 <ADC_ConversionStop+0x82>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	2204      	movs	r2, #4
 8001860:	4013      	ands	r3, r2
 8001862:	2b04      	cmp	r3, #4
 8001864:	d10d      	bne.n	8001882 <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	2202      	movs	r2, #2
 800186e:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8001870:	d107      	bne.n	8001882 <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	687a      	ldr	r2, [r7, #4]
 8001878:	6812      	ldr	r2, [r2, #0]
 800187a:	6892      	ldr	r2, [r2, #8]
 800187c:	2110      	movs	r1, #16
 800187e:	430a      	orrs	r2, r1
 8001880:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001882:	f7ff fbbf 	bl	8001004 <HAL_GetTick>
 8001886:	0003      	movs	r3, r0
 8001888:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 800188a:	e014      	b.n	80018b6 <ADC_ConversionStop+0x76>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800188c:	f7ff fbba 	bl	8001004 <HAL_GetTick>
 8001890:	0002      	movs	r2, r0
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	2b0a      	cmp	r3, #10
 8001898:	d90d      	bls.n	80018b6 <ADC_ConversionStop+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800189e:	2210      	movs	r2, #16
 80018a0:	431a      	orrs	r2, r3
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	655a      	str	r2, [r3, #84]	; 0x54
      
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018aa:	2201      	movs	r2, #1
 80018ac:	431a      	orrs	r2, r3
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e006      	b.n	80018c4 <ADC_ConversionStop+0x84>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	2204      	movs	r2, #4
 80018be:	4013      	ands	r3, r2
 80018c0:	d1e4      	bne.n	800188c <ADC_ConversionStop+0x4c>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 80018c2:	2300      	movs	r3, #0
}
 80018c4:	0018      	movs	r0, r3
 80018c6:	46bd      	mov	sp, r7
 80018c8:	b004      	add	sp, #16
 80018ca:	bd80      	pop	{r7, pc}

080018cc <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b084      	sub	sp, #16
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 80018d4:	4b0a      	ldr	r3, [pc, #40]	; (8001900 <ADC_DelayMicroSecond+0x34>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	490a      	ldr	r1, [pc, #40]	; (8001904 <ADC_DelayMicroSecond+0x38>)
 80018da:	0018      	movs	r0, r3
 80018dc:	f7fe fc14 	bl	8000108 <__udivsi3>
 80018e0:	0003      	movs	r3, r0
 80018e2:	001a      	movs	r2, r3
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	4353      	muls	r3, r2
 80018e8:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 80018ea:	e002      	b.n	80018f2 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	3b01      	subs	r3, #1
 80018f0:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d1f9      	bne.n	80018ec <ADC_DelayMicroSecond+0x20>
  } 
}
 80018f8:	46c0      	nop			; (mov r8, r8)
 80018fa:	46bd      	mov	sp, r7
 80018fc:	b004      	add	sp, #16
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	20000000 	.word	0x20000000
 8001904:	000f4240 	.word	0x000f4240

08001908 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	0002      	movs	r2, r0
 8001910:	1dfb      	adds	r3, r7, #7
 8001912:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001914:	1dfb      	adds	r3, r7, #7
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	2b7f      	cmp	r3, #127	; 0x7f
 800191a:	d809      	bhi.n	8001930 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800191c:	4b06      	ldr	r3, [pc, #24]	; (8001938 <__NVIC_EnableIRQ+0x30>)
 800191e:	1dfa      	adds	r2, r7, #7
 8001920:	7812      	ldrb	r2, [r2, #0]
 8001922:	0011      	movs	r1, r2
 8001924:	221f      	movs	r2, #31
 8001926:	400a      	ands	r2, r1
 8001928:	2101      	movs	r1, #1
 800192a:	4091      	lsls	r1, r2
 800192c:	000a      	movs	r2, r1
 800192e:	601a      	str	r2, [r3, #0]
  }
}
 8001930:	46c0      	nop			; (mov r8, r8)
 8001932:	46bd      	mov	sp, r7
 8001934:	b002      	add	sp, #8
 8001936:	bd80      	pop	{r7, pc}
 8001938:	e000e100 	.word	0xe000e100

0800193c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800193c:	b5b0      	push	{r4, r5, r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0
 8001942:	0002      	movs	r2, r0
 8001944:	6039      	str	r1, [r7, #0]
 8001946:	1dfb      	adds	r3, r7, #7
 8001948:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800194a:	1dfb      	adds	r3, r7, #7
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	2b7f      	cmp	r3, #127	; 0x7f
 8001950:	d828      	bhi.n	80019a4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001952:	4c2f      	ldr	r4, [pc, #188]	; (8001a10 <__NVIC_SetPriority+0xd4>)
 8001954:	1dfb      	adds	r3, r7, #7
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	b25b      	sxtb	r3, r3
 800195a:	089b      	lsrs	r3, r3, #2
 800195c:	492c      	ldr	r1, [pc, #176]	; (8001a10 <__NVIC_SetPriority+0xd4>)
 800195e:	1dfa      	adds	r2, r7, #7
 8001960:	7812      	ldrb	r2, [r2, #0]
 8001962:	b252      	sxtb	r2, r2
 8001964:	0892      	lsrs	r2, r2, #2
 8001966:	32c0      	adds	r2, #192	; 0xc0
 8001968:	0092      	lsls	r2, r2, #2
 800196a:	5852      	ldr	r2, [r2, r1]
 800196c:	1df9      	adds	r1, r7, #7
 800196e:	7809      	ldrb	r1, [r1, #0]
 8001970:	0008      	movs	r0, r1
 8001972:	2103      	movs	r1, #3
 8001974:	4001      	ands	r1, r0
 8001976:	00c9      	lsls	r1, r1, #3
 8001978:	20ff      	movs	r0, #255	; 0xff
 800197a:	4088      	lsls	r0, r1
 800197c:	0001      	movs	r1, r0
 800197e:	43c9      	mvns	r1, r1
 8001980:	4011      	ands	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001982:	683a      	ldr	r2, [r7, #0]
 8001984:	0192      	lsls	r2, r2, #6
 8001986:	20ff      	movs	r0, #255	; 0xff
 8001988:	4010      	ands	r0, r2
 800198a:	1dfa      	adds	r2, r7, #7
 800198c:	7812      	ldrb	r2, [r2, #0]
 800198e:	0015      	movs	r5, r2
 8001990:	2203      	movs	r2, #3
 8001992:	402a      	ands	r2, r5
 8001994:	00d2      	lsls	r2, r2, #3
 8001996:	4090      	lsls	r0, r2
 8001998:	0002      	movs	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800199a:	430a      	orrs	r2, r1
 800199c:	33c0      	adds	r3, #192	; 0xc0
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	511a      	str	r2, [r3, r4]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80019a2:	e031      	b.n	8001a08 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80019a4:	4c1b      	ldr	r4, [pc, #108]	; (8001a14 <__NVIC_SetPriority+0xd8>)
 80019a6:	1dfb      	adds	r3, r7, #7
 80019a8:	781b      	ldrb	r3, [r3, #0]
 80019aa:	001a      	movs	r2, r3
 80019ac:	230f      	movs	r3, #15
 80019ae:	4013      	ands	r3, r2
 80019b0:	3b08      	subs	r3, #8
 80019b2:	0899      	lsrs	r1, r3, #2
 80019b4:	4a17      	ldr	r2, [pc, #92]	; (8001a14 <__NVIC_SetPriority+0xd8>)
 80019b6:	1dfb      	adds	r3, r7, #7
 80019b8:	781b      	ldrb	r3, [r3, #0]
 80019ba:	0018      	movs	r0, r3
 80019bc:	230f      	movs	r3, #15
 80019be:	4003      	ands	r3, r0
 80019c0:	3b08      	subs	r3, #8
 80019c2:	089b      	lsrs	r3, r3, #2
 80019c4:	3306      	adds	r3, #6
 80019c6:	009b      	lsls	r3, r3, #2
 80019c8:	18d3      	adds	r3, r2, r3
 80019ca:	3304      	adds	r3, #4
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	1dfa      	adds	r2, r7, #7
 80019d0:	7812      	ldrb	r2, [r2, #0]
 80019d2:	0010      	movs	r0, r2
 80019d4:	2203      	movs	r2, #3
 80019d6:	4002      	ands	r2, r0
 80019d8:	00d2      	lsls	r2, r2, #3
 80019da:	20ff      	movs	r0, #255	; 0xff
 80019dc:	4090      	lsls	r0, r2
 80019de:	0002      	movs	r2, r0
 80019e0:	43d2      	mvns	r2, r2
 80019e2:	401a      	ands	r2, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	019b      	lsls	r3, r3, #6
 80019e8:	20ff      	movs	r0, #255	; 0xff
 80019ea:	4018      	ands	r0, r3
 80019ec:	1dfb      	adds	r3, r7, #7
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	001d      	movs	r5, r3
 80019f2:	2303      	movs	r3, #3
 80019f4:	402b      	ands	r3, r5
 80019f6:	00db      	lsls	r3, r3, #3
 80019f8:	4098      	lsls	r0, r3
 80019fa:	0003      	movs	r3, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80019fc:	431a      	orrs	r2, r3
 80019fe:	1d8b      	adds	r3, r1, #6
 8001a00:	009b      	lsls	r3, r3, #2
 8001a02:	18e3      	adds	r3, r4, r3
 8001a04:	3304      	adds	r3, #4
 8001a06:	601a      	str	r2, [r3, #0]
}
 8001a08:	46c0      	nop			; (mov r8, r8)
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	b002      	add	sp, #8
 8001a0e:	bdb0      	pop	{r4, r5, r7, pc}
 8001a10:	e000e100 	.word	0xe000e100
 8001a14:	e000ed00 	.word	0xe000ed00

08001a18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	3b01      	subs	r3, #1
 8001a24:	4a0c      	ldr	r2, [pc, #48]	; (8001a58 <SysTick_Config+0x40>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d901      	bls.n	8001a2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e010      	b.n	8001a50 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a2e:	4b0b      	ldr	r3, [pc, #44]	; (8001a5c <SysTick_Config+0x44>)
 8001a30:	687a      	ldr	r2, [r7, #4]
 8001a32:	3a01      	subs	r2, #1
 8001a34:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a36:	2301      	movs	r3, #1
 8001a38:	425b      	negs	r3, r3
 8001a3a:	2103      	movs	r1, #3
 8001a3c:	0018      	movs	r0, r3
 8001a3e:	f7ff ff7d 	bl	800193c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a42:	4b06      	ldr	r3, [pc, #24]	; (8001a5c <SysTick_Config+0x44>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a48:	4b04      	ldr	r3, [pc, #16]	; (8001a5c <SysTick_Config+0x44>)
 8001a4a:	2207      	movs	r2, #7
 8001a4c:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a4e:	2300      	movs	r3, #0
}
 8001a50:	0018      	movs	r0, r3
 8001a52:	46bd      	mov	sp, r7
 8001a54:	b002      	add	sp, #8
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	00ffffff 	.word	0x00ffffff
 8001a5c:	e000e010 	.word	0xe000e010

08001a60 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b084      	sub	sp, #16
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	60b9      	str	r1, [r7, #8]
 8001a68:	607a      	str	r2, [r7, #4]
 8001a6a:	230f      	movs	r3, #15
 8001a6c:	18fb      	adds	r3, r7, r3
 8001a6e:	1c02      	adds	r2, r0, #0
 8001a70:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001a72:	68ba      	ldr	r2, [r7, #8]
 8001a74:	230f      	movs	r3, #15
 8001a76:	18fb      	adds	r3, r7, r3
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	b25b      	sxtb	r3, r3
 8001a7c:	0011      	movs	r1, r2
 8001a7e:	0018      	movs	r0, r3
 8001a80:	f7ff ff5c 	bl	800193c <__NVIC_SetPriority>
}
 8001a84:	46c0      	nop			; (mov r8, r8)
 8001a86:	46bd      	mov	sp, r7
 8001a88:	b004      	add	sp, #16
 8001a8a:	bd80      	pop	{r7, pc}

08001a8c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b082      	sub	sp, #8
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	0002      	movs	r2, r0
 8001a94:	1dfb      	adds	r3, r7, #7
 8001a96:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a98:	1dfb      	adds	r3, r7, #7
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	b25b      	sxtb	r3, r3
 8001a9e:	0018      	movs	r0, r3
 8001aa0:	f7ff ff32 	bl	8001908 <__NVIC_EnableIRQ>
}
 8001aa4:	46c0      	nop			; (mov r8, r8)
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	b002      	add	sp, #8
 8001aaa:	bd80      	pop	{r7, pc}

08001aac <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	0018      	movs	r0, r3
 8001ab8:	f7ff ffae 	bl	8001a18 <SysTick_Config>
 8001abc:	0003      	movs	r3, r0
}
 8001abe:	0018      	movs	r0, r3
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	b002      	add	sp, #8
 8001ac4:	bd80      	pop	{r7, pc}

08001ac6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001ac6:	b580      	push	{r7, lr}
 8001ac8:	b084      	sub	sp, #16
 8001aca:	af00      	add	r7, sp, #0
 8001acc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ace:	230f      	movs	r3, #15
 8001ad0:	18fb      	adds	r3, r7, r3
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2225      	movs	r2, #37	; 0x25
 8001ada:	5c9b      	ldrb	r3, [r3, r2]
 8001adc:	b2db      	uxtb	r3, r3
 8001ade:	2b02      	cmp	r3, #2
 8001ae0:	d008      	beq.n	8001af4 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2204      	movs	r2, #4
 8001ae6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2224      	movs	r2, #36	; 0x24
 8001aec:	2100      	movs	r1, #0
 8001aee:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
 8001af2:	e024      	b.n	8001b3e <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	687a      	ldr	r2, [r7, #4]
 8001afa:	6812      	ldr	r2, [r2, #0]
 8001afc:	6812      	ldr	r2, [r2, #0]
 8001afe:	210e      	movs	r1, #14
 8001b00:	438a      	bics	r2, r1
 8001b02:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	687a      	ldr	r2, [r7, #4]
 8001b0a:	6812      	ldr	r2, [r2, #0]
 8001b0c:	6812      	ldr	r2, [r2, #0]
 8001b0e:	2101      	movs	r1, #1
 8001b10:	438a      	bics	r2, r1
 8001b12:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b18:	687a      	ldr	r2, [r7, #4]
 8001b1a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001b1c:	211c      	movs	r1, #28
 8001b1e:	400a      	ands	r2, r1
 8001b20:	2101      	movs	r1, #1
 8001b22:	4091      	lsls	r1, r2
 8001b24:	000a      	movs	r2, r1
 8001b26:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2225      	movs	r2, #37	; 0x25
 8001b2c:	2101      	movs	r1, #1
 8001b2e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2224      	movs	r2, #36	; 0x24
 8001b34:	2100      	movs	r1, #0
 8001b36:	5499      	strb	r1, [r3, r2]

    return status;
 8001b38:	230f      	movs	r3, #15
 8001b3a:	18fb      	adds	r3, r7, r3
 8001b3c:	781b      	ldrb	r3, [r3, #0]
  }
}
 8001b3e:	0018      	movs	r0, r3
 8001b40:	46bd      	mov	sp, r7
 8001b42:	b004      	add	sp, #16
 8001b44:	bd80      	pop	{r7, pc}

08001b46 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001b46:	b580      	push	{r7, lr}
 8001b48:	b084      	sub	sp, #16
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b4e:	230f      	movs	r3, #15
 8001b50:	18fb      	adds	r3, r7, r3
 8001b52:	2200      	movs	r2, #0
 8001b54:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2225      	movs	r2, #37	; 0x25
 8001b5a:	5c9b      	ldrb	r3, [r3, r2]
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	2b02      	cmp	r3, #2
 8001b60:	d007      	beq.n	8001b72 <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2204      	movs	r2, #4
 8001b66:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001b68:	230f      	movs	r3, #15
 8001b6a:	18fb      	adds	r3, r7, r3
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	701a      	strb	r2, [r3, #0]
 8001b70:	e02a      	b.n	8001bc8 <HAL_DMA_Abort_IT+0x82>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	687a      	ldr	r2, [r7, #4]
 8001b78:	6812      	ldr	r2, [r2, #0]
 8001b7a:	6812      	ldr	r2, [r2, #0]
 8001b7c:	210e      	movs	r1, #14
 8001b7e:	438a      	bics	r2, r1
 8001b80:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	687a      	ldr	r2, [r7, #4]
 8001b88:	6812      	ldr	r2, [r2, #0]
 8001b8a:	6812      	ldr	r2, [r2, #0]
 8001b8c:	2101      	movs	r1, #1
 8001b8e:	438a      	bics	r2, r1
 8001b90:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b96:	687a      	ldr	r2, [r7, #4]
 8001b98:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001b9a:	211c      	movs	r1, #28
 8001b9c:	400a      	ands	r2, r1
 8001b9e:	2101      	movs	r1, #1
 8001ba0:	4091      	lsls	r1, r2
 8001ba2:	000a      	movs	r2, r1
 8001ba4:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2225      	movs	r2, #37	; 0x25
 8001baa:	2101      	movs	r1, #1
 8001bac:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2224      	movs	r2, #36	; 0x24
 8001bb2:	2100      	movs	r1, #0
 8001bb4:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d004      	beq.n	8001bc8 <HAL_DMA_Abort_IT+0x82>
    {
      hdma->XferAbortCallback(hdma);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bc2:	687a      	ldr	r2, [r7, #4]
 8001bc4:	0010      	movs	r0, r2
 8001bc6:	4798      	blx	r3
    }
  }
  return status;
 8001bc8:	230f      	movs	r3, #15
 8001bca:	18fb      	adds	r3, r7, r3
 8001bcc:	781b      	ldrb	r3, [r3, #0]
}
 8001bce:	0018      	movs	r0, r3
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	b004      	add	sp, #16
 8001bd4:	bd80      	pop	{r7, pc}
	...

08001bd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b086      	sub	sp, #24
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
 8001be0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001be2:	2300      	movs	r3, #0
 8001be4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001be6:	2300      	movs	r3, #0
 8001be8:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001bea:	2300      	movs	r3, #0
 8001bec:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001bee:	e14f      	b.n	8001e90 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	2101      	movs	r1, #1
 8001bf6:	697a      	ldr	r2, [r7, #20]
 8001bf8:	4091      	lsls	r1, r2
 8001bfa:	000a      	movs	r2, r1
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d100      	bne.n	8001c08 <HAL_GPIO_Init+0x30>
 8001c06:	e140      	b.n	8001e8a <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	d00b      	beq.n	8001c28 <HAL_GPIO_Init+0x50>
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	2b02      	cmp	r3, #2
 8001c16:	d007      	beq.n	8001c28 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c1c:	2b11      	cmp	r3, #17
 8001c1e:	d003      	beq.n	8001c28 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	2b12      	cmp	r3, #18
 8001c26:	d130      	bne.n	8001c8a <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	005b      	lsls	r3, r3, #1
 8001c32:	2203      	movs	r2, #3
 8001c34:	409a      	lsls	r2, r3
 8001c36:	0013      	movs	r3, r2
 8001c38:	43da      	mvns	r2, r3
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	68da      	ldr	r2, [r3, #12]
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	005b      	lsls	r3, r3, #1
 8001c48:	409a      	lsls	r2, r3
 8001c4a:	0013      	movs	r3, r2
 8001c4c:	693a      	ldr	r2, [r7, #16]
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	693a      	ldr	r2, [r7, #16]
 8001c56:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c5e:	2201      	movs	r2, #1
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	409a      	lsls	r2, r3
 8001c64:	0013      	movs	r3, r2
 8001c66:	43da      	mvns	r2, r3
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	091b      	lsrs	r3, r3, #4
 8001c74:	2201      	movs	r2, #1
 8001c76:	401a      	ands	r2, r3
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	409a      	lsls	r2, r3
 8001c7c:	0013      	movs	r3, r2
 8001c7e:	693a      	ldr	r2, [r7, #16]
 8001c80:	4313      	orrs	r3, r2
 8001c82:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	693a      	ldr	r2, [r7, #16]
 8001c88:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	68db      	ldr	r3, [r3, #12]
 8001c8e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	005b      	lsls	r3, r3, #1
 8001c94:	2203      	movs	r2, #3
 8001c96:	409a      	lsls	r2, r3
 8001c98:	0013      	movs	r3, r2
 8001c9a:	43da      	mvns	r2, r3
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	689a      	ldr	r2, [r3, #8]
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	005b      	lsls	r3, r3, #1
 8001caa:	409a      	lsls	r2, r3
 8001cac:	0013      	movs	r3, r2
 8001cae:	693a      	ldr	r2, [r7, #16]
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	693a      	ldr	r2, [r7, #16]
 8001cb8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	2b02      	cmp	r3, #2
 8001cc0:	d003      	beq.n	8001cca <HAL_GPIO_Init+0xf2>
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	2b12      	cmp	r3, #18
 8001cc8:	d123      	bne.n	8001d12 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	08da      	lsrs	r2, r3, #3
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	3208      	adds	r2, #8
 8001cd2:	0092      	lsls	r2, r2, #2
 8001cd4:	58d3      	ldr	r3, [r2, r3]
 8001cd6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	2207      	movs	r2, #7
 8001cdc:	4013      	ands	r3, r2
 8001cde:	009b      	lsls	r3, r3, #2
 8001ce0:	220f      	movs	r2, #15
 8001ce2:	409a      	lsls	r2, r3
 8001ce4:	0013      	movs	r3, r2
 8001ce6:	43da      	mvns	r2, r3
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	4013      	ands	r3, r2
 8001cec:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	691a      	ldr	r2, [r3, #16]
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	2107      	movs	r1, #7
 8001cf6:	400b      	ands	r3, r1
 8001cf8:	009b      	lsls	r3, r3, #2
 8001cfa:	409a      	lsls	r2, r3
 8001cfc:	0013      	movs	r3, r2
 8001cfe:	693a      	ldr	r2, [r7, #16]
 8001d00:	4313      	orrs	r3, r2
 8001d02:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	08da      	lsrs	r2, r3, #3
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	3208      	adds	r2, #8
 8001d0c:	0092      	lsls	r2, r2, #2
 8001d0e:	6939      	ldr	r1, [r7, #16]
 8001d10:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	005b      	lsls	r3, r3, #1
 8001d1c:	2203      	movs	r2, #3
 8001d1e:	409a      	lsls	r2, r3
 8001d20:	0013      	movs	r3, r2
 8001d22:	43da      	mvns	r2, r3
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	4013      	ands	r3, r2
 8001d28:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	2203      	movs	r2, #3
 8001d30:	401a      	ands	r2, r3
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	005b      	lsls	r3, r3, #1
 8001d36:	409a      	lsls	r2, r3
 8001d38:	0013      	movs	r3, r2
 8001d3a:	693a      	ldr	r2, [r7, #16]
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	693a      	ldr	r2, [r7, #16]
 8001d44:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	685a      	ldr	r2, [r3, #4]
 8001d4a:	2380      	movs	r3, #128	; 0x80
 8001d4c:	055b      	lsls	r3, r3, #21
 8001d4e:	4013      	ands	r3, r2
 8001d50:	d100      	bne.n	8001d54 <HAL_GPIO_Init+0x17c>
 8001d52:	e09a      	b.n	8001e8a <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d54:	4b54      	ldr	r3, [pc, #336]	; (8001ea8 <HAL_GPIO_Init+0x2d0>)
 8001d56:	4a54      	ldr	r2, [pc, #336]	; (8001ea8 <HAL_GPIO_Init+0x2d0>)
 8001d58:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001d5a:	2101      	movs	r1, #1
 8001d5c:	430a      	orrs	r2, r1
 8001d5e:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d60:	4a52      	ldr	r2, [pc, #328]	; (8001eac <HAL_GPIO_Init+0x2d4>)
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	089b      	lsrs	r3, r3, #2
 8001d66:	3302      	adds	r3, #2
 8001d68:	009b      	lsls	r3, r3, #2
 8001d6a:	589b      	ldr	r3, [r3, r2]
 8001d6c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	2203      	movs	r2, #3
 8001d72:	4013      	ands	r3, r2
 8001d74:	009b      	lsls	r3, r3, #2
 8001d76:	220f      	movs	r2, #15
 8001d78:	409a      	lsls	r2, r3
 8001d7a:	0013      	movs	r3, r2
 8001d7c:	43da      	mvns	r2, r3
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	4013      	ands	r3, r2
 8001d82:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001d84:	687a      	ldr	r2, [r7, #4]
 8001d86:	23a0      	movs	r3, #160	; 0xa0
 8001d88:	05db      	lsls	r3, r3, #23
 8001d8a:	429a      	cmp	r2, r3
 8001d8c:	d019      	beq.n	8001dc2 <HAL_GPIO_Init+0x1ea>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	4a47      	ldr	r2, [pc, #284]	; (8001eb0 <HAL_GPIO_Init+0x2d8>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d013      	beq.n	8001dbe <HAL_GPIO_Init+0x1e6>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	4a46      	ldr	r2, [pc, #280]	; (8001eb4 <HAL_GPIO_Init+0x2dc>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d00d      	beq.n	8001dba <HAL_GPIO_Init+0x1e2>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	4a45      	ldr	r2, [pc, #276]	; (8001eb8 <HAL_GPIO_Init+0x2e0>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d007      	beq.n	8001db6 <HAL_GPIO_Init+0x1de>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	4a44      	ldr	r2, [pc, #272]	; (8001ebc <HAL_GPIO_Init+0x2e4>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d101      	bne.n	8001db2 <HAL_GPIO_Init+0x1da>
 8001dae:	2305      	movs	r3, #5
 8001db0:	e008      	b.n	8001dc4 <HAL_GPIO_Init+0x1ec>
 8001db2:	2306      	movs	r3, #6
 8001db4:	e006      	b.n	8001dc4 <HAL_GPIO_Init+0x1ec>
 8001db6:	2303      	movs	r3, #3
 8001db8:	e004      	b.n	8001dc4 <HAL_GPIO_Init+0x1ec>
 8001dba:	2302      	movs	r3, #2
 8001dbc:	e002      	b.n	8001dc4 <HAL_GPIO_Init+0x1ec>
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e000      	b.n	8001dc4 <HAL_GPIO_Init+0x1ec>
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	697a      	ldr	r2, [r7, #20]
 8001dc6:	2103      	movs	r1, #3
 8001dc8:	400a      	ands	r2, r1
 8001dca:	0092      	lsls	r2, r2, #2
 8001dcc:	4093      	lsls	r3, r2
 8001dce:	693a      	ldr	r2, [r7, #16]
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001dd4:	4935      	ldr	r1, [pc, #212]	; (8001eac <HAL_GPIO_Init+0x2d4>)
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	089b      	lsrs	r3, r3, #2
 8001dda:	3302      	adds	r3, #2
 8001ddc:	009b      	lsls	r3, r3, #2
 8001dde:	693a      	ldr	r2, [r7, #16]
 8001de0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001de2:	4b37      	ldr	r3, [pc, #220]	; (8001ec0 <HAL_GPIO_Init+0x2e8>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	43da      	mvns	r2, r3
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	4013      	ands	r3, r2
 8001df0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	685a      	ldr	r2, [r3, #4]
 8001df6:	2380      	movs	r3, #128	; 0x80
 8001df8:	025b      	lsls	r3, r3, #9
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	d003      	beq.n	8001e06 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8001dfe:	693a      	ldr	r2, [r7, #16]
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	4313      	orrs	r3, r2
 8001e04:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001e06:	4b2e      	ldr	r3, [pc, #184]	; (8001ec0 <HAL_GPIO_Init+0x2e8>)
 8001e08:	693a      	ldr	r2, [r7, #16]
 8001e0a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001e0c:	4b2c      	ldr	r3, [pc, #176]	; (8001ec0 <HAL_GPIO_Init+0x2e8>)
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	43da      	mvns	r2, r3
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	4013      	ands	r3, r2
 8001e1a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	685a      	ldr	r2, [r3, #4]
 8001e20:	2380      	movs	r3, #128	; 0x80
 8001e22:	029b      	lsls	r3, r3, #10
 8001e24:	4013      	ands	r3, r2
 8001e26:	d003      	beq.n	8001e30 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8001e28:	693a      	ldr	r2, [r7, #16]
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001e30:	4b23      	ldr	r3, [pc, #140]	; (8001ec0 <HAL_GPIO_Init+0x2e8>)
 8001e32:	693a      	ldr	r2, [r7, #16]
 8001e34:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e36:	4b22      	ldr	r3, [pc, #136]	; (8001ec0 <HAL_GPIO_Init+0x2e8>)
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	43da      	mvns	r2, r3
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	4013      	ands	r3, r2
 8001e44:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	685a      	ldr	r2, [r3, #4]
 8001e4a:	2380      	movs	r3, #128	; 0x80
 8001e4c:	035b      	lsls	r3, r3, #13
 8001e4e:	4013      	ands	r3, r2
 8001e50:	d003      	beq.n	8001e5a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001e52:	693a      	ldr	r2, [r7, #16]
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	4313      	orrs	r3, r2
 8001e58:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001e5a:	4b19      	ldr	r3, [pc, #100]	; (8001ec0 <HAL_GPIO_Init+0x2e8>)
 8001e5c:	693a      	ldr	r2, [r7, #16]
 8001e5e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001e60:	4b17      	ldr	r3, [pc, #92]	; (8001ec0 <HAL_GPIO_Init+0x2e8>)
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	43da      	mvns	r2, r3
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	685a      	ldr	r2, [r3, #4]
 8001e74:	2380      	movs	r3, #128	; 0x80
 8001e76:	039b      	lsls	r3, r3, #14
 8001e78:	4013      	ands	r3, r2
 8001e7a:	d003      	beq.n	8001e84 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001e7c:	693a      	ldr	r2, [r7, #16]
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	4313      	orrs	r3, r2
 8001e82:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001e84:	4b0e      	ldr	r3, [pc, #56]	; (8001ec0 <HAL_GPIO_Init+0x2e8>)
 8001e86:	693a      	ldr	r2, [r7, #16]
 8001e88:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	3301      	adds	r3, #1
 8001e8e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	40da      	lsrs	r2, r3
 8001e98:	1e13      	subs	r3, r2, #0
 8001e9a:	d000      	beq.n	8001e9e <HAL_GPIO_Init+0x2c6>
 8001e9c:	e6a8      	b.n	8001bf0 <HAL_GPIO_Init+0x18>
  }
}
 8001e9e:	46c0      	nop			; (mov r8, r8)
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	b006      	add	sp, #24
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	46c0      	nop			; (mov r8, r8)
 8001ea8:	40021000 	.word	0x40021000
 8001eac:	40010000 	.word	0x40010000
 8001eb0:	50000400 	.word	0x50000400
 8001eb4:	50000800 	.word	0x50000800
 8001eb8:	50000c00 	.word	0x50000c00
 8001ebc:	50001c00 	.word	0x50001c00
 8001ec0:	40010400 	.word	0x40010400

08001ec4 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b082      	sub	sp, #8
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
 8001ecc:	0008      	movs	r0, r1
 8001ece:	0011      	movs	r1, r2
 8001ed0:	1cbb      	adds	r3, r7, #2
 8001ed2:	1c02      	adds	r2, r0, #0
 8001ed4:	801a      	strh	r2, [r3, #0]
 8001ed6:	1c7b      	adds	r3, r7, #1
 8001ed8:	1c0a      	adds	r2, r1, #0
 8001eda:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001edc:	1c7b      	adds	r3, r7, #1
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d004      	beq.n	8001eee <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ee4:	1cbb      	adds	r3, r7, #2
 8001ee6:	881a      	ldrh	r2, [r3, #0]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001eec:	e003      	b.n	8001ef6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001eee:	1cbb      	adds	r3, r7, #2
 8001ef0:	881a      	ldrh	r2, [r3, #0]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001ef6:	46c0      	nop			; (mov r8, r8)
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	b002      	add	sp, #8
 8001efc:	bd80      	pop	{r7, pc}
	...

08001f00 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f00:	b590      	push	{r4, r7, lr}
 8001f02:	b08b      	sub	sp, #44	; 0x2c
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d102      	bne.n	8001f14 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	f000 fb5a 	bl	80025c8 <HAL_RCC_OscConfig+0x6c8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f14:	4bce      	ldr	r3, [pc, #824]	; (8002250 <HAL_RCC_OscConfig+0x350>)
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	220c      	movs	r2, #12
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f1e:	4bcc      	ldr	r3, [pc, #816]	; (8002250 <HAL_RCC_OscConfig+0x350>)
 8001f20:	68da      	ldr	r2, [r3, #12]
 8001f22:	2380      	movs	r3, #128	; 0x80
 8001f24:	025b      	lsls	r3, r3, #9
 8001f26:	4013      	ands	r3, r2
 8001f28:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	2201      	movs	r2, #1
 8001f30:	4013      	ands	r3, r2
 8001f32:	d100      	bne.n	8001f36 <HAL_RCC_OscConfig+0x36>
 8001f34:	e07c      	b.n	8002030 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f36:	6a3b      	ldr	r3, [r7, #32]
 8001f38:	2b08      	cmp	r3, #8
 8001f3a:	d007      	beq.n	8001f4c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001f3c:	6a3b      	ldr	r3, [r7, #32]
 8001f3e:	2b0c      	cmp	r3, #12
 8001f40:	d111      	bne.n	8001f66 <HAL_RCC_OscConfig+0x66>
 8001f42:	69fa      	ldr	r2, [r7, #28]
 8001f44:	2380      	movs	r3, #128	; 0x80
 8001f46:	025b      	lsls	r3, r3, #9
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d10c      	bne.n	8001f66 <HAL_RCC_OscConfig+0x66>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f4c:	4bc0      	ldr	r3, [pc, #768]	; (8002250 <HAL_RCC_OscConfig+0x350>)
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	2380      	movs	r3, #128	; 0x80
 8001f52:	029b      	lsls	r3, r3, #10
 8001f54:	4013      	ands	r3, r2
 8001f56:	d100      	bne.n	8001f5a <HAL_RCC_OscConfig+0x5a>
 8001f58:	e069      	b.n	800202e <HAL_RCC_OscConfig+0x12e>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d165      	bne.n	800202e <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	e330      	b.n	80025c8 <HAL_RCC_OscConfig+0x6c8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	685a      	ldr	r2, [r3, #4]
 8001f6a:	2380      	movs	r3, #128	; 0x80
 8001f6c:	025b      	lsls	r3, r3, #9
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	d107      	bne.n	8001f82 <HAL_RCC_OscConfig+0x82>
 8001f72:	4bb7      	ldr	r3, [pc, #732]	; (8002250 <HAL_RCC_OscConfig+0x350>)
 8001f74:	4ab6      	ldr	r2, [pc, #728]	; (8002250 <HAL_RCC_OscConfig+0x350>)
 8001f76:	6812      	ldr	r2, [r2, #0]
 8001f78:	2180      	movs	r1, #128	; 0x80
 8001f7a:	0249      	lsls	r1, r1, #9
 8001f7c:	430a      	orrs	r2, r1
 8001f7e:	601a      	str	r2, [r3, #0]
 8001f80:	e027      	b.n	8001fd2 <HAL_RCC_OscConfig+0xd2>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	685a      	ldr	r2, [r3, #4]
 8001f86:	23a0      	movs	r3, #160	; 0xa0
 8001f88:	02db      	lsls	r3, r3, #11
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	d10e      	bne.n	8001fac <HAL_RCC_OscConfig+0xac>
 8001f8e:	4bb0      	ldr	r3, [pc, #704]	; (8002250 <HAL_RCC_OscConfig+0x350>)
 8001f90:	4aaf      	ldr	r2, [pc, #700]	; (8002250 <HAL_RCC_OscConfig+0x350>)
 8001f92:	6812      	ldr	r2, [r2, #0]
 8001f94:	2180      	movs	r1, #128	; 0x80
 8001f96:	02c9      	lsls	r1, r1, #11
 8001f98:	430a      	orrs	r2, r1
 8001f9a:	601a      	str	r2, [r3, #0]
 8001f9c:	4bac      	ldr	r3, [pc, #688]	; (8002250 <HAL_RCC_OscConfig+0x350>)
 8001f9e:	4aac      	ldr	r2, [pc, #688]	; (8002250 <HAL_RCC_OscConfig+0x350>)
 8001fa0:	6812      	ldr	r2, [r2, #0]
 8001fa2:	2180      	movs	r1, #128	; 0x80
 8001fa4:	0249      	lsls	r1, r1, #9
 8001fa6:	430a      	orrs	r2, r1
 8001fa8:	601a      	str	r2, [r3, #0]
 8001faa:	e012      	b.n	8001fd2 <HAL_RCC_OscConfig+0xd2>
 8001fac:	4ba8      	ldr	r3, [pc, #672]	; (8002250 <HAL_RCC_OscConfig+0x350>)
 8001fae:	4aa8      	ldr	r2, [pc, #672]	; (8002250 <HAL_RCC_OscConfig+0x350>)
 8001fb0:	6812      	ldr	r2, [r2, #0]
 8001fb2:	49a8      	ldr	r1, [pc, #672]	; (8002254 <HAL_RCC_OscConfig+0x354>)
 8001fb4:	400a      	ands	r2, r1
 8001fb6:	601a      	str	r2, [r3, #0]
 8001fb8:	4ba5      	ldr	r3, [pc, #660]	; (8002250 <HAL_RCC_OscConfig+0x350>)
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	2380      	movs	r3, #128	; 0x80
 8001fbe:	025b      	lsls	r3, r3, #9
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	60fb      	str	r3, [r7, #12]
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	4ba2      	ldr	r3, [pc, #648]	; (8002250 <HAL_RCC_OscConfig+0x350>)
 8001fc8:	4aa1      	ldr	r2, [pc, #644]	; (8002250 <HAL_RCC_OscConfig+0x350>)
 8001fca:	6812      	ldr	r2, [r2, #0]
 8001fcc:	49a2      	ldr	r1, [pc, #648]	; (8002258 <HAL_RCC_OscConfig+0x358>)
 8001fce:	400a      	ands	r2, r1
 8001fd0:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d014      	beq.n	8002004 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fda:	f7ff f813 	bl	8001004 <HAL_GetTick>
 8001fde:	0003      	movs	r3, r0
 8001fe0:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001fe2:	e008      	b.n	8001ff6 <HAL_RCC_OscConfig+0xf6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fe4:	f7ff f80e 	bl	8001004 <HAL_GetTick>
 8001fe8:	0002      	movs	r2, r0
 8001fea:	69bb      	ldr	r3, [r7, #24]
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	2b64      	cmp	r3, #100	; 0x64
 8001ff0:	d901      	bls.n	8001ff6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	e2e8      	b.n	80025c8 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001ff6:	4b96      	ldr	r3, [pc, #600]	; (8002250 <HAL_RCC_OscConfig+0x350>)
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	2380      	movs	r3, #128	; 0x80
 8001ffc:	029b      	lsls	r3, r3, #10
 8001ffe:	4013      	ands	r3, r2
 8002000:	d0f0      	beq.n	8001fe4 <HAL_RCC_OscConfig+0xe4>
 8002002:	e015      	b.n	8002030 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002004:	f7fe fffe 	bl	8001004 <HAL_GetTick>
 8002008:	0003      	movs	r3, r0
 800200a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800200c:	e008      	b.n	8002020 <HAL_RCC_OscConfig+0x120>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800200e:	f7fe fff9 	bl	8001004 <HAL_GetTick>
 8002012:	0002      	movs	r2, r0
 8002014:	69bb      	ldr	r3, [r7, #24]
 8002016:	1ad3      	subs	r3, r2, r3
 8002018:	2b64      	cmp	r3, #100	; 0x64
 800201a:	d901      	bls.n	8002020 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 800201c:	2303      	movs	r3, #3
 800201e:	e2d3      	b.n	80025c8 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002020:	4b8b      	ldr	r3, [pc, #556]	; (8002250 <HAL_RCC_OscConfig+0x350>)
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	2380      	movs	r3, #128	; 0x80
 8002026:	029b      	lsls	r3, r3, #10
 8002028:	4013      	ands	r3, r2
 800202a:	d1f0      	bne.n	800200e <HAL_RCC_OscConfig+0x10e>
 800202c:	e000      	b.n	8002030 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800202e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	2202      	movs	r2, #2
 8002036:	4013      	ands	r3, r2
 8002038:	d100      	bne.n	800203c <HAL_RCC_OscConfig+0x13c>
 800203a:	e08b      	b.n	8002154 <HAL_RCC_OscConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002042:	6a3b      	ldr	r3, [r7, #32]
 8002044:	2b04      	cmp	r3, #4
 8002046:	d005      	beq.n	8002054 <HAL_RCC_OscConfig+0x154>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002048:	6a3b      	ldr	r3, [r7, #32]
 800204a:	2b0c      	cmp	r3, #12
 800204c:	d13f      	bne.n	80020ce <HAL_RCC_OscConfig+0x1ce>
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d13c      	bne.n	80020ce <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8002054:	4b7e      	ldr	r3, [pc, #504]	; (8002250 <HAL_RCC_OscConfig+0x350>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	2204      	movs	r2, #4
 800205a:	4013      	ands	r3, r2
 800205c:	d004      	beq.n	8002068 <HAL_RCC_OscConfig+0x168>
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d101      	bne.n	8002068 <HAL_RCC_OscConfig+0x168>
      {
        return HAL_ERROR;
 8002064:	2301      	movs	r3, #1
 8002066:	e2af      	b.n	80025c8 <HAL_RCC_OscConfig+0x6c8>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002068:	4a79      	ldr	r2, [pc, #484]	; (8002250 <HAL_RCC_OscConfig+0x350>)
 800206a:	4b79      	ldr	r3, [pc, #484]	; (8002250 <HAL_RCC_OscConfig+0x350>)
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	497b      	ldr	r1, [pc, #492]	; (800225c <HAL_RCC_OscConfig+0x35c>)
 8002070:	4019      	ands	r1, r3
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	691b      	ldr	r3, [r3, #16]
 8002076:	021b      	lsls	r3, r3, #8
 8002078:	430b      	orrs	r3, r1
 800207a:	6053      	str	r3, [r2, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800207c:	4b74      	ldr	r3, [pc, #464]	; (8002250 <HAL_RCC_OscConfig+0x350>)
 800207e:	4a74      	ldr	r2, [pc, #464]	; (8002250 <HAL_RCC_OscConfig+0x350>)
 8002080:	6812      	ldr	r2, [r2, #0]
 8002082:	2109      	movs	r1, #9
 8002084:	438a      	bics	r2, r1
 8002086:	0011      	movs	r1, r2
 8002088:	697a      	ldr	r2, [r7, #20]
 800208a:	430a      	orrs	r2, r1
 800208c:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800208e:	f000 fbe9 	bl	8002864 <HAL_RCC_GetSysClockFreq>
 8002092:	0001      	movs	r1, r0
 8002094:	4b6e      	ldr	r3, [pc, #440]	; (8002250 <HAL_RCC_OscConfig+0x350>)
 8002096:	68db      	ldr	r3, [r3, #12]
 8002098:	091b      	lsrs	r3, r3, #4
 800209a:	220f      	movs	r2, #15
 800209c:	4013      	ands	r3, r2
 800209e:	4a70      	ldr	r2, [pc, #448]	; (8002260 <HAL_RCC_OscConfig+0x360>)
 80020a0:	5cd3      	ldrb	r3, [r2, r3]
 80020a2:	000a      	movs	r2, r1
 80020a4:	40da      	lsrs	r2, r3
 80020a6:	4b6f      	ldr	r3, [pc, #444]	; (8002264 <HAL_RCC_OscConfig+0x364>)
 80020a8:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80020aa:	4b6f      	ldr	r3, [pc, #444]	; (8002268 <HAL_RCC_OscConfig+0x368>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	2213      	movs	r2, #19
 80020b0:	18bc      	adds	r4, r7, r2
 80020b2:	0018      	movs	r0, r3
 80020b4:	f7fe ff60 	bl	8000f78 <HAL_InitTick>
 80020b8:	0003      	movs	r3, r0
 80020ba:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80020bc:	2313      	movs	r3, #19
 80020be:	18fb      	adds	r3, r7, r3
 80020c0:	781b      	ldrb	r3, [r3, #0]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d046      	beq.n	8002154 <HAL_RCC_OscConfig+0x254>
      {
        return status;
 80020c6:	2313      	movs	r3, #19
 80020c8:	18fb      	adds	r3, r7, r3
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	e27c      	b.n	80025c8 <HAL_RCC_OscConfig+0x6c8>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d026      	beq.n	8002122 <HAL_RCC_OscConfig+0x222>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80020d4:	4b5e      	ldr	r3, [pc, #376]	; (8002250 <HAL_RCC_OscConfig+0x350>)
 80020d6:	4a5e      	ldr	r2, [pc, #376]	; (8002250 <HAL_RCC_OscConfig+0x350>)
 80020d8:	6812      	ldr	r2, [r2, #0]
 80020da:	2109      	movs	r1, #9
 80020dc:	438a      	bics	r2, r1
 80020de:	0011      	movs	r1, r2
 80020e0:	697a      	ldr	r2, [r7, #20]
 80020e2:	430a      	orrs	r2, r1
 80020e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020e6:	f7fe ff8d 	bl	8001004 <HAL_GetTick>
 80020ea:	0003      	movs	r3, r0
 80020ec:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80020ee:	e008      	b.n	8002102 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020f0:	f7fe ff88 	bl	8001004 <HAL_GetTick>
 80020f4:	0002      	movs	r2, r0
 80020f6:	69bb      	ldr	r3, [r7, #24]
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	2b02      	cmp	r3, #2
 80020fc:	d901      	bls.n	8002102 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 80020fe:	2303      	movs	r3, #3
 8002100:	e262      	b.n	80025c8 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002102:	4b53      	ldr	r3, [pc, #332]	; (8002250 <HAL_RCC_OscConfig+0x350>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	2204      	movs	r2, #4
 8002108:	4013      	ands	r3, r2
 800210a:	d0f1      	beq.n	80020f0 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800210c:	4a50      	ldr	r2, [pc, #320]	; (8002250 <HAL_RCC_OscConfig+0x350>)
 800210e:	4b50      	ldr	r3, [pc, #320]	; (8002250 <HAL_RCC_OscConfig+0x350>)
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	4952      	ldr	r1, [pc, #328]	; (800225c <HAL_RCC_OscConfig+0x35c>)
 8002114:	4019      	ands	r1, r3
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	691b      	ldr	r3, [r3, #16]
 800211a:	021b      	lsls	r3, r3, #8
 800211c:	430b      	orrs	r3, r1
 800211e:	6053      	str	r3, [r2, #4]
 8002120:	e018      	b.n	8002154 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002122:	4b4b      	ldr	r3, [pc, #300]	; (8002250 <HAL_RCC_OscConfig+0x350>)
 8002124:	4a4a      	ldr	r2, [pc, #296]	; (8002250 <HAL_RCC_OscConfig+0x350>)
 8002126:	6812      	ldr	r2, [r2, #0]
 8002128:	2101      	movs	r1, #1
 800212a:	438a      	bics	r2, r1
 800212c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800212e:	f7fe ff69 	bl	8001004 <HAL_GetTick>
 8002132:	0003      	movs	r3, r0
 8002134:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002136:	e008      	b.n	800214a <HAL_RCC_OscConfig+0x24a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002138:	f7fe ff64 	bl	8001004 <HAL_GetTick>
 800213c:	0002      	movs	r2, r0
 800213e:	69bb      	ldr	r3, [r7, #24]
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	2b02      	cmp	r3, #2
 8002144:	d901      	bls.n	800214a <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 8002146:	2303      	movs	r3, #3
 8002148:	e23e      	b.n	80025c8 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800214a:	4b41      	ldr	r3, [pc, #260]	; (8002250 <HAL_RCC_OscConfig+0x350>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	2204      	movs	r2, #4
 8002150:	4013      	ands	r3, r2
 8002152:	d1f1      	bne.n	8002138 <HAL_RCC_OscConfig+0x238>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	2210      	movs	r2, #16
 800215a:	4013      	ands	r3, r2
 800215c:	d100      	bne.n	8002160 <HAL_RCC_OscConfig+0x260>
 800215e:	e0a1      	b.n	80022a4 <HAL_RCC_OscConfig+0x3a4>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002160:	6a3b      	ldr	r3, [r7, #32]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d141      	bne.n	80021ea <HAL_RCC_OscConfig+0x2ea>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002166:	4b3a      	ldr	r3, [pc, #232]	; (8002250 <HAL_RCC_OscConfig+0x350>)
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	2380      	movs	r3, #128	; 0x80
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	4013      	ands	r3, r2
 8002170:	d005      	beq.n	800217e <HAL_RCC_OscConfig+0x27e>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	699b      	ldr	r3, [r3, #24]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d101      	bne.n	800217e <HAL_RCC_OscConfig+0x27e>
      {
        return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e224      	b.n	80025c8 <HAL_RCC_OscConfig+0x6c8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800217e:	4a34      	ldr	r2, [pc, #208]	; (8002250 <HAL_RCC_OscConfig+0x350>)
 8002180:	4b33      	ldr	r3, [pc, #204]	; (8002250 <HAL_RCC_OscConfig+0x350>)
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	4939      	ldr	r1, [pc, #228]	; (800226c <HAL_RCC_OscConfig+0x36c>)
 8002186:	4019      	ands	r1, r3
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6a1b      	ldr	r3, [r3, #32]
 800218c:	430b      	orrs	r3, r1
 800218e:	6053      	str	r3, [r2, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002190:	4a2f      	ldr	r2, [pc, #188]	; (8002250 <HAL_RCC_OscConfig+0x350>)
 8002192:	4b2f      	ldr	r3, [pc, #188]	; (8002250 <HAL_RCC_OscConfig+0x350>)
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	021b      	lsls	r3, r3, #8
 8002198:	0a19      	lsrs	r1, r3, #8
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	69db      	ldr	r3, [r3, #28]
 800219e:	061b      	lsls	r3, r3, #24
 80021a0:	430b      	orrs	r3, r1
 80021a2:	6053      	str	r3, [r2, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6a1b      	ldr	r3, [r3, #32]
 80021a8:	0b5b      	lsrs	r3, r3, #13
 80021aa:	3301      	adds	r3, #1
 80021ac:	2280      	movs	r2, #128	; 0x80
 80021ae:	0212      	lsls	r2, r2, #8
 80021b0:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80021b2:	4b27      	ldr	r3, [pc, #156]	; (8002250 <HAL_RCC_OscConfig+0x350>)
 80021b4:	68db      	ldr	r3, [r3, #12]
 80021b6:	091b      	lsrs	r3, r3, #4
 80021b8:	210f      	movs	r1, #15
 80021ba:	400b      	ands	r3, r1
 80021bc:	4928      	ldr	r1, [pc, #160]	; (8002260 <HAL_RCC_OscConfig+0x360>)
 80021be:	5ccb      	ldrb	r3, [r1, r3]
 80021c0:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80021c2:	4b28      	ldr	r3, [pc, #160]	; (8002264 <HAL_RCC_OscConfig+0x364>)
 80021c4:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80021c6:	4b28      	ldr	r3, [pc, #160]	; (8002268 <HAL_RCC_OscConfig+0x368>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	2213      	movs	r2, #19
 80021cc:	18bc      	adds	r4, r7, r2
 80021ce:	0018      	movs	r0, r3
 80021d0:	f7fe fed2 	bl	8000f78 <HAL_InitTick>
 80021d4:	0003      	movs	r3, r0
 80021d6:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80021d8:	2313      	movs	r3, #19
 80021da:	18fb      	adds	r3, r7, r3
 80021dc:	781b      	ldrb	r3, [r3, #0]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d060      	beq.n	80022a4 <HAL_RCC_OscConfig+0x3a4>
        {
          return status;
 80021e2:	2313      	movs	r3, #19
 80021e4:	18fb      	adds	r3, r7, r3
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	e1ee      	b.n	80025c8 <HAL_RCC_OscConfig+0x6c8>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	699b      	ldr	r3, [r3, #24]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d03e      	beq.n	8002270 <HAL_RCC_OscConfig+0x370>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80021f2:	4b17      	ldr	r3, [pc, #92]	; (8002250 <HAL_RCC_OscConfig+0x350>)
 80021f4:	4a16      	ldr	r2, [pc, #88]	; (8002250 <HAL_RCC_OscConfig+0x350>)
 80021f6:	6812      	ldr	r2, [r2, #0]
 80021f8:	2180      	movs	r1, #128	; 0x80
 80021fa:	0049      	lsls	r1, r1, #1
 80021fc:	430a      	orrs	r2, r1
 80021fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002200:	f7fe ff00 	bl	8001004 <HAL_GetTick>
 8002204:	0003      	movs	r3, r0
 8002206:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002208:	e008      	b.n	800221c <HAL_RCC_OscConfig+0x31c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800220a:	f7fe fefb 	bl	8001004 <HAL_GetTick>
 800220e:	0002      	movs	r2, r0
 8002210:	69bb      	ldr	r3, [r7, #24]
 8002212:	1ad3      	subs	r3, r2, r3
 8002214:	2b02      	cmp	r3, #2
 8002216:	d901      	bls.n	800221c <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 8002218:	2303      	movs	r3, #3
 800221a:	e1d5      	b.n	80025c8 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800221c:	4b0c      	ldr	r3, [pc, #48]	; (8002250 <HAL_RCC_OscConfig+0x350>)
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	2380      	movs	r3, #128	; 0x80
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	4013      	ands	r3, r2
 8002226:	d0f0      	beq.n	800220a <HAL_RCC_OscConfig+0x30a>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002228:	4a09      	ldr	r2, [pc, #36]	; (8002250 <HAL_RCC_OscConfig+0x350>)
 800222a:	4b09      	ldr	r3, [pc, #36]	; (8002250 <HAL_RCC_OscConfig+0x350>)
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	490f      	ldr	r1, [pc, #60]	; (800226c <HAL_RCC_OscConfig+0x36c>)
 8002230:	4019      	ands	r1, r3
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6a1b      	ldr	r3, [r3, #32]
 8002236:	430b      	orrs	r3, r1
 8002238:	6053      	str	r3, [r2, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800223a:	4a05      	ldr	r2, [pc, #20]	; (8002250 <HAL_RCC_OscConfig+0x350>)
 800223c:	4b04      	ldr	r3, [pc, #16]	; (8002250 <HAL_RCC_OscConfig+0x350>)
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	021b      	lsls	r3, r3, #8
 8002242:	0a19      	lsrs	r1, r3, #8
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	69db      	ldr	r3, [r3, #28]
 8002248:	061b      	lsls	r3, r3, #24
 800224a:	430b      	orrs	r3, r1
 800224c:	6053      	str	r3, [r2, #4]
 800224e:	e029      	b.n	80022a4 <HAL_RCC_OscConfig+0x3a4>
 8002250:	40021000 	.word	0x40021000
 8002254:	fffeffff 	.word	0xfffeffff
 8002258:	fffbffff 	.word	0xfffbffff
 800225c:	ffffe0ff 	.word	0xffffe0ff
 8002260:	08003e34 	.word	0x08003e34
 8002264:	20000000 	.word	0x20000000
 8002268:	20000004 	.word	0x20000004
 800226c:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002270:	4bbe      	ldr	r3, [pc, #760]	; (800256c <HAL_RCC_OscConfig+0x66c>)
 8002272:	4abe      	ldr	r2, [pc, #760]	; (800256c <HAL_RCC_OscConfig+0x66c>)
 8002274:	6812      	ldr	r2, [r2, #0]
 8002276:	49be      	ldr	r1, [pc, #760]	; (8002570 <HAL_RCC_OscConfig+0x670>)
 8002278:	400a      	ands	r2, r1
 800227a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800227c:	f7fe fec2 	bl	8001004 <HAL_GetTick>
 8002280:	0003      	movs	r3, r0
 8002282:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002284:	e008      	b.n	8002298 <HAL_RCC_OscConfig+0x398>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002286:	f7fe febd 	bl	8001004 <HAL_GetTick>
 800228a:	0002      	movs	r2, r0
 800228c:	69bb      	ldr	r3, [r7, #24]
 800228e:	1ad3      	subs	r3, r2, r3
 8002290:	2b02      	cmp	r3, #2
 8002292:	d901      	bls.n	8002298 <HAL_RCC_OscConfig+0x398>
          {
            return HAL_TIMEOUT;
 8002294:	2303      	movs	r3, #3
 8002296:	e197      	b.n	80025c8 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002298:	4bb4      	ldr	r3, [pc, #720]	; (800256c <HAL_RCC_OscConfig+0x66c>)
 800229a:	681a      	ldr	r2, [r3, #0]
 800229c:	2380      	movs	r3, #128	; 0x80
 800229e:	009b      	lsls	r3, r3, #2
 80022a0:	4013      	ands	r3, r2
 80022a2:	d1f0      	bne.n	8002286 <HAL_RCC_OscConfig+0x386>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	2208      	movs	r2, #8
 80022aa:	4013      	ands	r3, r2
 80022ac:	d036      	beq.n	800231c <HAL_RCC_OscConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	695b      	ldr	r3, [r3, #20]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d019      	beq.n	80022ea <HAL_RCC_OscConfig+0x3ea>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022b6:	4bad      	ldr	r3, [pc, #692]	; (800256c <HAL_RCC_OscConfig+0x66c>)
 80022b8:	4aac      	ldr	r2, [pc, #688]	; (800256c <HAL_RCC_OscConfig+0x66c>)
 80022ba:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80022bc:	2101      	movs	r1, #1
 80022be:	430a      	orrs	r2, r1
 80022c0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022c2:	f7fe fe9f 	bl	8001004 <HAL_GetTick>
 80022c6:	0003      	movs	r3, r0
 80022c8:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80022ca:	e008      	b.n	80022de <HAL_RCC_OscConfig+0x3de>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022cc:	f7fe fe9a 	bl	8001004 <HAL_GetTick>
 80022d0:	0002      	movs	r2, r0
 80022d2:	69bb      	ldr	r3, [r7, #24]
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	2b02      	cmp	r3, #2
 80022d8:	d901      	bls.n	80022de <HAL_RCC_OscConfig+0x3de>
        {
          return HAL_TIMEOUT;
 80022da:	2303      	movs	r3, #3
 80022dc:	e174      	b.n	80025c8 <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80022de:	4ba3      	ldr	r3, [pc, #652]	; (800256c <HAL_RCC_OscConfig+0x66c>)
 80022e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022e2:	2202      	movs	r2, #2
 80022e4:	4013      	ands	r3, r2
 80022e6:	d0f1      	beq.n	80022cc <HAL_RCC_OscConfig+0x3cc>
 80022e8:	e018      	b.n	800231c <HAL_RCC_OscConfig+0x41c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022ea:	4ba0      	ldr	r3, [pc, #640]	; (800256c <HAL_RCC_OscConfig+0x66c>)
 80022ec:	4a9f      	ldr	r2, [pc, #636]	; (800256c <HAL_RCC_OscConfig+0x66c>)
 80022ee:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80022f0:	2101      	movs	r1, #1
 80022f2:	438a      	bics	r2, r1
 80022f4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022f6:	f7fe fe85 	bl	8001004 <HAL_GetTick>
 80022fa:	0003      	movs	r3, r0
 80022fc:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80022fe:	e008      	b.n	8002312 <HAL_RCC_OscConfig+0x412>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002300:	f7fe fe80 	bl	8001004 <HAL_GetTick>
 8002304:	0002      	movs	r2, r0
 8002306:	69bb      	ldr	r3, [r7, #24]
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	2b02      	cmp	r3, #2
 800230c:	d901      	bls.n	8002312 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800230e:	2303      	movs	r3, #3
 8002310:	e15a      	b.n	80025c8 <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002312:	4b96      	ldr	r3, [pc, #600]	; (800256c <HAL_RCC_OscConfig+0x66c>)
 8002314:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002316:	2202      	movs	r2, #2
 8002318:	4013      	ands	r3, r2
 800231a:	d1f1      	bne.n	8002300 <HAL_RCC_OscConfig+0x400>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	2204      	movs	r2, #4
 8002322:	4013      	ands	r3, r2
 8002324:	d100      	bne.n	8002328 <HAL_RCC_OscConfig+0x428>
 8002326:	e0af      	b.n	8002488 <HAL_RCC_OscConfig+0x588>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002328:	2327      	movs	r3, #39	; 0x27
 800232a:	18fb      	adds	r3, r7, r3
 800232c:	2200      	movs	r2, #0
 800232e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002330:	4b8e      	ldr	r3, [pc, #568]	; (800256c <HAL_RCC_OscConfig+0x66c>)
 8002332:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002334:	2380      	movs	r3, #128	; 0x80
 8002336:	055b      	lsls	r3, r3, #21
 8002338:	4013      	ands	r3, r2
 800233a:	d10a      	bne.n	8002352 <HAL_RCC_OscConfig+0x452>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800233c:	4b8b      	ldr	r3, [pc, #556]	; (800256c <HAL_RCC_OscConfig+0x66c>)
 800233e:	4a8b      	ldr	r2, [pc, #556]	; (800256c <HAL_RCC_OscConfig+0x66c>)
 8002340:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002342:	2180      	movs	r1, #128	; 0x80
 8002344:	0549      	lsls	r1, r1, #21
 8002346:	430a      	orrs	r2, r1
 8002348:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800234a:	2327      	movs	r3, #39	; 0x27
 800234c:	18fb      	adds	r3, r7, r3
 800234e:	2201      	movs	r2, #1
 8002350:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002352:	4b88      	ldr	r3, [pc, #544]	; (8002574 <HAL_RCC_OscConfig+0x674>)
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	2380      	movs	r3, #128	; 0x80
 8002358:	005b      	lsls	r3, r3, #1
 800235a:	4013      	ands	r3, r2
 800235c:	d11a      	bne.n	8002394 <HAL_RCC_OscConfig+0x494>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800235e:	4b85      	ldr	r3, [pc, #532]	; (8002574 <HAL_RCC_OscConfig+0x674>)
 8002360:	4a84      	ldr	r2, [pc, #528]	; (8002574 <HAL_RCC_OscConfig+0x674>)
 8002362:	6812      	ldr	r2, [r2, #0]
 8002364:	2180      	movs	r1, #128	; 0x80
 8002366:	0049      	lsls	r1, r1, #1
 8002368:	430a      	orrs	r2, r1
 800236a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800236c:	f7fe fe4a 	bl	8001004 <HAL_GetTick>
 8002370:	0003      	movs	r3, r0
 8002372:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002374:	e008      	b.n	8002388 <HAL_RCC_OscConfig+0x488>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002376:	f7fe fe45 	bl	8001004 <HAL_GetTick>
 800237a:	0002      	movs	r2, r0
 800237c:	69bb      	ldr	r3, [r7, #24]
 800237e:	1ad3      	subs	r3, r2, r3
 8002380:	2b64      	cmp	r3, #100	; 0x64
 8002382:	d901      	bls.n	8002388 <HAL_RCC_OscConfig+0x488>
        {
          return HAL_TIMEOUT;
 8002384:	2303      	movs	r3, #3
 8002386:	e11f      	b.n	80025c8 <HAL_RCC_OscConfig+0x6c8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002388:	4b7a      	ldr	r3, [pc, #488]	; (8002574 <HAL_RCC_OscConfig+0x674>)
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	2380      	movs	r3, #128	; 0x80
 800238e:	005b      	lsls	r3, r3, #1
 8002390:	4013      	ands	r3, r2
 8002392:	d0f0      	beq.n	8002376 <HAL_RCC_OscConfig+0x476>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	689a      	ldr	r2, [r3, #8]
 8002398:	2380      	movs	r3, #128	; 0x80
 800239a:	005b      	lsls	r3, r3, #1
 800239c:	429a      	cmp	r2, r3
 800239e:	d107      	bne.n	80023b0 <HAL_RCC_OscConfig+0x4b0>
 80023a0:	4b72      	ldr	r3, [pc, #456]	; (800256c <HAL_RCC_OscConfig+0x66c>)
 80023a2:	4a72      	ldr	r2, [pc, #456]	; (800256c <HAL_RCC_OscConfig+0x66c>)
 80023a4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80023a6:	2180      	movs	r1, #128	; 0x80
 80023a8:	0049      	lsls	r1, r1, #1
 80023aa:	430a      	orrs	r2, r1
 80023ac:	651a      	str	r2, [r3, #80]	; 0x50
 80023ae:	e031      	b.n	8002414 <HAL_RCC_OscConfig+0x514>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d10c      	bne.n	80023d2 <HAL_RCC_OscConfig+0x4d2>
 80023b8:	4b6c      	ldr	r3, [pc, #432]	; (800256c <HAL_RCC_OscConfig+0x66c>)
 80023ba:	4a6c      	ldr	r2, [pc, #432]	; (800256c <HAL_RCC_OscConfig+0x66c>)
 80023bc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80023be:	496c      	ldr	r1, [pc, #432]	; (8002570 <HAL_RCC_OscConfig+0x670>)
 80023c0:	400a      	ands	r2, r1
 80023c2:	651a      	str	r2, [r3, #80]	; 0x50
 80023c4:	4b69      	ldr	r3, [pc, #420]	; (800256c <HAL_RCC_OscConfig+0x66c>)
 80023c6:	4a69      	ldr	r2, [pc, #420]	; (800256c <HAL_RCC_OscConfig+0x66c>)
 80023c8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80023ca:	496b      	ldr	r1, [pc, #428]	; (8002578 <HAL_RCC_OscConfig+0x678>)
 80023cc:	400a      	ands	r2, r1
 80023ce:	651a      	str	r2, [r3, #80]	; 0x50
 80023d0:	e020      	b.n	8002414 <HAL_RCC_OscConfig+0x514>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	689a      	ldr	r2, [r3, #8]
 80023d6:	23a0      	movs	r3, #160	; 0xa0
 80023d8:	00db      	lsls	r3, r3, #3
 80023da:	429a      	cmp	r2, r3
 80023dc:	d10e      	bne.n	80023fc <HAL_RCC_OscConfig+0x4fc>
 80023de:	4b63      	ldr	r3, [pc, #396]	; (800256c <HAL_RCC_OscConfig+0x66c>)
 80023e0:	4a62      	ldr	r2, [pc, #392]	; (800256c <HAL_RCC_OscConfig+0x66c>)
 80023e2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80023e4:	2180      	movs	r1, #128	; 0x80
 80023e6:	00c9      	lsls	r1, r1, #3
 80023e8:	430a      	orrs	r2, r1
 80023ea:	651a      	str	r2, [r3, #80]	; 0x50
 80023ec:	4b5f      	ldr	r3, [pc, #380]	; (800256c <HAL_RCC_OscConfig+0x66c>)
 80023ee:	4a5f      	ldr	r2, [pc, #380]	; (800256c <HAL_RCC_OscConfig+0x66c>)
 80023f0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80023f2:	2180      	movs	r1, #128	; 0x80
 80023f4:	0049      	lsls	r1, r1, #1
 80023f6:	430a      	orrs	r2, r1
 80023f8:	651a      	str	r2, [r3, #80]	; 0x50
 80023fa:	e00b      	b.n	8002414 <HAL_RCC_OscConfig+0x514>
 80023fc:	4b5b      	ldr	r3, [pc, #364]	; (800256c <HAL_RCC_OscConfig+0x66c>)
 80023fe:	4a5b      	ldr	r2, [pc, #364]	; (800256c <HAL_RCC_OscConfig+0x66c>)
 8002400:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002402:	495b      	ldr	r1, [pc, #364]	; (8002570 <HAL_RCC_OscConfig+0x670>)
 8002404:	400a      	ands	r2, r1
 8002406:	651a      	str	r2, [r3, #80]	; 0x50
 8002408:	4b58      	ldr	r3, [pc, #352]	; (800256c <HAL_RCC_OscConfig+0x66c>)
 800240a:	4a58      	ldr	r2, [pc, #352]	; (800256c <HAL_RCC_OscConfig+0x66c>)
 800240c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800240e:	495a      	ldr	r1, [pc, #360]	; (8002578 <HAL_RCC_OscConfig+0x678>)
 8002410:	400a      	ands	r2, r1
 8002412:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d015      	beq.n	8002448 <HAL_RCC_OscConfig+0x548>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800241c:	f7fe fdf2 	bl	8001004 <HAL_GetTick>
 8002420:	0003      	movs	r3, r0
 8002422:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002424:	e009      	b.n	800243a <HAL_RCC_OscConfig+0x53a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002426:	f7fe fded 	bl	8001004 <HAL_GetTick>
 800242a:	0002      	movs	r2, r0
 800242c:	69bb      	ldr	r3, [r7, #24]
 800242e:	1ad3      	subs	r3, r2, r3
 8002430:	4a52      	ldr	r2, [pc, #328]	; (800257c <HAL_RCC_OscConfig+0x67c>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d901      	bls.n	800243a <HAL_RCC_OscConfig+0x53a>
        {
          return HAL_TIMEOUT;
 8002436:	2303      	movs	r3, #3
 8002438:	e0c6      	b.n	80025c8 <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800243a:	4b4c      	ldr	r3, [pc, #304]	; (800256c <HAL_RCC_OscConfig+0x66c>)
 800243c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800243e:	2380      	movs	r3, #128	; 0x80
 8002440:	009b      	lsls	r3, r3, #2
 8002442:	4013      	ands	r3, r2
 8002444:	d0ef      	beq.n	8002426 <HAL_RCC_OscConfig+0x526>
 8002446:	e014      	b.n	8002472 <HAL_RCC_OscConfig+0x572>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002448:	f7fe fddc 	bl	8001004 <HAL_GetTick>
 800244c:	0003      	movs	r3, r0
 800244e:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002450:	e009      	b.n	8002466 <HAL_RCC_OscConfig+0x566>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002452:	f7fe fdd7 	bl	8001004 <HAL_GetTick>
 8002456:	0002      	movs	r2, r0
 8002458:	69bb      	ldr	r3, [r7, #24]
 800245a:	1ad3      	subs	r3, r2, r3
 800245c:	4a47      	ldr	r2, [pc, #284]	; (800257c <HAL_RCC_OscConfig+0x67c>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d901      	bls.n	8002466 <HAL_RCC_OscConfig+0x566>
        {
          return HAL_TIMEOUT;
 8002462:	2303      	movs	r3, #3
 8002464:	e0b0      	b.n	80025c8 <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002466:	4b41      	ldr	r3, [pc, #260]	; (800256c <HAL_RCC_OscConfig+0x66c>)
 8002468:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800246a:	2380      	movs	r3, #128	; 0x80
 800246c:	009b      	lsls	r3, r3, #2
 800246e:	4013      	ands	r3, r2
 8002470:	d1ef      	bne.n	8002452 <HAL_RCC_OscConfig+0x552>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002472:	2327      	movs	r3, #39	; 0x27
 8002474:	18fb      	adds	r3, r7, r3
 8002476:	781b      	ldrb	r3, [r3, #0]
 8002478:	2b01      	cmp	r3, #1
 800247a:	d105      	bne.n	8002488 <HAL_RCC_OscConfig+0x588>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800247c:	4b3b      	ldr	r3, [pc, #236]	; (800256c <HAL_RCC_OscConfig+0x66c>)
 800247e:	4a3b      	ldr	r2, [pc, #236]	; (800256c <HAL_RCC_OscConfig+0x66c>)
 8002480:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002482:	493f      	ldr	r1, [pc, #252]	; (8002580 <HAL_RCC_OscConfig+0x680>)
 8002484:	400a      	ands	r2, r1
 8002486:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800248c:	2b00      	cmp	r3, #0
 800248e:	d100      	bne.n	8002492 <HAL_RCC_OscConfig+0x592>
 8002490:	e099      	b.n	80025c6 <HAL_RCC_OscConfig+0x6c6>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002492:	6a3b      	ldr	r3, [r7, #32]
 8002494:	2b0c      	cmp	r3, #12
 8002496:	d063      	beq.n	8002560 <HAL_RCC_OscConfig+0x660>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800249c:	2b02      	cmp	r3, #2
 800249e:	d144      	bne.n	800252a <HAL_RCC_OscConfig+0x62a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024a0:	4b32      	ldr	r3, [pc, #200]	; (800256c <HAL_RCC_OscConfig+0x66c>)
 80024a2:	4a32      	ldr	r2, [pc, #200]	; (800256c <HAL_RCC_OscConfig+0x66c>)
 80024a4:	6812      	ldr	r2, [r2, #0]
 80024a6:	4937      	ldr	r1, [pc, #220]	; (8002584 <HAL_RCC_OscConfig+0x684>)
 80024a8:	400a      	ands	r2, r1
 80024aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ac:	f7fe fdaa 	bl	8001004 <HAL_GetTick>
 80024b0:	0003      	movs	r3, r0
 80024b2:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80024b4:	e008      	b.n	80024c8 <HAL_RCC_OscConfig+0x5c8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024b6:	f7fe fda5 	bl	8001004 <HAL_GetTick>
 80024ba:	0002      	movs	r2, r0
 80024bc:	69bb      	ldr	r3, [r7, #24]
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	2b02      	cmp	r3, #2
 80024c2:	d901      	bls.n	80024c8 <HAL_RCC_OscConfig+0x5c8>
          {
            return HAL_TIMEOUT;
 80024c4:	2303      	movs	r3, #3
 80024c6:	e07f      	b.n	80025c8 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80024c8:	4b28      	ldr	r3, [pc, #160]	; (800256c <HAL_RCC_OscConfig+0x66c>)
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	2380      	movs	r3, #128	; 0x80
 80024ce:	049b      	lsls	r3, r3, #18
 80024d0:	4013      	ands	r3, r2
 80024d2:	d1f0      	bne.n	80024b6 <HAL_RCC_OscConfig+0x5b6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024d4:	4a25      	ldr	r2, [pc, #148]	; (800256c <HAL_RCC_OscConfig+0x66c>)
 80024d6:	4b25      	ldr	r3, [pc, #148]	; (800256c <HAL_RCC_OscConfig+0x66c>)
 80024d8:	68db      	ldr	r3, [r3, #12]
 80024da:	492b      	ldr	r1, [pc, #172]	; (8002588 <HAL_RCC_OscConfig+0x688>)
 80024dc:	4019      	ands	r1, r3
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024e6:	4318      	orrs	r0, r3
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ec:	4303      	orrs	r3, r0
 80024ee:	430b      	orrs	r3, r1
 80024f0:	60d3      	str	r3, [r2, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024f2:	4b1e      	ldr	r3, [pc, #120]	; (800256c <HAL_RCC_OscConfig+0x66c>)
 80024f4:	4a1d      	ldr	r2, [pc, #116]	; (800256c <HAL_RCC_OscConfig+0x66c>)
 80024f6:	6812      	ldr	r2, [r2, #0]
 80024f8:	2180      	movs	r1, #128	; 0x80
 80024fa:	0449      	lsls	r1, r1, #17
 80024fc:	430a      	orrs	r2, r1
 80024fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002500:	f7fe fd80 	bl	8001004 <HAL_GetTick>
 8002504:	0003      	movs	r3, r0
 8002506:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002508:	e008      	b.n	800251c <HAL_RCC_OscConfig+0x61c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800250a:	f7fe fd7b 	bl	8001004 <HAL_GetTick>
 800250e:	0002      	movs	r2, r0
 8002510:	69bb      	ldr	r3, [r7, #24]
 8002512:	1ad3      	subs	r3, r2, r3
 8002514:	2b02      	cmp	r3, #2
 8002516:	d901      	bls.n	800251c <HAL_RCC_OscConfig+0x61c>
          {
            return HAL_TIMEOUT;
 8002518:	2303      	movs	r3, #3
 800251a:	e055      	b.n	80025c8 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800251c:	4b13      	ldr	r3, [pc, #76]	; (800256c <HAL_RCC_OscConfig+0x66c>)
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	2380      	movs	r3, #128	; 0x80
 8002522:	049b      	lsls	r3, r3, #18
 8002524:	4013      	ands	r3, r2
 8002526:	d0f0      	beq.n	800250a <HAL_RCC_OscConfig+0x60a>
 8002528:	e04d      	b.n	80025c6 <HAL_RCC_OscConfig+0x6c6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800252a:	4b10      	ldr	r3, [pc, #64]	; (800256c <HAL_RCC_OscConfig+0x66c>)
 800252c:	4a0f      	ldr	r2, [pc, #60]	; (800256c <HAL_RCC_OscConfig+0x66c>)
 800252e:	6812      	ldr	r2, [r2, #0]
 8002530:	4914      	ldr	r1, [pc, #80]	; (8002584 <HAL_RCC_OscConfig+0x684>)
 8002532:	400a      	ands	r2, r1
 8002534:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002536:	f7fe fd65 	bl	8001004 <HAL_GetTick>
 800253a:	0003      	movs	r3, r0
 800253c:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800253e:	e008      	b.n	8002552 <HAL_RCC_OscConfig+0x652>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002540:	f7fe fd60 	bl	8001004 <HAL_GetTick>
 8002544:	0002      	movs	r2, r0
 8002546:	69bb      	ldr	r3, [r7, #24]
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	2b02      	cmp	r3, #2
 800254c:	d901      	bls.n	8002552 <HAL_RCC_OscConfig+0x652>
          {
            return HAL_TIMEOUT;
 800254e:	2303      	movs	r3, #3
 8002550:	e03a      	b.n	80025c8 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002552:	4b06      	ldr	r3, [pc, #24]	; (800256c <HAL_RCC_OscConfig+0x66c>)
 8002554:	681a      	ldr	r2, [r3, #0]
 8002556:	2380      	movs	r3, #128	; 0x80
 8002558:	049b      	lsls	r3, r3, #18
 800255a:	4013      	ands	r3, r2
 800255c:	d1f0      	bne.n	8002540 <HAL_RCC_OscConfig+0x640>
 800255e:	e032      	b.n	80025c6 <HAL_RCC_OscConfig+0x6c6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002564:	2b01      	cmp	r3, #1
 8002566:	d111      	bne.n	800258c <HAL_RCC_OscConfig+0x68c>
      {
        return HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	e02d      	b.n	80025c8 <HAL_RCC_OscConfig+0x6c8>
 800256c:	40021000 	.word	0x40021000
 8002570:	fffffeff 	.word	0xfffffeff
 8002574:	40007000 	.word	0x40007000
 8002578:	fffffbff 	.word	0xfffffbff
 800257c:	00001388 	.word	0x00001388
 8002580:	efffffff 	.word	0xefffffff
 8002584:	feffffff 	.word	0xfeffffff
 8002588:	ff02ffff 	.word	0xff02ffff
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800258c:	4b10      	ldr	r3, [pc, #64]	; (80025d0 <HAL_RCC_OscConfig+0x6d0>)
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002592:	69fa      	ldr	r2, [r7, #28]
 8002594:	2380      	movs	r3, #128	; 0x80
 8002596:	025b      	lsls	r3, r3, #9
 8002598:	401a      	ands	r2, r3
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800259e:	429a      	cmp	r2, r3
 80025a0:	d10f      	bne.n	80025c2 <HAL_RCC_OscConfig+0x6c2>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80025a2:	69fa      	ldr	r2, [r7, #28]
 80025a4:	23f0      	movs	r3, #240	; 0xf0
 80025a6:	039b      	lsls	r3, r3, #14
 80025a8:	401a      	ands	r2, r3
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025ae:	429a      	cmp	r2, r3
 80025b0:	d107      	bne.n	80025c2 <HAL_RCC_OscConfig+0x6c2>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80025b2:	69fa      	ldr	r2, [r7, #28]
 80025b4:	23c0      	movs	r3, #192	; 0xc0
 80025b6:	041b      	lsls	r3, r3, #16
 80025b8:	401a      	ands	r2, r3
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80025be:	429a      	cmp	r2, r3
 80025c0:	d001      	beq.n	80025c6 <HAL_RCC_OscConfig+0x6c6>
        {
          return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e000      	b.n	80025c8 <HAL_RCC_OscConfig+0x6c8>
        }
      }
    }
  }
  return HAL_OK;
 80025c6:	2300      	movs	r3, #0
}
 80025c8:	0018      	movs	r0, r3
 80025ca:	46bd      	mov	sp, r7
 80025cc:	b00b      	add	sp, #44	; 0x2c
 80025ce:	bd90      	pop	{r4, r7, pc}
 80025d0:	40021000 	.word	0x40021000

080025d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025d4:	b590      	push	{r4, r7, lr}
 80025d6:	b085      	sub	sp, #20
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
 80025dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d101      	bne.n	80025e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	e128      	b.n	800283a <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80025e8:	4b96      	ldr	r3, [pc, #600]	; (8002844 <HAL_RCC_ClockConfig+0x270>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	2201      	movs	r2, #1
 80025ee:	401a      	ands	r2, r3
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d21e      	bcs.n	8002634 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025f6:	4b93      	ldr	r3, [pc, #588]	; (8002844 <HAL_RCC_ClockConfig+0x270>)
 80025f8:	4a92      	ldr	r2, [pc, #584]	; (8002844 <HAL_RCC_ClockConfig+0x270>)
 80025fa:	6812      	ldr	r2, [r2, #0]
 80025fc:	2101      	movs	r1, #1
 80025fe:	438a      	bics	r2, r1
 8002600:	0011      	movs	r1, r2
 8002602:	683a      	ldr	r2, [r7, #0]
 8002604:	430a      	orrs	r2, r1
 8002606:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002608:	f7fe fcfc 	bl	8001004 <HAL_GetTick>
 800260c:	0003      	movs	r3, r0
 800260e:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002610:	e009      	b.n	8002626 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002612:	f7fe fcf7 	bl	8001004 <HAL_GetTick>
 8002616:	0002      	movs	r2, r0
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	1ad3      	subs	r3, r2, r3
 800261c:	4a8a      	ldr	r2, [pc, #552]	; (8002848 <HAL_RCC_ClockConfig+0x274>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d901      	bls.n	8002626 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	e109      	b.n	800283a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002626:	4b87      	ldr	r3, [pc, #540]	; (8002844 <HAL_RCC_ClockConfig+0x270>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	2201      	movs	r2, #1
 800262c:	401a      	ands	r2, r3
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	429a      	cmp	r2, r3
 8002632:	d1ee      	bne.n	8002612 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	2202      	movs	r2, #2
 800263a:	4013      	ands	r3, r2
 800263c:	d009      	beq.n	8002652 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800263e:	4a83      	ldr	r2, [pc, #524]	; (800284c <HAL_RCC_ClockConfig+0x278>)
 8002640:	4b82      	ldr	r3, [pc, #520]	; (800284c <HAL_RCC_ClockConfig+0x278>)
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	21f0      	movs	r1, #240	; 0xf0
 8002646:	438b      	bics	r3, r1
 8002648:	0019      	movs	r1, r3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	430b      	orrs	r3, r1
 8002650:	60d3      	str	r3, [r2, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	2201      	movs	r2, #1
 8002658:	4013      	ands	r3, r2
 800265a:	d100      	bne.n	800265e <HAL_RCC_ClockConfig+0x8a>
 800265c:	e089      	b.n	8002772 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	2b02      	cmp	r3, #2
 8002664:	d107      	bne.n	8002676 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002666:	4b79      	ldr	r3, [pc, #484]	; (800284c <HAL_RCC_ClockConfig+0x278>)
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	2380      	movs	r3, #128	; 0x80
 800266c:	029b      	lsls	r3, r3, #10
 800266e:	4013      	ands	r3, r2
 8002670:	d120      	bne.n	80026b4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e0e1      	b.n	800283a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	2b03      	cmp	r3, #3
 800267c:	d107      	bne.n	800268e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800267e:	4b73      	ldr	r3, [pc, #460]	; (800284c <HAL_RCC_ClockConfig+0x278>)
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	2380      	movs	r3, #128	; 0x80
 8002684:	049b      	lsls	r3, r3, #18
 8002686:	4013      	ands	r3, r2
 8002688:	d114      	bne.n	80026b4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e0d5      	b.n	800283a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	2b01      	cmp	r3, #1
 8002694:	d106      	bne.n	80026a4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002696:	4b6d      	ldr	r3, [pc, #436]	; (800284c <HAL_RCC_ClockConfig+0x278>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	2204      	movs	r2, #4
 800269c:	4013      	ands	r3, r2
 800269e:	d109      	bne.n	80026b4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	e0ca      	b.n	800283a <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80026a4:	4b69      	ldr	r3, [pc, #420]	; (800284c <HAL_RCC_ClockConfig+0x278>)
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	2380      	movs	r3, #128	; 0x80
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	4013      	ands	r3, r2
 80026ae:	d101      	bne.n	80026b4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	e0c2      	b.n	800283a <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026b4:	4a65      	ldr	r2, [pc, #404]	; (800284c <HAL_RCC_ClockConfig+0x278>)
 80026b6:	4b65      	ldr	r3, [pc, #404]	; (800284c <HAL_RCC_ClockConfig+0x278>)
 80026b8:	68db      	ldr	r3, [r3, #12]
 80026ba:	2103      	movs	r1, #3
 80026bc:	438b      	bics	r3, r1
 80026be:	0019      	movs	r1, r3
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	430b      	orrs	r3, r1
 80026c6:	60d3      	str	r3, [r2, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026c8:	f7fe fc9c 	bl	8001004 <HAL_GetTick>
 80026cc:	0003      	movs	r3, r0
 80026ce:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	2b02      	cmp	r3, #2
 80026d6:	d111      	bne.n	80026fc <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80026d8:	e009      	b.n	80026ee <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026da:	f7fe fc93 	bl	8001004 <HAL_GetTick>
 80026de:	0002      	movs	r2, r0
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	1ad3      	subs	r3, r2, r3
 80026e4:	4a58      	ldr	r2, [pc, #352]	; (8002848 <HAL_RCC_ClockConfig+0x274>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d901      	bls.n	80026ee <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	e0a5      	b.n	800283a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80026ee:	4b57      	ldr	r3, [pc, #348]	; (800284c <HAL_RCC_ClockConfig+0x278>)
 80026f0:	68db      	ldr	r3, [r3, #12]
 80026f2:	220c      	movs	r2, #12
 80026f4:	4013      	ands	r3, r2
 80026f6:	2b08      	cmp	r3, #8
 80026f8:	d1ef      	bne.n	80026da <HAL_RCC_ClockConfig+0x106>
 80026fa:	e03a      	b.n	8002772 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	2b03      	cmp	r3, #3
 8002702:	d111      	bne.n	8002728 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002704:	e009      	b.n	800271a <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002706:	f7fe fc7d 	bl	8001004 <HAL_GetTick>
 800270a:	0002      	movs	r2, r0
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	1ad3      	subs	r3, r2, r3
 8002710:	4a4d      	ldr	r2, [pc, #308]	; (8002848 <HAL_RCC_ClockConfig+0x274>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d901      	bls.n	800271a <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8002716:	2303      	movs	r3, #3
 8002718:	e08f      	b.n	800283a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800271a:	4b4c      	ldr	r3, [pc, #304]	; (800284c <HAL_RCC_ClockConfig+0x278>)
 800271c:	68db      	ldr	r3, [r3, #12]
 800271e:	220c      	movs	r2, #12
 8002720:	4013      	ands	r3, r2
 8002722:	2b0c      	cmp	r3, #12
 8002724:	d1ef      	bne.n	8002706 <HAL_RCC_ClockConfig+0x132>
 8002726:	e024      	b.n	8002772 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	2b01      	cmp	r3, #1
 800272e:	d11b      	bne.n	8002768 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002730:	e009      	b.n	8002746 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002732:	f7fe fc67 	bl	8001004 <HAL_GetTick>
 8002736:	0002      	movs	r2, r0
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	1ad3      	subs	r3, r2, r3
 800273c:	4a42      	ldr	r2, [pc, #264]	; (8002848 <HAL_RCC_ClockConfig+0x274>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d901      	bls.n	8002746 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8002742:	2303      	movs	r3, #3
 8002744:	e079      	b.n	800283a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002746:	4b41      	ldr	r3, [pc, #260]	; (800284c <HAL_RCC_ClockConfig+0x278>)
 8002748:	68db      	ldr	r3, [r3, #12]
 800274a:	220c      	movs	r2, #12
 800274c:	4013      	ands	r3, r2
 800274e:	2b04      	cmp	r3, #4
 8002750:	d1ef      	bne.n	8002732 <HAL_RCC_ClockConfig+0x15e>
 8002752:	e00e      	b.n	8002772 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002754:	f7fe fc56 	bl	8001004 <HAL_GetTick>
 8002758:	0002      	movs	r2, r0
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	4a3a      	ldr	r2, [pc, #232]	; (8002848 <HAL_RCC_ClockConfig+0x274>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d901      	bls.n	8002768 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8002764:	2303      	movs	r3, #3
 8002766:	e068      	b.n	800283a <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002768:	4b38      	ldr	r3, [pc, #224]	; (800284c <HAL_RCC_ClockConfig+0x278>)
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	220c      	movs	r2, #12
 800276e:	4013      	ands	r3, r2
 8002770:	d1f0      	bne.n	8002754 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002772:	4b34      	ldr	r3, [pc, #208]	; (8002844 <HAL_RCC_ClockConfig+0x270>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	2201      	movs	r2, #1
 8002778:	401a      	ands	r2, r3
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	429a      	cmp	r2, r3
 800277e:	d91e      	bls.n	80027be <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002780:	4b30      	ldr	r3, [pc, #192]	; (8002844 <HAL_RCC_ClockConfig+0x270>)
 8002782:	4a30      	ldr	r2, [pc, #192]	; (8002844 <HAL_RCC_ClockConfig+0x270>)
 8002784:	6812      	ldr	r2, [r2, #0]
 8002786:	2101      	movs	r1, #1
 8002788:	438a      	bics	r2, r1
 800278a:	0011      	movs	r1, r2
 800278c:	683a      	ldr	r2, [r7, #0]
 800278e:	430a      	orrs	r2, r1
 8002790:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002792:	f7fe fc37 	bl	8001004 <HAL_GetTick>
 8002796:	0003      	movs	r3, r0
 8002798:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800279a:	e009      	b.n	80027b0 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800279c:	f7fe fc32 	bl	8001004 <HAL_GetTick>
 80027a0:	0002      	movs	r2, r0
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	4a28      	ldr	r2, [pc, #160]	; (8002848 <HAL_RCC_ClockConfig+0x274>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d901      	bls.n	80027b0 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80027ac:	2303      	movs	r3, #3
 80027ae:	e044      	b.n	800283a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027b0:	4b24      	ldr	r3, [pc, #144]	; (8002844 <HAL_RCC_ClockConfig+0x270>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	2201      	movs	r2, #1
 80027b6:	401a      	ands	r2, r3
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	429a      	cmp	r2, r3
 80027bc:	d1ee      	bne.n	800279c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	2204      	movs	r2, #4
 80027c4:	4013      	ands	r3, r2
 80027c6:	d008      	beq.n	80027da <HAL_RCC_ClockConfig+0x206>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027c8:	4a20      	ldr	r2, [pc, #128]	; (800284c <HAL_RCC_ClockConfig+0x278>)
 80027ca:	4b20      	ldr	r3, [pc, #128]	; (800284c <HAL_RCC_ClockConfig+0x278>)
 80027cc:	68db      	ldr	r3, [r3, #12]
 80027ce:	4920      	ldr	r1, [pc, #128]	; (8002850 <HAL_RCC_ClockConfig+0x27c>)
 80027d0:	4019      	ands	r1, r3
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	68db      	ldr	r3, [r3, #12]
 80027d6:	430b      	orrs	r3, r1
 80027d8:	60d3      	str	r3, [r2, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	2208      	movs	r2, #8
 80027e0:	4013      	ands	r3, r2
 80027e2:	d009      	beq.n	80027f8 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80027e4:	4a19      	ldr	r2, [pc, #100]	; (800284c <HAL_RCC_ClockConfig+0x278>)
 80027e6:	4b19      	ldr	r3, [pc, #100]	; (800284c <HAL_RCC_ClockConfig+0x278>)
 80027e8:	68db      	ldr	r3, [r3, #12]
 80027ea:	491a      	ldr	r1, [pc, #104]	; (8002854 <HAL_RCC_ClockConfig+0x280>)
 80027ec:	4019      	ands	r1, r3
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	691b      	ldr	r3, [r3, #16]
 80027f2:	00db      	lsls	r3, r3, #3
 80027f4:	430b      	orrs	r3, r1
 80027f6:	60d3      	str	r3, [r2, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80027f8:	f000 f834 	bl	8002864 <HAL_RCC_GetSysClockFreq>
 80027fc:	0001      	movs	r1, r0
 80027fe:	4b13      	ldr	r3, [pc, #76]	; (800284c <HAL_RCC_ClockConfig+0x278>)
 8002800:	68db      	ldr	r3, [r3, #12]
 8002802:	091b      	lsrs	r3, r3, #4
 8002804:	220f      	movs	r2, #15
 8002806:	4013      	ands	r3, r2
 8002808:	4a13      	ldr	r2, [pc, #76]	; (8002858 <HAL_RCC_ClockConfig+0x284>)
 800280a:	5cd3      	ldrb	r3, [r2, r3]
 800280c:	000a      	movs	r2, r1
 800280e:	40da      	lsrs	r2, r3
 8002810:	4b12      	ldr	r3, [pc, #72]	; (800285c <HAL_RCC_ClockConfig+0x288>)
 8002812:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002814:	4b12      	ldr	r3, [pc, #72]	; (8002860 <HAL_RCC_ClockConfig+0x28c>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	220b      	movs	r2, #11
 800281a:	18bc      	adds	r4, r7, r2
 800281c:	0018      	movs	r0, r3
 800281e:	f7fe fbab 	bl	8000f78 <HAL_InitTick>
 8002822:	0003      	movs	r3, r0
 8002824:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8002826:	230b      	movs	r3, #11
 8002828:	18fb      	adds	r3, r7, r3
 800282a:	781b      	ldrb	r3, [r3, #0]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d003      	beq.n	8002838 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8002830:	230b      	movs	r3, #11
 8002832:	18fb      	adds	r3, r7, r3
 8002834:	781b      	ldrb	r3, [r3, #0]
 8002836:	e000      	b.n	800283a <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8002838:	2300      	movs	r3, #0
}
 800283a:	0018      	movs	r0, r3
 800283c:	46bd      	mov	sp, r7
 800283e:	b005      	add	sp, #20
 8002840:	bd90      	pop	{r4, r7, pc}
 8002842:	46c0      	nop			; (mov r8, r8)
 8002844:	40022000 	.word	0x40022000
 8002848:	00001388 	.word	0x00001388
 800284c:	40021000 	.word	0x40021000
 8002850:	fffff8ff 	.word	0xfffff8ff
 8002854:	ffffc7ff 	.word	0xffffc7ff
 8002858:	08003e34 	.word	0x08003e34
 800285c:	20000000 	.word	0x20000000
 8002860:	20000004 	.word	0x20000004

08002864 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002864:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002866:	b08f      	sub	sp, #60	; 0x3c
 8002868:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800286a:	4b4a      	ldr	r3, [pc, #296]	; (8002994 <HAL_RCC_GetSysClockFreq+0x130>)
 800286c:	68db      	ldr	r3, [r3, #12]
 800286e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002870:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002872:	230c      	movs	r3, #12
 8002874:	4013      	ands	r3, r2
 8002876:	2b08      	cmp	r3, #8
 8002878:	d00f      	beq.n	800289a <HAL_RCC_GetSysClockFreq+0x36>
 800287a:	2b0c      	cmp	r3, #12
 800287c:	d010      	beq.n	80028a0 <HAL_RCC_GetSysClockFreq+0x3c>
 800287e:	2b04      	cmp	r3, #4
 8002880:	d000      	beq.n	8002884 <HAL_RCC_GetSysClockFreq+0x20>
 8002882:	e073      	b.n	800296c <HAL_RCC_GetSysClockFreq+0x108>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002884:	4b43      	ldr	r3, [pc, #268]	; (8002994 <HAL_RCC_GetSysClockFreq+0x130>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	2210      	movs	r2, #16
 800288a:	4013      	ands	r3, r2
 800288c:	d002      	beq.n	8002894 <HAL_RCC_GetSysClockFreq+0x30>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800288e:	4b42      	ldr	r3, [pc, #264]	; (8002998 <HAL_RCC_GetSysClockFreq+0x134>)
 8002890:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8002892:	e079      	b.n	8002988 <HAL_RCC_GetSysClockFreq+0x124>
        sysclockfreq =  HSI_VALUE;
 8002894:	4b41      	ldr	r3, [pc, #260]	; (800299c <HAL_RCC_GetSysClockFreq+0x138>)
 8002896:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002898:	e076      	b.n	8002988 <HAL_RCC_GetSysClockFreq+0x124>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800289a:	4b41      	ldr	r3, [pc, #260]	; (80029a0 <HAL_RCC_GetSysClockFreq+0x13c>)
 800289c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800289e:	e073      	b.n	8002988 <HAL_RCC_GetSysClockFreq+0x124>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80028a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028a2:	0c9a      	lsrs	r2, r3, #18
 80028a4:	230f      	movs	r3, #15
 80028a6:	401a      	ands	r2, r3
 80028a8:	4b3e      	ldr	r3, [pc, #248]	; (80029a4 <HAL_RCC_GetSysClockFreq+0x140>)
 80028aa:	5c9b      	ldrb	r3, [r3, r2]
 80028ac:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80028ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028b0:	0d9a      	lsrs	r2, r3, #22
 80028b2:	2303      	movs	r3, #3
 80028b4:	4013      	ands	r3, r2
 80028b6:	3301      	adds	r3, #1
 80028b8:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80028ba:	4b36      	ldr	r3, [pc, #216]	; (8002994 <HAL_RCC_GetSysClockFreq+0x130>)
 80028bc:	68da      	ldr	r2, [r3, #12]
 80028be:	2380      	movs	r3, #128	; 0x80
 80028c0:	025b      	lsls	r3, r3, #9
 80028c2:	4013      	ands	r3, r2
 80028c4:	d019      	beq.n	80028fa <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80028c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028c8:	61bb      	str	r3, [r7, #24]
 80028ca:	2300      	movs	r3, #0
 80028cc:	61fb      	str	r3, [r7, #28]
 80028ce:	4a34      	ldr	r2, [pc, #208]	; (80029a0 <HAL_RCC_GetSysClockFreq+0x13c>)
 80028d0:	2300      	movs	r3, #0
 80028d2:	69b8      	ldr	r0, [r7, #24]
 80028d4:	69f9      	ldr	r1, [r7, #28]
 80028d6:	f7fd fcc3 	bl	8000260 <__aeabi_lmul>
 80028da:	0003      	movs	r3, r0
 80028dc:	000c      	movs	r4, r1
 80028de:	0018      	movs	r0, r3
 80028e0:	0021      	movs	r1, r4
 80028e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e4:	613b      	str	r3, [r7, #16]
 80028e6:	2300      	movs	r3, #0
 80028e8:	617b      	str	r3, [r7, #20]
 80028ea:	693a      	ldr	r2, [r7, #16]
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	f7fd fc97 	bl	8000220 <__aeabi_uldivmod>
 80028f2:	0003      	movs	r3, r0
 80028f4:	000c      	movs	r4, r1
 80028f6:	637b      	str	r3, [r7, #52]	; 0x34
 80028f8:	e035      	b.n	8002966 <HAL_RCC_GetSysClockFreq+0x102>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80028fa:	4b26      	ldr	r3, [pc, #152]	; (8002994 <HAL_RCC_GetSysClockFreq+0x130>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	2210      	movs	r2, #16
 8002900:	4013      	ands	r3, r2
 8002902:	d019      	beq.n	8002938 <HAL_RCC_GetSysClockFreq+0xd4>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8002904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002906:	60bb      	str	r3, [r7, #8]
 8002908:	2300      	movs	r3, #0
 800290a:	60fb      	str	r3, [r7, #12]
 800290c:	4a22      	ldr	r2, [pc, #136]	; (8002998 <HAL_RCC_GetSysClockFreq+0x134>)
 800290e:	2300      	movs	r3, #0
 8002910:	68b8      	ldr	r0, [r7, #8]
 8002912:	68f9      	ldr	r1, [r7, #12]
 8002914:	f7fd fca4 	bl	8000260 <__aeabi_lmul>
 8002918:	0003      	movs	r3, r0
 800291a:	000c      	movs	r4, r1
 800291c:	0018      	movs	r0, r3
 800291e:	0021      	movs	r1, r4
 8002920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002922:	603b      	str	r3, [r7, #0]
 8002924:	2300      	movs	r3, #0
 8002926:	607b      	str	r3, [r7, #4]
 8002928:	683a      	ldr	r2, [r7, #0]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	f7fd fc78 	bl	8000220 <__aeabi_uldivmod>
 8002930:	0003      	movs	r3, r0
 8002932:	000c      	movs	r4, r1
 8002934:	637b      	str	r3, [r7, #52]	; 0x34
 8002936:	e016      	b.n	8002966 <HAL_RCC_GetSysClockFreq+0x102>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800293a:	0018      	movs	r0, r3
 800293c:	2300      	movs	r3, #0
 800293e:	0019      	movs	r1, r3
 8002940:	4a16      	ldr	r2, [pc, #88]	; (800299c <HAL_RCC_GetSysClockFreq+0x138>)
 8002942:	2300      	movs	r3, #0
 8002944:	f7fd fc8c 	bl	8000260 <__aeabi_lmul>
 8002948:	0003      	movs	r3, r0
 800294a:	000c      	movs	r4, r1
 800294c:	0018      	movs	r0, r3
 800294e:	0021      	movs	r1, r4
 8002950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002952:	001d      	movs	r5, r3
 8002954:	2300      	movs	r3, #0
 8002956:	001e      	movs	r6, r3
 8002958:	002a      	movs	r2, r5
 800295a:	0033      	movs	r3, r6
 800295c:	f7fd fc60 	bl	8000220 <__aeabi_uldivmod>
 8002960:	0003      	movs	r3, r0
 8002962:	000c      	movs	r4, r1
 8002964:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8002966:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002968:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800296a:	e00d      	b.n	8002988 <HAL_RCC_GetSysClockFreq+0x124>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800296c:	4b09      	ldr	r3, [pc, #36]	; (8002994 <HAL_RCC_GetSysClockFreq+0x130>)
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	0b5b      	lsrs	r3, r3, #13
 8002972:	2207      	movs	r2, #7
 8002974:	4013      	ands	r3, r2
 8002976:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002978:	6a3b      	ldr	r3, [r7, #32]
 800297a:	3301      	adds	r3, #1
 800297c:	2280      	movs	r2, #128	; 0x80
 800297e:	0212      	lsls	r2, r2, #8
 8002980:	409a      	lsls	r2, r3
 8002982:	0013      	movs	r3, r2
 8002984:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002986:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800298a:	0018      	movs	r0, r3
 800298c:	46bd      	mov	sp, r7
 800298e:	b00f      	add	sp, #60	; 0x3c
 8002990:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002992:	46c0      	nop			; (mov r8, r8)
 8002994:	40021000 	.word	0x40021000
 8002998:	003d0900 	.word	0x003d0900
 800299c:	00f42400 	.word	0x00f42400
 80029a0:	007a1200 	.word	0x007a1200
 80029a4:	08003e4c 	.word	0x08003e4c

080029a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029ac:	4b02      	ldr	r3, [pc, #8]	; (80029b8 <HAL_RCC_GetHCLKFreq+0x10>)
 80029ae:	681b      	ldr	r3, [r3, #0]
}
 80029b0:	0018      	movs	r0, r3
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	46c0      	nop			; (mov r8, r8)
 80029b8:	20000000 	.word	0x20000000

080029bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80029c0:	f7ff fff2 	bl	80029a8 <HAL_RCC_GetHCLKFreq>
 80029c4:	0001      	movs	r1, r0
 80029c6:	4b06      	ldr	r3, [pc, #24]	; (80029e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80029c8:	68db      	ldr	r3, [r3, #12]
 80029ca:	0a1b      	lsrs	r3, r3, #8
 80029cc:	2207      	movs	r2, #7
 80029ce:	4013      	ands	r3, r2
 80029d0:	4a04      	ldr	r2, [pc, #16]	; (80029e4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80029d2:	5cd3      	ldrb	r3, [r2, r3]
 80029d4:	40d9      	lsrs	r1, r3
 80029d6:	000b      	movs	r3, r1
}
 80029d8:	0018      	movs	r0, r3
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	46c0      	nop			; (mov r8, r8)
 80029e0:	40021000 	.word	0x40021000
 80029e4:	08003e44 	.word	0x08003e44

080029e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80029ec:	f7ff ffdc 	bl	80029a8 <HAL_RCC_GetHCLKFreq>
 80029f0:	0001      	movs	r1, r0
 80029f2:	4b06      	ldr	r3, [pc, #24]	; (8002a0c <HAL_RCC_GetPCLK2Freq+0x24>)
 80029f4:	68db      	ldr	r3, [r3, #12]
 80029f6:	0adb      	lsrs	r3, r3, #11
 80029f8:	2207      	movs	r2, #7
 80029fa:	4013      	ands	r3, r2
 80029fc:	4a04      	ldr	r2, [pc, #16]	; (8002a10 <HAL_RCC_GetPCLK2Freq+0x28>)
 80029fe:	5cd3      	ldrb	r3, [r2, r3]
 8002a00:	40d9      	lsrs	r1, r3
 8002a02:	000b      	movs	r3, r1
}
 8002a04:	0018      	movs	r0, r3
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	46c0      	nop			; (mov r8, r8)
 8002a0c:	40021000 	.word	0x40021000
 8002a10:	08003e44 	.word	0x08003e44

08002a14 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b086      	sub	sp, #24
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8002a1c:	2317      	movs	r3, #23
 8002a1e:	18fb      	adds	r3, r7, r3
 8002a20:	2200      	movs	r2, #0
 8002a22:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	2220      	movs	r2, #32
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	d100      	bne.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8002a2e:	e0c2      	b.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a30:	4b87      	ldr	r3, [pc, #540]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002a32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a34:	2380      	movs	r3, #128	; 0x80
 8002a36:	055b      	lsls	r3, r3, #21
 8002a38:	4013      	ands	r3, r2
 8002a3a:	d10a      	bne.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0x3e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a3c:	4b84      	ldr	r3, [pc, #528]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002a3e:	4a84      	ldr	r2, [pc, #528]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002a40:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002a42:	2180      	movs	r1, #128	; 0x80
 8002a44:	0549      	lsls	r1, r1, #21
 8002a46:	430a      	orrs	r2, r1
 8002a48:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002a4a:	2317      	movs	r3, #23
 8002a4c:	18fb      	adds	r3, r7, r3
 8002a4e:	2201      	movs	r2, #1
 8002a50:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a52:	4b80      	ldr	r3, [pc, #512]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	2380      	movs	r3, #128	; 0x80
 8002a58:	005b      	lsls	r3, r3, #1
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	d11a      	bne.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a5e:	4b7d      	ldr	r3, [pc, #500]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002a60:	4a7c      	ldr	r2, [pc, #496]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002a62:	6812      	ldr	r2, [r2, #0]
 8002a64:	2180      	movs	r1, #128	; 0x80
 8002a66:	0049      	lsls	r1, r1, #1
 8002a68:	430a      	orrs	r2, r1
 8002a6a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a6c:	f7fe faca 	bl	8001004 <HAL_GetTick>
 8002a70:	0003      	movs	r3, r0
 8002a72:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a74:	e008      	b.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x74>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a76:	f7fe fac5 	bl	8001004 <HAL_GetTick>
 8002a7a:	0002      	movs	r2, r0
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	1ad3      	subs	r3, r2, r3
 8002a80:	2b64      	cmp	r3, #100	; 0x64
 8002a82:	d901      	bls.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x74>
        {
          return HAL_TIMEOUT;
 8002a84:	2303      	movs	r3, #3
 8002a86:	e0df      	b.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0x234>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a88:	4b72      	ldr	r3, [pc, #456]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	2380      	movs	r3, #128	; 0x80
 8002a8e:	005b      	lsls	r3, r3, #1
 8002a90:	4013      	ands	r3, r2
 8002a92:	d0f0      	beq.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x62>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002a94:	4b6e      	ldr	r3, [pc, #440]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	23c0      	movs	r3, #192	; 0xc0
 8002a9a:	039b      	lsls	r3, r3, #14
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	685a      	ldr	r2, [r3, #4]
 8002aa4:	23c0      	movs	r3, #192	; 0xc0
 8002aa6:	039b      	lsls	r3, r3, #14
 8002aa8:	401a      	ands	r2, r3
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d013      	beq.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	685a      	ldr	r2, [r3, #4]
 8002ab4:	23c0      	movs	r3, #192	; 0xc0
 8002ab6:	029b      	lsls	r3, r3, #10
 8002ab8:	401a      	ands	r2, r3
 8002aba:	23c0      	movs	r3, #192	; 0xc0
 8002abc:	029b      	lsls	r3, r3, #10
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	d10a      	bne.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002ac2:	4b63      	ldr	r3, [pc, #396]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	2380      	movs	r3, #128	; 0x80
 8002ac8:	029b      	lsls	r3, r3, #10
 8002aca:	401a      	ands	r2, r3
 8002acc:	2380      	movs	r3, #128	; 0x80
 8002ace:	029b      	lsls	r3, r3, #10
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d101      	bne.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e0b7      	b.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0x234>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002ad8:	4b5d      	ldr	r3, [pc, #372]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002ada:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002adc:	23c0      	movs	r3, #192	; 0xc0
 8002ade:	029b      	lsls	r3, r3, #10
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d03b      	beq.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	685a      	ldr	r2, [r3, #4]
 8002aee:	23c0      	movs	r3, #192	; 0xc0
 8002af0:	029b      	lsls	r3, r3, #10
 8002af2:	401a      	ands	r2, r3
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	429a      	cmp	r2, r3
 8002af8:	d033      	beq.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	2220      	movs	r2, #32
 8002b00:	4013      	ands	r3, r2
 8002b02:	d02e      	beq.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x14e>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002b04:	4b52      	ldr	r3, [pc, #328]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002b06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b08:	4a53      	ldr	r2, [pc, #332]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002b0a:	4013      	ands	r3, r2
 8002b0c:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b0e:	4b50      	ldr	r3, [pc, #320]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002b10:	4a4f      	ldr	r2, [pc, #316]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002b12:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002b14:	2180      	movs	r1, #128	; 0x80
 8002b16:	0309      	lsls	r1, r1, #12
 8002b18:	430a      	orrs	r2, r1
 8002b1a:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b1c:	4b4c      	ldr	r3, [pc, #304]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002b1e:	4a4c      	ldr	r2, [pc, #304]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002b20:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002b22:	494e      	ldr	r1, [pc, #312]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002b24:	400a      	ands	r2, r1
 8002b26:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002b28:	4b49      	ldr	r3, [pc, #292]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002b2a:	68fa      	ldr	r2, [r7, #12]
 8002b2c:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002b2e:	68fa      	ldr	r2, [r7, #12]
 8002b30:	2380      	movs	r3, #128	; 0x80
 8002b32:	005b      	lsls	r3, r3, #1
 8002b34:	4013      	ands	r3, r2
 8002b36:	d014      	beq.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b38:	f7fe fa64 	bl	8001004 <HAL_GetTick>
 8002b3c:	0003      	movs	r3, r0
 8002b3e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b40:	e009      	b.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x142>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b42:	f7fe fa5f 	bl	8001004 <HAL_GetTick>
 8002b46:	0002      	movs	r2, r0
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	1ad3      	subs	r3, r2, r3
 8002b4c:	4a44      	ldr	r2, [pc, #272]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d901      	bls.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x142>
          {
            return HAL_TIMEOUT;
 8002b52:	2303      	movs	r3, #3
 8002b54:	e078      	b.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0x234>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b56:	4b3e      	ldr	r3, [pc, #248]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002b58:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b5a:	2380      	movs	r3, #128	; 0x80
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	4013      	ands	r3, r2
 8002b60:	d0ef      	beq.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0x12e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	685a      	ldr	r2, [r3, #4]
 8002b66:	23c0      	movs	r3, #192	; 0xc0
 8002b68:	029b      	lsls	r3, r3, #10
 8002b6a:	401a      	ands	r2, r3
 8002b6c:	23c0      	movs	r3, #192	; 0xc0
 8002b6e:	029b      	lsls	r3, r3, #10
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d10b      	bne.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x178>
 8002b74:	4a36      	ldr	r2, [pc, #216]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002b76:	4b36      	ldr	r3, [pc, #216]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	493a      	ldr	r1, [pc, #232]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002b7c:	4019      	ands	r1, r3
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6858      	ldr	r0, [r3, #4]
 8002b82:	23c0      	movs	r3, #192	; 0xc0
 8002b84:	039b      	lsls	r3, r3, #14
 8002b86:	4003      	ands	r3, r0
 8002b88:	430b      	orrs	r3, r1
 8002b8a:	6013      	str	r3, [r2, #0]
 8002b8c:	4a30      	ldr	r2, [pc, #192]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002b8e:	4b30      	ldr	r3, [pc, #192]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002b90:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6858      	ldr	r0, [r3, #4]
 8002b96:	23c0      	movs	r3, #192	; 0xc0
 8002b98:	029b      	lsls	r3, r3, #10
 8002b9a:	4003      	ands	r3, r0
 8002b9c:	430b      	orrs	r3, r1
 8002b9e:	6513      	str	r3, [r2, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002ba0:	2317      	movs	r3, #23
 8002ba2:	18fb      	adds	r3, r7, r3
 8002ba4:	781b      	ldrb	r3, [r3, #0]
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d105      	bne.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002baa:	4b29      	ldr	r3, [pc, #164]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002bac:	4a28      	ldr	r2, [pc, #160]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002bae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002bb0:	492d      	ldr	r1, [pc, #180]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002bb2:	400a      	ands	r2, r1
 8002bb4:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	2201      	movs	r2, #1
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	d009      	beq.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002bc0:	4a23      	ldr	r2, [pc, #140]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002bc2:	4b23      	ldr	r3, [pc, #140]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002bc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bc6:	2103      	movs	r1, #3
 8002bc8:	438b      	bics	r3, r1
 8002bca:	0019      	movs	r1, r3
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	430b      	orrs	r3, r1
 8002bd2:	64d3      	str	r3, [r2, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	2202      	movs	r2, #2
 8002bda:	4013      	ands	r3, r2
 8002bdc:	d009      	beq.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002bde:	4a1c      	ldr	r2, [pc, #112]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002be0:	4b1b      	ldr	r3, [pc, #108]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002be2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002be4:	210c      	movs	r1, #12
 8002be6:	438b      	bics	r3, r1
 8002be8:	0019      	movs	r1, r3
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	68db      	ldr	r3, [r3, #12]
 8002bee:	430b      	orrs	r3, r1
 8002bf0:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	2204      	movs	r2, #4
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	d008      	beq.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002bfc:	4a14      	ldr	r2, [pc, #80]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002bfe:	4b14      	ldr	r3, [pc, #80]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002c00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c02:	491a      	ldr	r1, [pc, #104]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002c04:	4019      	ands	r1, r3
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	691b      	ldr	r3, [r3, #16]
 8002c0a:	430b      	orrs	r3, r1
 8002c0c:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	2208      	movs	r2, #8
 8002c14:	4013      	ands	r3, r2
 8002c16:	d008      	beq.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c18:	4a0d      	ldr	r2, [pc, #52]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002c1a:	4b0d      	ldr	r3, [pc, #52]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002c1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c1e:	4914      	ldr	r1, [pc, #80]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002c20:	4019      	ands	r1, r3
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	695b      	ldr	r3, [r3, #20]
 8002c26:	430b      	orrs	r3, r1
 8002c28:	64d3      	str	r3, [r2, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	2280      	movs	r2, #128	; 0x80
 8002c30:	4013      	ands	r3, r2
 8002c32:	d008      	beq.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x232>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002c34:	4a06      	ldr	r2, [pc, #24]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002c36:	4b06      	ldr	r3, [pc, #24]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002c38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c3a:	490e      	ldr	r1, [pc, #56]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c3c:	4019      	ands	r1, r3
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	699b      	ldr	r3, [r3, #24]
 8002c42:	430b      	orrs	r3, r1
 8002c44:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  return HAL_OK;
 8002c46:	2300      	movs	r3, #0
}
 8002c48:	0018      	movs	r0, r3
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	b006      	add	sp, #24
 8002c4e:	bd80      	pop	{r7, pc}
 8002c50:	40021000 	.word	0x40021000
 8002c54:	40007000 	.word	0x40007000
 8002c58:	fffcffff 	.word	0xfffcffff
 8002c5c:	fff7ffff 	.word	0xfff7ffff
 8002c60:	00001388 	.word	0x00001388
 8002c64:	ffcfffff 	.word	0xffcfffff
 8002c68:	efffffff 	.word	0xefffffff
 8002c6c:	fffff3ff 	.word	0xfffff3ff
 8002c70:	ffffcfff 	.word	0xffffcfff
 8002c74:	fff3ffff 	.word	0xfff3ffff

08002c78 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b082      	sub	sp, #8
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d101      	bne.n	8002c8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e044      	b.n	8002d14 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d107      	bne.n	8002ca2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2274      	movs	r2, #116	; 0x74
 8002c96:	2100      	movs	r1, #0
 8002c98:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	0018      	movs	r0, r3
 8002c9e:	f7fe f8d1 	bl	8000e44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2224      	movs	r2, #36	; 0x24
 8002ca6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	687a      	ldr	r2, [r7, #4]
 8002cae:	6812      	ldr	r2, [r2, #0]
 8002cb0:	6812      	ldr	r2, [r2, #0]
 8002cb2:	2101      	movs	r1, #1
 8002cb4:	438a      	bics	r2, r1
 8002cb6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	0018      	movs	r0, r3
 8002cbc:	f000 fbee 	bl	800349c <UART_SetConfig>
 8002cc0:	0003      	movs	r3, r0
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d101      	bne.n	8002cca <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e024      	b.n	8002d14 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d003      	beq.n	8002cda <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	0018      	movs	r0, r3
 8002cd6:	f000 fe85 	bl	80039e4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	687a      	ldr	r2, [r7, #4]
 8002ce0:	6812      	ldr	r2, [r2, #0]
 8002ce2:	6852      	ldr	r2, [r2, #4]
 8002ce4:	490d      	ldr	r1, [pc, #52]	; (8002d1c <HAL_UART_Init+0xa4>)
 8002ce6:	400a      	ands	r2, r1
 8002ce8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	687a      	ldr	r2, [r7, #4]
 8002cf0:	6812      	ldr	r2, [r2, #0]
 8002cf2:	6892      	ldr	r2, [r2, #8]
 8002cf4:	212a      	movs	r1, #42	; 0x2a
 8002cf6:	438a      	bics	r2, r1
 8002cf8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	687a      	ldr	r2, [r7, #4]
 8002d00:	6812      	ldr	r2, [r2, #0]
 8002d02:	6812      	ldr	r2, [r2, #0]
 8002d04:	2101      	movs	r1, #1
 8002d06:	430a      	orrs	r2, r1
 8002d08:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	0018      	movs	r0, r3
 8002d0e:	f000 ff15 	bl	8003b3c <UART_CheckIdleState>
 8002d12:	0003      	movs	r3, r0
}
 8002d14:	0018      	movs	r0, r3
 8002d16:	46bd      	mov	sp, r7
 8002d18:	b002      	add	sp, #8
 8002d1a:	bd80      	pop	{r7, pc}
 8002d1c:	ffffb7ff 	.word	0xffffb7ff

08002d20 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b08a      	sub	sp, #40	; 0x28
 8002d24:	af02      	add	r7, sp, #8
 8002d26:	60f8      	str	r0, [r7, #12]
 8002d28:	60b9      	str	r1, [r7, #8]
 8002d2a:	603b      	str	r3, [r7, #0]
 8002d2c:	1dbb      	adds	r3, r7, #6
 8002d2e:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d34:	2b20      	cmp	r3, #32
 8002d36:	d000      	beq.n	8002d3a <HAL_UART_Transmit+0x1a>
 8002d38:	e094      	b.n	8002e64 <HAL_UART_Transmit+0x144>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d003      	beq.n	8002d48 <HAL_UART_Transmit+0x28>
 8002d40:	1dbb      	adds	r3, r7, #6
 8002d42:	881b      	ldrh	r3, [r3, #0]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d101      	bne.n	8002d4c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e08c      	b.n	8002e66 <HAL_UART_Transmit+0x146>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	689a      	ldr	r2, [r3, #8]
 8002d50:	2380      	movs	r3, #128	; 0x80
 8002d52:	015b      	lsls	r3, r3, #5
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d109      	bne.n	8002d6c <HAL_UART_Transmit+0x4c>
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	691b      	ldr	r3, [r3, #16]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d105      	bne.n	8002d6c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	2201      	movs	r2, #1
 8002d64:	4013      	ands	r3, r2
 8002d66:	d001      	beq.n	8002d6c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e07c      	b.n	8002e66 <HAL_UART_Transmit+0x146>
      }
    }

    __HAL_LOCK(huart);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2274      	movs	r2, #116	; 0x74
 8002d70:	5c9b      	ldrb	r3, [r3, r2]
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d101      	bne.n	8002d7a <HAL_UART_Transmit+0x5a>
 8002d76:	2302      	movs	r3, #2
 8002d78:	e075      	b.n	8002e66 <HAL_UART_Transmit+0x146>
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2274      	movs	r2, #116	; 0x74
 8002d7e:	2101      	movs	r1, #1
 8002d80:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	2280      	movs	r2, #128	; 0x80
 8002d86:	2100      	movs	r1, #0
 8002d88:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2221      	movs	r2, #33	; 0x21
 8002d8e:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d90:	f7fe f938 	bl	8001004 <HAL_GetTick>
 8002d94:	0003      	movs	r3, r0
 8002d96:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	1dba      	adds	r2, r7, #6
 8002d9c:	2150      	movs	r1, #80	; 0x50
 8002d9e:	8812      	ldrh	r2, [r2, #0]
 8002da0:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	1dba      	adds	r2, r7, #6
 8002da6:	2152      	movs	r1, #82	; 0x52
 8002da8:	8812      	ldrh	r2, [r2, #0]
 8002daa:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	689a      	ldr	r2, [r3, #8]
 8002db0:	2380      	movs	r3, #128	; 0x80
 8002db2:	015b      	lsls	r3, r3, #5
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d108      	bne.n	8002dca <HAL_UART_Transmit+0xaa>
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	691b      	ldr	r3, [r3, #16]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d104      	bne.n	8002dca <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	61bb      	str	r3, [r7, #24]
 8002dc8:	e003      	b.n	8002dd2 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2274      	movs	r2, #116	; 0x74
 8002dd6:	2100      	movs	r1, #0
 8002dd8:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8002dda:	e02b      	b.n	8002e34 <HAL_UART_Transmit+0x114>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ddc:	697a      	ldr	r2, [r7, #20]
 8002dde:	68f8      	ldr	r0, [r7, #12]
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	9300      	str	r3, [sp, #0]
 8002de4:	0013      	movs	r3, r2
 8002de6:	2200      	movs	r2, #0
 8002de8:	2180      	movs	r1, #128	; 0x80
 8002dea:	f000 fef1 	bl	8003bd0 <UART_WaitOnFlagUntilTimeout>
 8002dee:	1e03      	subs	r3, r0, #0
 8002df0:	d001      	beq.n	8002df6 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8002df2:	2303      	movs	r3, #3
 8002df4:	e037      	b.n	8002e66 <HAL_UART_Transmit+0x146>
      }
      if (pdata8bits == NULL)
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d10a      	bne.n	8002e12 <HAL_UART_Transmit+0xf2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	69ba      	ldr	r2, [r7, #24]
 8002e02:	8812      	ldrh	r2, [r2, #0]
 8002e04:	05d2      	lsls	r2, r2, #23
 8002e06:	0dd2      	lsrs	r2, r2, #23
 8002e08:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002e0a:	69bb      	ldr	r3, [r7, #24]
 8002e0c:	3302      	adds	r3, #2
 8002e0e:	61bb      	str	r3, [r7, #24]
 8002e10:	e007      	b.n	8002e22 <HAL_UART_Transmit+0x102>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	69fa      	ldr	r2, [r7, #28]
 8002e18:	7812      	ldrb	r2, [r2, #0]
 8002e1a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002e1c:	69fb      	ldr	r3, [r7, #28]
 8002e1e:	3301      	adds	r3, #1
 8002e20:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2252      	movs	r2, #82	; 0x52
 8002e26:	5a9b      	ldrh	r3, [r3, r2]
 8002e28:	b29b      	uxth	r3, r3
 8002e2a:	3b01      	subs	r3, #1
 8002e2c:	b299      	uxth	r1, r3
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2252      	movs	r2, #82	; 0x52
 8002e32:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2252      	movs	r2, #82	; 0x52
 8002e38:	5a9b      	ldrh	r3, [r3, r2]
 8002e3a:	b29b      	uxth	r3, r3
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d1cd      	bne.n	8002ddc <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e40:	697a      	ldr	r2, [r7, #20]
 8002e42:	68f8      	ldr	r0, [r7, #12]
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	9300      	str	r3, [sp, #0]
 8002e48:	0013      	movs	r3, r2
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	2140      	movs	r1, #64	; 0x40
 8002e4e:	f000 febf 	bl	8003bd0 <UART_WaitOnFlagUntilTimeout>
 8002e52:	1e03      	subs	r3, r0, #0
 8002e54:	d001      	beq.n	8002e5a <HAL_UART_Transmit+0x13a>
    {
      return HAL_TIMEOUT;
 8002e56:	2303      	movs	r3, #3
 8002e58:	e005      	b.n	8002e66 <HAL_UART_Transmit+0x146>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2220      	movs	r2, #32
 8002e5e:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002e60:	2300      	movs	r3, #0
 8002e62:	e000      	b.n	8002e66 <HAL_UART_Transmit+0x146>
  }
  else
  {
    return HAL_BUSY;
 8002e64:	2302      	movs	r3, #2
  }
}
 8002e66:	0018      	movs	r0, r3
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	b008      	add	sp, #32
 8002e6c:	bd80      	pop	{r7, pc}
	...

08002e70 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b08a      	sub	sp, #40	; 0x28
 8002e74:	af02      	add	r7, sp, #8
 8002e76:	60f8      	str	r0, [r7, #12]
 8002e78:	60b9      	str	r1, [r7, #8]
 8002e7a:	603b      	str	r3, [r7, #0]
 8002e7c:	1dbb      	adds	r3, r7, #6
 8002e7e:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e84:	2b20      	cmp	r3, #32
 8002e86:	d000      	beq.n	8002e8a <HAL_UART_Receive+0x1a>
 8002e88:	e0d9      	b.n	800303e <HAL_UART_Receive+0x1ce>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d003      	beq.n	8002e98 <HAL_UART_Receive+0x28>
 8002e90:	1dbb      	adds	r3, r7, #6
 8002e92:	881b      	ldrh	r3, [r3, #0]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d101      	bne.n	8002e9c <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e0d1      	b.n	8003040 <HAL_UART_Receive+0x1d0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	689a      	ldr	r2, [r3, #8]
 8002ea0:	2380      	movs	r3, #128	; 0x80
 8002ea2:	015b      	lsls	r3, r3, #5
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d109      	bne.n	8002ebc <HAL_UART_Receive+0x4c>
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	691b      	ldr	r3, [r3, #16]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d105      	bne.n	8002ebc <HAL_UART_Receive+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	d001      	beq.n	8002ebc <HAL_UART_Receive+0x4c>
      {
        return  HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e0c1      	b.n	8003040 <HAL_UART_Receive+0x1d0>
      }
    }

    __HAL_LOCK(huart);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2274      	movs	r2, #116	; 0x74
 8002ec0:	5c9b      	ldrb	r3, [r3, r2]
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d101      	bne.n	8002eca <HAL_UART_Receive+0x5a>
 8002ec6:	2302      	movs	r3, #2
 8002ec8:	e0ba      	b.n	8003040 <HAL_UART_Receive+0x1d0>
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2274      	movs	r2, #116	; 0x74
 8002ece:	2101      	movs	r1, #1
 8002ed0:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2280      	movs	r2, #128	; 0x80
 8002ed6:	2100      	movs	r1, #0
 8002ed8:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2222      	movs	r2, #34	; 0x22
 8002ede:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002ee6:	f7fe f88d 	bl	8001004 <HAL_GetTick>
 8002eea:	0003      	movs	r3, r0
 8002eec:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	1dba      	adds	r2, r7, #6
 8002ef2:	2158      	movs	r1, #88	; 0x58
 8002ef4:	8812      	ldrh	r2, [r2, #0]
 8002ef6:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	1dba      	adds	r2, r7, #6
 8002efc:	215a      	movs	r1, #90	; 0x5a
 8002efe:	8812      	ldrh	r2, [r2, #0]
 8002f00:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	689a      	ldr	r2, [r3, #8]
 8002f06:	2380      	movs	r3, #128	; 0x80
 8002f08:	015b      	lsls	r3, r3, #5
 8002f0a:	429a      	cmp	r2, r3
 8002f0c:	d10d      	bne.n	8002f2a <HAL_UART_Receive+0xba>
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	691b      	ldr	r3, [r3, #16]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d104      	bne.n	8002f20 <HAL_UART_Receive+0xb0>
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	225c      	movs	r2, #92	; 0x5c
 8002f1a:	494b      	ldr	r1, [pc, #300]	; (8003048 <HAL_UART_Receive+0x1d8>)
 8002f1c:	5299      	strh	r1, [r3, r2]
 8002f1e:	e02e      	b.n	8002f7e <HAL_UART_Receive+0x10e>
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	225c      	movs	r2, #92	; 0x5c
 8002f24:	21ff      	movs	r1, #255	; 0xff
 8002f26:	5299      	strh	r1, [r3, r2]
 8002f28:	e029      	b.n	8002f7e <HAL_UART_Receive+0x10e>
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d10d      	bne.n	8002f4e <HAL_UART_Receive+0xde>
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	691b      	ldr	r3, [r3, #16]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d104      	bne.n	8002f44 <HAL_UART_Receive+0xd4>
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	225c      	movs	r2, #92	; 0x5c
 8002f3e:	21ff      	movs	r1, #255	; 0xff
 8002f40:	5299      	strh	r1, [r3, r2]
 8002f42:	e01c      	b.n	8002f7e <HAL_UART_Receive+0x10e>
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	225c      	movs	r2, #92	; 0x5c
 8002f48:	217f      	movs	r1, #127	; 0x7f
 8002f4a:	5299      	strh	r1, [r3, r2]
 8002f4c:	e017      	b.n	8002f7e <HAL_UART_Receive+0x10e>
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	689a      	ldr	r2, [r3, #8]
 8002f52:	2380      	movs	r3, #128	; 0x80
 8002f54:	055b      	lsls	r3, r3, #21
 8002f56:	429a      	cmp	r2, r3
 8002f58:	d10d      	bne.n	8002f76 <HAL_UART_Receive+0x106>
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	691b      	ldr	r3, [r3, #16]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d104      	bne.n	8002f6c <HAL_UART_Receive+0xfc>
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	225c      	movs	r2, #92	; 0x5c
 8002f66:	217f      	movs	r1, #127	; 0x7f
 8002f68:	5299      	strh	r1, [r3, r2]
 8002f6a:	e008      	b.n	8002f7e <HAL_UART_Receive+0x10e>
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	225c      	movs	r2, #92	; 0x5c
 8002f70:	213f      	movs	r1, #63	; 0x3f
 8002f72:	5299      	strh	r1, [r3, r2]
 8002f74:	e003      	b.n	8002f7e <HAL_UART_Receive+0x10e>
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	225c      	movs	r2, #92	; 0x5c
 8002f7a:	2100      	movs	r1, #0
 8002f7c:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8002f7e:	2312      	movs	r3, #18
 8002f80:	18fb      	adds	r3, r7, r3
 8002f82:	68fa      	ldr	r2, [r7, #12]
 8002f84:	215c      	movs	r1, #92	; 0x5c
 8002f86:	5a52      	ldrh	r2, [r2, r1]
 8002f88:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	689a      	ldr	r2, [r3, #8]
 8002f8e:	2380      	movs	r3, #128	; 0x80
 8002f90:	015b      	lsls	r3, r3, #5
 8002f92:	429a      	cmp	r2, r3
 8002f94:	d108      	bne.n	8002fa8 <HAL_UART_Receive+0x138>
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	691b      	ldr	r3, [r3, #16]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d104      	bne.n	8002fa8 <HAL_UART_Receive+0x138>
    {
      pdata8bits  = NULL;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	61bb      	str	r3, [r7, #24]
 8002fa6:	e003      	b.n	8002fb0 <HAL_UART_Receive+0x140>
    }
    else
    {
      pdata8bits  = pData;
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002fac:	2300      	movs	r3, #0
 8002fae:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2274      	movs	r2, #116	; 0x74
 8002fb4:	2100      	movs	r1, #0
 8002fb6:	5499      	strb	r1, [r3, r2]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002fb8:	e036      	b.n	8003028 <HAL_UART_Receive+0x1b8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002fba:	697a      	ldr	r2, [r7, #20]
 8002fbc:	68f8      	ldr	r0, [r7, #12]
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	9300      	str	r3, [sp, #0]
 8002fc2:	0013      	movs	r3, r2
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	2120      	movs	r1, #32
 8002fc8:	f000 fe02 	bl	8003bd0 <UART_WaitOnFlagUntilTimeout>
 8002fcc:	1e03      	subs	r3, r0, #0
 8002fce:	d001      	beq.n	8002fd4 <HAL_UART_Receive+0x164>
      {
        return HAL_TIMEOUT;
 8002fd0:	2303      	movs	r3, #3
 8002fd2:	e035      	b.n	8003040 <HAL_UART_Receive+0x1d0>
      }
      if (pdata8bits == NULL)
 8002fd4:	69fb      	ldr	r3, [r7, #28]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d10e      	bne.n	8002ff8 <HAL_UART_Receive+0x188>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe0:	b29b      	uxth	r3, r3
 8002fe2:	2212      	movs	r2, #18
 8002fe4:	18ba      	adds	r2, r7, r2
 8002fe6:	8812      	ldrh	r2, [r2, #0]
 8002fe8:	4013      	ands	r3, r2
 8002fea:	b29a      	uxth	r2, r3
 8002fec:	69bb      	ldr	r3, [r7, #24]
 8002fee:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002ff0:	69bb      	ldr	r3, [r7, #24]
 8002ff2:	3302      	adds	r3, #2
 8002ff4:	61bb      	str	r3, [r7, #24]
 8002ff6:	e00e      	b.n	8003016 <HAL_UART_Receive+0x1a6>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	2212      	movs	r2, #18
 8003002:	18ba      	adds	r2, r7, r2
 8003004:	8812      	ldrh	r2, [r2, #0]
 8003006:	b2d2      	uxtb	r2, r2
 8003008:	4013      	ands	r3, r2
 800300a:	b2da      	uxtb	r2, r3
 800300c:	69fb      	ldr	r3, [r7, #28]
 800300e:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003010:	69fb      	ldr	r3, [r7, #28]
 8003012:	3301      	adds	r3, #1
 8003014:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	225a      	movs	r2, #90	; 0x5a
 800301a:	5a9b      	ldrh	r3, [r3, r2]
 800301c:	b29b      	uxth	r3, r3
 800301e:	3b01      	subs	r3, #1
 8003020:	b299      	uxth	r1, r3
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	225a      	movs	r2, #90	; 0x5a
 8003026:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	225a      	movs	r2, #90	; 0x5a
 800302c:	5a9b      	ldrh	r3, [r3, r2]
 800302e:	b29b      	uxth	r3, r3
 8003030:	2b00      	cmp	r3, #0
 8003032:	d1c2      	bne.n	8002fba <HAL_UART_Receive+0x14a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2220      	movs	r2, #32
 8003038:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800303a:	2300      	movs	r3, #0
 800303c:	e000      	b.n	8003040 <HAL_UART_Receive+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 800303e:	2302      	movs	r3, #2
  }
}
 8003040:	0018      	movs	r0, r3
 8003042:	46bd      	mov	sp, r7
 8003044:	b008      	add	sp, #32
 8003046:	bd80      	pop	{r7, pc}
 8003048:	000001ff 	.word	0x000001ff

0800304c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b088      	sub	sp, #32
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	69db      	ldr	r3, [r3, #28]
 800305a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800306c:	69fb      	ldr	r3, [r7, #28]
 800306e:	4ab7      	ldr	r2, [pc, #732]	; (800334c <HAL_UART_IRQHandler+0x300>)
 8003070:	4013      	ands	r3, r2
 8003072:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d112      	bne.n	80030a0 <HAL_UART_IRQHandler+0x54>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800307a:	69fb      	ldr	r3, [r7, #28]
 800307c:	2220      	movs	r2, #32
 800307e:	4013      	ands	r3, r2
 8003080:	d00e      	beq.n	80030a0 <HAL_UART_IRQHandler+0x54>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003082:	69bb      	ldr	r3, [r7, #24]
 8003084:	2220      	movs	r2, #32
 8003086:	4013      	ands	r3, r2
 8003088:	d00a      	beq.n	80030a0 <HAL_UART_IRQHandler+0x54>
    {
      if (huart->RxISR != NULL)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800308e:	2b00      	cmp	r3, #0
 8003090:	d100      	bne.n	8003094 <HAL_UART_IRQHandler+0x48>
 8003092:	e1d8      	b.n	8003446 <HAL_UART_IRQHandler+0x3fa>
      {
        huart->RxISR(huart);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003098:	687a      	ldr	r2, [r7, #4]
 800309a:	0010      	movs	r0, r2
 800309c:	4798      	blx	r3
      }
      return;
 800309e:	e1d2      	b.n	8003446 <HAL_UART_IRQHandler+0x3fa>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d100      	bne.n	80030a8 <HAL_UART_IRQHandler+0x5c>
 80030a6:	e0d9      	b.n	800325c <HAL_UART_IRQHandler+0x210>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	2201      	movs	r2, #1
 80030ac:	4013      	ands	r3, r2
 80030ae:	d104      	bne.n	80030ba <HAL_UART_IRQHandler+0x6e>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80030b0:	69bb      	ldr	r3, [r7, #24]
 80030b2:	4aa7      	ldr	r2, [pc, #668]	; (8003350 <HAL_UART_IRQHandler+0x304>)
 80030b4:	4013      	ands	r3, r2
 80030b6:	d100      	bne.n	80030ba <HAL_UART_IRQHandler+0x6e>
 80030b8:	e0d0      	b.n	800325c <HAL_UART_IRQHandler+0x210>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80030ba:	69fb      	ldr	r3, [r7, #28]
 80030bc:	2201      	movs	r2, #1
 80030be:	4013      	ands	r3, r2
 80030c0:	d010      	beq.n	80030e4 <HAL_UART_IRQHandler+0x98>
 80030c2:	69ba      	ldr	r2, [r7, #24]
 80030c4:	2380      	movs	r3, #128	; 0x80
 80030c6:	005b      	lsls	r3, r3, #1
 80030c8:	4013      	ands	r3, r2
 80030ca:	d00b      	beq.n	80030e4 <HAL_UART_IRQHandler+0x98>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	2201      	movs	r2, #1
 80030d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2280      	movs	r2, #128	; 0x80
 80030d8:	589b      	ldr	r3, [r3, r2]
 80030da:	2201      	movs	r2, #1
 80030dc:	431a      	orrs	r2, r3
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2180      	movs	r1, #128	; 0x80
 80030e2:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80030e4:	69fb      	ldr	r3, [r7, #28]
 80030e6:	2202      	movs	r2, #2
 80030e8:	4013      	ands	r3, r2
 80030ea:	d00f      	beq.n	800310c <HAL_UART_IRQHandler+0xc0>
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	2201      	movs	r2, #1
 80030f0:	4013      	ands	r3, r2
 80030f2:	d00b      	beq.n	800310c <HAL_UART_IRQHandler+0xc0>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	2202      	movs	r2, #2
 80030fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2280      	movs	r2, #128	; 0x80
 8003100:	589b      	ldr	r3, [r3, r2]
 8003102:	2204      	movs	r2, #4
 8003104:	431a      	orrs	r2, r3
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2180      	movs	r1, #128	; 0x80
 800310a:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800310c:	69fb      	ldr	r3, [r7, #28]
 800310e:	2204      	movs	r2, #4
 8003110:	4013      	ands	r3, r2
 8003112:	d00f      	beq.n	8003134 <HAL_UART_IRQHandler+0xe8>
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	2201      	movs	r2, #1
 8003118:	4013      	ands	r3, r2
 800311a:	d00b      	beq.n	8003134 <HAL_UART_IRQHandler+0xe8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	2204      	movs	r2, #4
 8003122:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2280      	movs	r2, #128	; 0x80
 8003128:	589b      	ldr	r3, [r3, r2]
 800312a:	2202      	movs	r2, #2
 800312c:	431a      	orrs	r2, r3
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2180      	movs	r1, #128	; 0x80
 8003132:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003134:	69fb      	ldr	r3, [r7, #28]
 8003136:	2208      	movs	r2, #8
 8003138:	4013      	ands	r3, r2
 800313a:	d013      	beq.n	8003164 <HAL_UART_IRQHandler+0x118>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800313c:	69bb      	ldr	r3, [r7, #24]
 800313e:	2220      	movs	r2, #32
 8003140:	4013      	ands	r3, r2
 8003142:	d103      	bne.n	800314c <HAL_UART_IRQHandler+0x100>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	2201      	movs	r2, #1
 8003148:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800314a:	d00b      	beq.n	8003164 <HAL_UART_IRQHandler+0x118>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	2208      	movs	r2, #8
 8003152:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2280      	movs	r2, #128	; 0x80
 8003158:	589b      	ldr	r3, [r3, r2]
 800315a:	2208      	movs	r2, #8
 800315c:	431a      	orrs	r2, r3
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2180      	movs	r1, #128	; 0x80
 8003162:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003164:	69fa      	ldr	r2, [r7, #28]
 8003166:	2380      	movs	r3, #128	; 0x80
 8003168:	011b      	lsls	r3, r3, #4
 800316a:	4013      	ands	r3, r2
 800316c:	d011      	beq.n	8003192 <HAL_UART_IRQHandler+0x146>
 800316e:	69ba      	ldr	r2, [r7, #24]
 8003170:	2380      	movs	r3, #128	; 0x80
 8003172:	04db      	lsls	r3, r3, #19
 8003174:	4013      	ands	r3, r2
 8003176:	d00c      	beq.n	8003192 <HAL_UART_IRQHandler+0x146>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	2280      	movs	r2, #128	; 0x80
 800317e:	0112      	lsls	r2, r2, #4
 8003180:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2280      	movs	r2, #128	; 0x80
 8003186:	589b      	ldr	r3, [r3, r2]
 8003188:	2220      	movs	r2, #32
 800318a:	431a      	orrs	r2, r3
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2180      	movs	r1, #128	; 0x80
 8003190:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2280      	movs	r2, #128	; 0x80
 8003196:	589b      	ldr	r3, [r3, r2]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d100      	bne.n	800319e <HAL_UART_IRQHandler+0x152>
 800319c:	e155      	b.n	800344a <HAL_UART_IRQHandler+0x3fe>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800319e:	69fb      	ldr	r3, [r7, #28]
 80031a0:	2220      	movs	r2, #32
 80031a2:	4013      	ands	r3, r2
 80031a4:	d00c      	beq.n	80031c0 <HAL_UART_IRQHandler+0x174>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80031a6:	69bb      	ldr	r3, [r7, #24]
 80031a8:	2220      	movs	r2, #32
 80031aa:	4013      	ands	r3, r2
 80031ac:	d008      	beq.n	80031c0 <HAL_UART_IRQHandler+0x174>
      {
        if (huart->RxISR != NULL)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d004      	beq.n	80031c0 <HAL_UART_IRQHandler+0x174>
        {
          huart->RxISR(huart);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031ba:	687a      	ldr	r2, [r7, #4]
 80031bc:	0010      	movs	r0, r2
 80031be:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2280      	movs	r2, #128	; 0x80
 80031c4:	589b      	ldr	r3, [r3, r2]
 80031c6:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	2240      	movs	r2, #64	; 0x40
 80031d0:	4013      	ands	r3, r2
 80031d2:	2b40      	cmp	r3, #64	; 0x40
 80031d4:	d003      	beq.n	80031de <HAL_UART_IRQHandler+0x192>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2228      	movs	r2, #40	; 0x28
 80031da:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80031dc:	d033      	beq.n	8003246 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	0018      	movs	r0, r3
 80031e2:	f000 fd73 	bl	8003ccc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	2240      	movs	r2, #64	; 0x40
 80031ee:	4013      	ands	r3, r2
 80031f0:	2b40      	cmp	r3, #64	; 0x40
 80031f2:	d123      	bne.n	800323c <HAL_UART_IRQHandler+0x1f0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	687a      	ldr	r2, [r7, #4]
 80031fa:	6812      	ldr	r2, [r2, #0]
 80031fc:	6892      	ldr	r2, [r2, #8]
 80031fe:	2140      	movs	r1, #64	; 0x40
 8003200:	438a      	bics	r2, r1
 8003202:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003208:	2b00      	cmp	r3, #0
 800320a:	d012      	beq.n	8003232 <HAL_UART_IRQHandler+0x1e6>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003210:	4a50      	ldr	r2, [pc, #320]	; (8003354 <HAL_UART_IRQHandler+0x308>)
 8003212:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003218:	0018      	movs	r0, r3
 800321a:	f7fe fc94 	bl	8001b46 <HAL_DMA_Abort_IT>
 800321e:	1e03      	subs	r3, r0, #0
 8003220:	d01a      	beq.n	8003258 <HAL_UART_IRQHandler+0x20c>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003226:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800322c:	0018      	movs	r0, r3
 800322e:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003230:	e012      	b.n	8003258 <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	0018      	movs	r0, r3
 8003236:	f000 f91d 	bl	8003474 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800323a:	e00d      	b.n	8003258 <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	0018      	movs	r0, r3
 8003240:	f000 f918 	bl	8003474 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003244:	e008      	b.n	8003258 <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	0018      	movs	r0, r3
 800324a:	f000 f913 	bl	8003474 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2280      	movs	r2, #128	; 0x80
 8003252:	2100      	movs	r1, #0
 8003254:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8003256:	e0f8      	b.n	800344a <HAL_UART_IRQHandler+0x3fe>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003258:	46c0      	nop			; (mov r8, r8)
    return;
 800325a:	e0f6      	b.n	800344a <HAL_UART_IRQHandler+0x3fe>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003260:	2b01      	cmp	r3, #1
 8003262:	d000      	beq.n	8003266 <HAL_UART_IRQHandler+0x21a>
 8003264:	e0bb      	b.n	80033de <HAL_UART_IRQHandler+0x392>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8003266:	69fb      	ldr	r3, [r7, #28]
 8003268:	2210      	movs	r2, #16
 800326a:	4013      	ands	r3, r2
 800326c:	d100      	bne.n	8003270 <HAL_UART_IRQHandler+0x224>
 800326e:	e0b6      	b.n	80033de <HAL_UART_IRQHandler+0x392>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8003270:	69bb      	ldr	r3, [r7, #24]
 8003272:	2210      	movs	r2, #16
 8003274:	4013      	ands	r3, r2
 8003276:	d100      	bne.n	800327a <HAL_UART_IRQHandler+0x22e>
 8003278:	e0b1      	b.n	80033de <HAL_UART_IRQHandler+0x392>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	2210      	movs	r2, #16
 8003280:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	2240      	movs	r2, #64	; 0x40
 800328a:	4013      	ands	r3, r2
 800328c:	2b40      	cmp	r3, #64	; 0x40
 800328e:	d165      	bne.n	800335c <HAL_UART_IRQHandler+0x310>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	685a      	ldr	r2, [r3, #4]
 8003298:	230a      	movs	r3, #10
 800329a:	18fb      	adds	r3, r7, r3
 800329c:	801a      	strh	r2, [r3, #0]
      if (  (nb_remaining_rx_data > 0U)
 800329e:	230a      	movs	r3, #10
 80032a0:	18fb      	adds	r3, r7, r3
 80032a2:	881b      	ldrh	r3, [r3, #0]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d100      	bne.n	80032aa <HAL_UART_IRQHandler+0x25e>
 80032a8:	e0d1      	b.n	800344e <HAL_UART_IRQHandler+0x402>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2258      	movs	r2, #88	; 0x58
 80032ae:	5a9b      	ldrh	r3, [r3, r2]
 80032b0:	220a      	movs	r2, #10
 80032b2:	18ba      	adds	r2, r7, r2
 80032b4:	8812      	ldrh	r2, [r2, #0]
 80032b6:	429a      	cmp	r2, r3
 80032b8:	d300      	bcc.n	80032bc <HAL_UART_IRQHandler+0x270>
 80032ba:	e0c8      	b.n	800344e <HAL_UART_IRQHandler+0x402>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	220a      	movs	r2, #10
 80032c0:	18ba      	adds	r2, r7, r2
 80032c2:	215a      	movs	r1, #90	; 0x5a
 80032c4:	8812      	ldrh	r2, [r2, #0]
 80032c6:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	2220      	movs	r2, #32
 80032d2:	4013      	ands	r3, r2
 80032d4:	d12a      	bne.n	800332c <HAL_UART_IRQHandler+0x2e0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	687a      	ldr	r2, [r7, #4]
 80032dc:	6812      	ldr	r2, [r2, #0]
 80032de:	6812      	ldr	r2, [r2, #0]
 80032e0:	491d      	ldr	r1, [pc, #116]	; (8003358 <HAL_UART_IRQHandler+0x30c>)
 80032e2:	400a      	ands	r2, r1
 80032e4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	687a      	ldr	r2, [r7, #4]
 80032ec:	6812      	ldr	r2, [r2, #0]
 80032ee:	6892      	ldr	r2, [r2, #8]
 80032f0:	2101      	movs	r1, #1
 80032f2:	438a      	bics	r2, r1
 80032f4:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	687a      	ldr	r2, [r7, #4]
 80032fc:	6812      	ldr	r2, [r2, #0]
 80032fe:	6892      	ldr	r2, [r2, #8]
 8003300:	2140      	movs	r1, #64	; 0x40
 8003302:	438a      	bics	r2, r1
 8003304:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2220      	movs	r2, #32
 800330a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2200      	movs	r2, #0
 8003310:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	687a      	ldr	r2, [r7, #4]
 8003318:	6812      	ldr	r2, [r2, #0]
 800331a:	6812      	ldr	r2, [r2, #0]
 800331c:	2110      	movs	r1, #16
 800331e:	438a      	bics	r2, r1
 8003320:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003326:	0018      	movs	r0, r3
 8003328:	f7fe fbcd 	bl	8001ac6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2258      	movs	r2, #88	; 0x58
 8003330:	5a9a      	ldrh	r2, [r3, r2]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	215a      	movs	r1, #90	; 0x5a
 8003336:	5a5b      	ldrh	r3, [r3, r1]
 8003338:	b29b      	uxth	r3, r3
 800333a:	1ad3      	subs	r3, r2, r3
 800333c:	b29a      	uxth	r2, r3
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	0011      	movs	r1, r2
 8003342:	0018      	movs	r0, r3
 8003344:	f000 f89e 	bl	8003484 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003348:	e081      	b.n	800344e <HAL_UART_IRQHandler+0x402>
 800334a:	46c0      	nop			; (mov r8, r8)
 800334c:	0000080f 	.word	0x0000080f
 8003350:	04000120 	.word	0x04000120
 8003354:	08003d2d 	.word	0x08003d2d
 8003358:	fffffeff 	.word	0xfffffeff
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2258      	movs	r2, #88	; 0x58
 8003360:	5a99      	ldrh	r1, [r3, r2]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	225a      	movs	r2, #90	; 0x5a
 8003366:	5a9b      	ldrh	r3, [r3, r2]
 8003368:	b29a      	uxth	r2, r3
 800336a:	2308      	movs	r3, #8
 800336c:	18fb      	adds	r3, r7, r3
 800336e:	1a8a      	subs	r2, r1, r2
 8003370:	801a      	strh	r2, [r3, #0]
      if (  (huart->RxXferCount > 0U)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	225a      	movs	r2, #90	; 0x5a
 8003376:	5a9b      	ldrh	r3, [r3, r2]
 8003378:	b29b      	uxth	r3, r3
 800337a:	2b00      	cmp	r3, #0
 800337c:	d100      	bne.n	8003380 <HAL_UART_IRQHandler+0x334>
 800337e:	e068      	b.n	8003452 <HAL_UART_IRQHandler+0x406>
          &&(nb_rx_data > 0U) )
 8003380:	2308      	movs	r3, #8
 8003382:	18fb      	adds	r3, r7, r3
 8003384:	881b      	ldrh	r3, [r3, #0]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d063      	beq.n	8003452 <HAL_UART_IRQHandler+0x406>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	6812      	ldr	r2, [r2, #0]
 8003392:	6812      	ldr	r2, [r2, #0]
 8003394:	4932      	ldr	r1, [pc, #200]	; (8003460 <HAL_UART_IRQHandler+0x414>)
 8003396:	400a      	ands	r2, r1
 8003398:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	687a      	ldr	r2, [r7, #4]
 80033a0:	6812      	ldr	r2, [r2, #0]
 80033a2:	6892      	ldr	r2, [r2, #8]
 80033a4:	2101      	movs	r1, #1
 80033a6:	438a      	bics	r2, r1
 80033a8:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2220      	movs	r2, #32
 80033ae:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2200      	movs	r2, #0
 80033b4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2200      	movs	r2, #0
 80033ba:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	687a      	ldr	r2, [r7, #4]
 80033c2:	6812      	ldr	r2, [r2, #0]
 80033c4:	6812      	ldr	r2, [r2, #0]
 80033c6:	2110      	movs	r1, #16
 80033c8:	438a      	bics	r2, r1
 80033ca:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80033cc:	2308      	movs	r3, #8
 80033ce:	18fb      	adds	r3, r7, r3
 80033d0:	881a      	ldrh	r2, [r3, #0]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	0011      	movs	r1, r2
 80033d6:	0018      	movs	r0, r3
 80033d8:	f000 f854 	bl	8003484 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80033dc:	e039      	b.n	8003452 <HAL_UART_IRQHandler+0x406>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80033de:	69fa      	ldr	r2, [r7, #28]
 80033e0:	2380      	movs	r3, #128	; 0x80
 80033e2:	035b      	lsls	r3, r3, #13
 80033e4:	4013      	ands	r3, r2
 80033e6:	d00e      	beq.n	8003406 <HAL_UART_IRQHandler+0x3ba>
 80033e8:	697a      	ldr	r2, [r7, #20]
 80033ea:	2380      	movs	r3, #128	; 0x80
 80033ec:	03db      	lsls	r3, r3, #15
 80033ee:	4013      	ands	r3, r2
 80033f0:	d009      	beq.n	8003406 <HAL_UART_IRQHandler+0x3ba>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	2280      	movs	r2, #128	; 0x80
 80033f8:	0352      	lsls	r2, r2, #13
 80033fa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	0018      	movs	r0, r3
 8003400:	f000 fcc5 	bl	8003d8e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003404:	e028      	b.n	8003458 <HAL_UART_IRQHandler+0x40c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003406:	69fb      	ldr	r3, [r7, #28]
 8003408:	2280      	movs	r2, #128	; 0x80
 800340a:	4013      	ands	r3, r2
 800340c:	d00d      	beq.n	800342a <HAL_UART_IRQHandler+0x3de>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800340e:	69bb      	ldr	r3, [r7, #24]
 8003410:	2280      	movs	r2, #128	; 0x80
 8003412:	4013      	ands	r3, r2
 8003414:	d009      	beq.n	800342a <HAL_UART_IRQHandler+0x3de>
  {
    if (huart->TxISR != NULL)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800341a:	2b00      	cmp	r3, #0
 800341c:	d01b      	beq.n	8003456 <HAL_UART_IRQHandler+0x40a>
    {
      huart->TxISR(huart);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003422:	687a      	ldr	r2, [r7, #4]
 8003424:	0010      	movs	r0, r2
 8003426:	4798      	blx	r3
    }
    return;
 8003428:	e015      	b.n	8003456 <HAL_UART_IRQHandler+0x40a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800342a:	69fb      	ldr	r3, [r7, #28]
 800342c:	2240      	movs	r2, #64	; 0x40
 800342e:	4013      	ands	r3, r2
 8003430:	d012      	beq.n	8003458 <HAL_UART_IRQHandler+0x40c>
 8003432:	69bb      	ldr	r3, [r7, #24]
 8003434:	2240      	movs	r2, #64	; 0x40
 8003436:	4013      	ands	r3, r2
 8003438:	d00e      	beq.n	8003458 <HAL_UART_IRQHandler+0x40c>
  {
    UART_EndTransmit_IT(huart);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	0018      	movs	r0, r3
 800343e:	f000 fc8c 	bl	8003d5a <UART_EndTransmit_IT>
    return;
 8003442:	46c0      	nop			; (mov r8, r8)
 8003444:	e008      	b.n	8003458 <HAL_UART_IRQHandler+0x40c>
      return;
 8003446:	46c0      	nop			; (mov r8, r8)
 8003448:	e006      	b.n	8003458 <HAL_UART_IRQHandler+0x40c>
    return;
 800344a:	46c0      	nop			; (mov r8, r8)
 800344c:	e004      	b.n	8003458 <HAL_UART_IRQHandler+0x40c>
      return;
 800344e:	46c0      	nop			; (mov r8, r8)
 8003450:	e002      	b.n	8003458 <HAL_UART_IRQHandler+0x40c>
      return;
 8003452:	46c0      	nop			; (mov r8, r8)
 8003454:	e000      	b.n	8003458 <HAL_UART_IRQHandler+0x40c>
    return;
 8003456:	46c0      	nop			; (mov r8, r8)
  }

}
 8003458:	46bd      	mov	sp, r7
 800345a:	b008      	add	sp, #32
 800345c:	bd80      	pop	{r7, pc}
 800345e:	46c0      	nop			; (mov r8, r8)
 8003460:	fffffedf 	.word	0xfffffedf

08003464 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b082      	sub	sp, #8
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800346c:	46c0      	nop			; (mov r8, r8)
 800346e:	46bd      	mov	sp, r7
 8003470:	b002      	add	sp, #8
 8003472:	bd80      	pop	{r7, pc}

08003474 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b082      	sub	sp, #8
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800347c:	46c0      	nop			; (mov r8, r8)
 800347e:	46bd      	mov	sp, r7
 8003480:	b002      	add	sp, #8
 8003482:	bd80      	pop	{r7, pc}

08003484 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b082      	sub	sp, #8
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
 800348c:	000a      	movs	r2, r1
 800348e:	1cbb      	adds	r3, r7, #2
 8003490:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003492:	46c0      	nop			; (mov r8, r8)
 8003494:	46bd      	mov	sp, r7
 8003496:	b002      	add	sp, #8
 8003498:	bd80      	pop	{r7, pc}
	...

0800349c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800349c:	b5b0      	push	{r4, r5, r7, lr}
 800349e:	b08e      	sub	sp, #56	; 0x38
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80034a4:	231a      	movs	r3, #26
 80034a6:	2218      	movs	r2, #24
 80034a8:	4694      	mov	ip, r2
 80034aa:	44bc      	add	ip, r7
 80034ac:	4463      	add	r3, ip
 80034ae:	2200      	movs	r2, #0
 80034b0:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80034b2:	69fb      	ldr	r3, [r7, #28]
 80034b4:	689a      	ldr	r2, [r3, #8]
 80034b6:	69fb      	ldr	r3, [r7, #28]
 80034b8:	691b      	ldr	r3, [r3, #16]
 80034ba:	431a      	orrs	r2, r3
 80034bc:	69fb      	ldr	r3, [r7, #28]
 80034be:	695b      	ldr	r3, [r3, #20]
 80034c0:	431a      	orrs	r2, r3
 80034c2:	69fb      	ldr	r3, [r7, #28]
 80034c4:	69db      	ldr	r3, [r3, #28]
 80034c6:	4313      	orrs	r3, r2
 80034c8:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80034ca:	69fb      	ldr	r3, [r7, #28]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	69fa      	ldr	r2, [r7, #28]
 80034d0:	6812      	ldr	r2, [r2, #0]
 80034d2:	6812      	ldr	r2, [r2, #0]
 80034d4:	49ca      	ldr	r1, [pc, #808]	; (8003800 <UART_SetConfig+0x364>)
 80034d6:	4011      	ands	r1, r2
 80034d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80034da:	430a      	orrs	r2, r1
 80034dc:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034de:	69fb      	ldr	r3, [r7, #28]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	69fa      	ldr	r2, [r7, #28]
 80034e4:	6812      	ldr	r2, [r2, #0]
 80034e6:	6852      	ldr	r2, [r2, #4]
 80034e8:	49c6      	ldr	r1, [pc, #792]	; (8003804 <UART_SetConfig+0x368>)
 80034ea:	4011      	ands	r1, r2
 80034ec:	69fa      	ldr	r2, [r7, #28]
 80034ee:	68d2      	ldr	r2, [r2, #12]
 80034f0:	430a      	orrs	r2, r1
 80034f2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80034f4:	69fb      	ldr	r3, [r7, #28]
 80034f6:	699b      	ldr	r3, [r3, #24]
 80034f8:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80034fa:	69fb      	ldr	r3, [r7, #28]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4ac2      	ldr	r2, [pc, #776]	; (8003808 <UART_SetConfig+0x36c>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d004      	beq.n	800350e <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003504:	69fb      	ldr	r3, [r7, #28]
 8003506:	6a1b      	ldr	r3, [r3, #32]
 8003508:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800350a:	4313      	orrs	r3, r2
 800350c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800350e:	69fb      	ldr	r3, [r7, #28]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	69fa      	ldr	r2, [r7, #28]
 8003514:	6812      	ldr	r2, [r2, #0]
 8003516:	6892      	ldr	r2, [r2, #8]
 8003518:	49bc      	ldr	r1, [pc, #752]	; (800380c <UART_SetConfig+0x370>)
 800351a:	4011      	ands	r1, r2
 800351c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800351e:	430a      	orrs	r2, r1
 8003520:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003522:	69fb      	ldr	r3, [r7, #28]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4aba      	ldr	r2, [pc, #744]	; (8003810 <UART_SetConfig+0x374>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d134      	bne.n	8003596 <UART_SetConfig+0xfa>
 800352c:	4bb9      	ldr	r3, [pc, #740]	; (8003814 <UART_SetConfig+0x378>)
 800352e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003530:	2203      	movs	r2, #3
 8003532:	4013      	ands	r3, r2
 8003534:	2b01      	cmp	r3, #1
 8003536:	d015      	beq.n	8003564 <UART_SetConfig+0xc8>
 8003538:	d304      	bcc.n	8003544 <UART_SetConfig+0xa8>
 800353a:	2b02      	cmp	r3, #2
 800353c:	d00a      	beq.n	8003554 <UART_SetConfig+0xb8>
 800353e:	2b03      	cmp	r3, #3
 8003540:	d018      	beq.n	8003574 <UART_SetConfig+0xd8>
 8003542:	e01f      	b.n	8003584 <UART_SetConfig+0xe8>
 8003544:	231b      	movs	r3, #27
 8003546:	2218      	movs	r2, #24
 8003548:	4694      	mov	ip, r2
 800354a:	44bc      	add	ip, r7
 800354c:	4463      	add	r3, ip
 800354e:	2201      	movs	r2, #1
 8003550:	701a      	strb	r2, [r3, #0]
 8003552:	e0ab      	b.n	80036ac <UART_SetConfig+0x210>
 8003554:	231b      	movs	r3, #27
 8003556:	2218      	movs	r2, #24
 8003558:	4694      	mov	ip, r2
 800355a:	44bc      	add	ip, r7
 800355c:	4463      	add	r3, ip
 800355e:	2202      	movs	r2, #2
 8003560:	701a      	strb	r2, [r3, #0]
 8003562:	e0a3      	b.n	80036ac <UART_SetConfig+0x210>
 8003564:	231b      	movs	r3, #27
 8003566:	2218      	movs	r2, #24
 8003568:	4694      	mov	ip, r2
 800356a:	44bc      	add	ip, r7
 800356c:	4463      	add	r3, ip
 800356e:	2204      	movs	r2, #4
 8003570:	701a      	strb	r2, [r3, #0]
 8003572:	e09b      	b.n	80036ac <UART_SetConfig+0x210>
 8003574:	231b      	movs	r3, #27
 8003576:	2218      	movs	r2, #24
 8003578:	4694      	mov	ip, r2
 800357a:	44bc      	add	ip, r7
 800357c:	4463      	add	r3, ip
 800357e:	2208      	movs	r2, #8
 8003580:	701a      	strb	r2, [r3, #0]
 8003582:	e093      	b.n	80036ac <UART_SetConfig+0x210>
 8003584:	231b      	movs	r3, #27
 8003586:	2218      	movs	r2, #24
 8003588:	4694      	mov	ip, r2
 800358a:	44bc      	add	ip, r7
 800358c:	4463      	add	r3, ip
 800358e:	2210      	movs	r2, #16
 8003590:	701a      	strb	r2, [r3, #0]
 8003592:	46c0      	nop			; (mov r8, r8)
 8003594:	e08a      	b.n	80036ac <UART_SetConfig+0x210>
 8003596:	69fb      	ldr	r3, [r7, #28]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a9f      	ldr	r2, [pc, #636]	; (8003818 <UART_SetConfig+0x37c>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d137      	bne.n	8003610 <UART_SetConfig+0x174>
 80035a0:	4b9c      	ldr	r3, [pc, #624]	; (8003814 <UART_SetConfig+0x378>)
 80035a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035a4:	220c      	movs	r2, #12
 80035a6:	4013      	ands	r3, r2
 80035a8:	2b04      	cmp	r3, #4
 80035aa:	d018      	beq.n	80035de <UART_SetConfig+0x142>
 80035ac:	d802      	bhi.n	80035b4 <UART_SetConfig+0x118>
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d005      	beq.n	80035be <UART_SetConfig+0x122>
 80035b2:	e024      	b.n	80035fe <UART_SetConfig+0x162>
 80035b4:	2b08      	cmp	r3, #8
 80035b6:	d00a      	beq.n	80035ce <UART_SetConfig+0x132>
 80035b8:	2b0c      	cmp	r3, #12
 80035ba:	d018      	beq.n	80035ee <UART_SetConfig+0x152>
 80035bc:	e01f      	b.n	80035fe <UART_SetConfig+0x162>
 80035be:	231b      	movs	r3, #27
 80035c0:	2218      	movs	r2, #24
 80035c2:	4694      	mov	ip, r2
 80035c4:	44bc      	add	ip, r7
 80035c6:	4463      	add	r3, ip
 80035c8:	2200      	movs	r2, #0
 80035ca:	701a      	strb	r2, [r3, #0]
 80035cc:	e06e      	b.n	80036ac <UART_SetConfig+0x210>
 80035ce:	231b      	movs	r3, #27
 80035d0:	2218      	movs	r2, #24
 80035d2:	4694      	mov	ip, r2
 80035d4:	44bc      	add	ip, r7
 80035d6:	4463      	add	r3, ip
 80035d8:	2202      	movs	r2, #2
 80035da:	701a      	strb	r2, [r3, #0]
 80035dc:	e066      	b.n	80036ac <UART_SetConfig+0x210>
 80035de:	231b      	movs	r3, #27
 80035e0:	2218      	movs	r2, #24
 80035e2:	4694      	mov	ip, r2
 80035e4:	44bc      	add	ip, r7
 80035e6:	4463      	add	r3, ip
 80035e8:	2204      	movs	r2, #4
 80035ea:	701a      	strb	r2, [r3, #0]
 80035ec:	e05e      	b.n	80036ac <UART_SetConfig+0x210>
 80035ee:	231b      	movs	r3, #27
 80035f0:	2218      	movs	r2, #24
 80035f2:	4694      	mov	ip, r2
 80035f4:	44bc      	add	ip, r7
 80035f6:	4463      	add	r3, ip
 80035f8:	2208      	movs	r2, #8
 80035fa:	701a      	strb	r2, [r3, #0]
 80035fc:	e056      	b.n	80036ac <UART_SetConfig+0x210>
 80035fe:	231b      	movs	r3, #27
 8003600:	2218      	movs	r2, #24
 8003602:	4694      	mov	ip, r2
 8003604:	44bc      	add	ip, r7
 8003606:	4463      	add	r3, ip
 8003608:	2210      	movs	r2, #16
 800360a:	701a      	strb	r2, [r3, #0]
 800360c:	46c0      	nop			; (mov r8, r8)
 800360e:	e04d      	b.n	80036ac <UART_SetConfig+0x210>
 8003610:	69fb      	ldr	r3, [r7, #28]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a7c      	ldr	r2, [pc, #496]	; (8003808 <UART_SetConfig+0x36c>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d141      	bne.n	800369e <UART_SetConfig+0x202>
 800361a:	4b7e      	ldr	r3, [pc, #504]	; (8003814 <UART_SetConfig+0x378>)
 800361c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800361e:	23c0      	movs	r3, #192	; 0xc0
 8003620:	011b      	lsls	r3, r3, #4
 8003622:	4013      	ands	r3, r2
 8003624:	2280      	movs	r2, #128	; 0x80
 8003626:	00d2      	lsls	r2, r2, #3
 8003628:	4293      	cmp	r3, r2
 800362a:	d01f      	beq.n	800366c <UART_SetConfig+0x1d0>
 800362c:	2280      	movs	r2, #128	; 0x80
 800362e:	00d2      	lsls	r2, r2, #3
 8003630:	4293      	cmp	r3, r2
 8003632:	d802      	bhi.n	800363a <UART_SetConfig+0x19e>
 8003634:	2b00      	cmp	r3, #0
 8003636:	d009      	beq.n	800364c <UART_SetConfig+0x1b0>
 8003638:	e028      	b.n	800368c <UART_SetConfig+0x1f0>
 800363a:	2280      	movs	r2, #128	; 0x80
 800363c:	0112      	lsls	r2, r2, #4
 800363e:	4293      	cmp	r3, r2
 8003640:	d00c      	beq.n	800365c <UART_SetConfig+0x1c0>
 8003642:	22c0      	movs	r2, #192	; 0xc0
 8003644:	0112      	lsls	r2, r2, #4
 8003646:	4293      	cmp	r3, r2
 8003648:	d018      	beq.n	800367c <UART_SetConfig+0x1e0>
 800364a:	e01f      	b.n	800368c <UART_SetConfig+0x1f0>
 800364c:	231b      	movs	r3, #27
 800364e:	2218      	movs	r2, #24
 8003650:	4694      	mov	ip, r2
 8003652:	44bc      	add	ip, r7
 8003654:	4463      	add	r3, ip
 8003656:	2200      	movs	r2, #0
 8003658:	701a      	strb	r2, [r3, #0]
 800365a:	e027      	b.n	80036ac <UART_SetConfig+0x210>
 800365c:	231b      	movs	r3, #27
 800365e:	2218      	movs	r2, #24
 8003660:	4694      	mov	ip, r2
 8003662:	44bc      	add	ip, r7
 8003664:	4463      	add	r3, ip
 8003666:	2202      	movs	r2, #2
 8003668:	701a      	strb	r2, [r3, #0]
 800366a:	e01f      	b.n	80036ac <UART_SetConfig+0x210>
 800366c:	231b      	movs	r3, #27
 800366e:	2218      	movs	r2, #24
 8003670:	4694      	mov	ip, r2
 8003672:	44bc      	add	ip, r7
 8003674:	4463      	add	r3, ip
 8003676:	2204      	movs	r2, #4
 8003678:	701a      	strb	r2, [r3, #0]
 800367a:	e017      	b.n	80036ac <UART_SetConfig+0x210>
 800367c:	231b      	movs	r3, #27
 800367e:	2218      	movs	r2, #24
 8003680:	4694      	mov	ip, r2
 8003682:	44bc      	add	ip, r7
 8003684:	4463      	add	r3, ip
 8003686:	2208      	movs	r2, #8
 8003688:	701a      	strb	r2, [r3, #0]
 800368a:	e00f      	b.n	80036ac <UART_SetConfig+0x210>
 800368c:	231b      	movs	r3, #27
 800368e:	2218      	movs	r2, #24
 8003690:	4694      	mov	ip, r2
 8003692:	44bc      	add	ip, r7
 8003694:	4463      	add	r3, ip
 8003696:	2210      	movs	r2, #16
 8003698:	701a      	strb	r2, [r3, #0]
 800369a:	46c0      	nop			; (mov r8, r8)
 800369c:	e006      	b.n	80036ac <UART_SetConfig+0x210>
 800369e:	231b      	movs	r3, #27
 80036a0:	2218      	movs	r2, #24
 80036a2:	4694      	mov	ip, r2
 80036a4:	44bc      	add	ip, r7
 80036a6:	4463      	add	r3, ip
 80036a8:	2210      	movs	r2, #16
 80036aa:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80036ac:	69fb      	ldr	r3, [r7, #28]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a55      	ldr	r2, [pc, #340]	; (8003808 <UART_SetConfig+0x36c>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d000      	beq.n	80036b8 <UART_SetConfig+0x21c>
 80036b6:	e085      	b.n	80037c4 <UART_SetConfig+0x328>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80036b8:	231b      	movs	r3, #27
 80036ba:	2218      	movs	r2, #24
 80036bc:	4694      	mov	ip, r2
 80036be:	44bc      	add	ip, r7
 80036c0:	4463      	add	r3, ip
 80036c2:	781b      	ldrb	r3, [r3, #0]
 80036c4:	2b02      	cmp	r3, #2
 80036c6:	d00d      	beq.n	80036e4 <UART_SetConfig+0x248>
 80036c8:	dc02      	bgt.n	80036d0 <UART_SetConfig+0x234>
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d005      	beq.n	80036da <UART_SetConfig+0x23e>
 80036ce:	e01d      	b.n	800370c <UART_SetConfig+0x270>
 80036d0:	2b04      	cmp	r3, #4
 80036d2:	d012      	beq.n	80036fa <UART_SetConfig+0x25e>
 80036d4:	2b08      	cmp	r3, #8
 80036d6:	d015      	beq.n	8003704 <UART_SetConfig+0x268>
 80036d8:	e018      	b.n	800370c <UART_SetConfig+0x270>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80036da:	f7ff f96f 	bl	80029bc <HAL_RCC_GetPCLK1Freq>
 80036de:	0003      	movs	r3, r0
 80036e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80036e2:	e01d      	b.n	8003720 <UART_SetConfig+0x284>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80036e4:	4b4b      	ldr	r3, [pc, #300]	; (8003814 <UART_SetConfig+0x378>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	2210      	movs	r2, #16
 80036ea:	4013      	ands	r3, r2
 80036ec:	d002      	beq.n	80036f4 <UART_SetConfig+0x258>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80036ee:	4b4b      	ldr	r3, [pc, #300]	; (800381c <UART_SetConfig+0x380>)
 80036f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80036f2:	e015      	b.n	8003720 <UART_SetConfig+0x284>
          pclk = (uint32_t) HSI_VALUE;
 80036f4:	4b4a      	ldr	r3, [pc, #296]	; (8003820 <UART_SetConfig+0x384>)
 80036f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80036f8:	e012      	b.n	8003720 <UART_SetConfig+0x284>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80036fa:	f7ff f8b3 	bl	8002864 <HAL_RCC_GetSysClockFreq>
 80036fe:	0003      	movs	r3, r0
 8003700:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003702:	e00d      	b.n	8003720 <UART_SetConfig+0x284>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003704:	2380      	movs	r3, #128	; 0x80
 8003706:	021b      	lsls	r3, r3, #8
 8003708:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800370a:	e009      	b.n	8003720 <UART_SetConfig+0x284>
      default:
        pclk = 0U;
 800370c:	2300      	movs	r3, #0
 800370e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003710:	231a      	movs	r3, #26
 8003712:	2218      	movs	r2, #24
 8003714:	4694      	mov	ip, r2
 8003716:	44bc      	add	ip, r7
 8003718:	4463      	add	r3, ip
 800371a:	2201      	movs	r2, #1
 800371c:	701a      	strb	r2, [r3, #0]
        break;
 800371e:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003722:	2b00      	cmp	r3, #0
 8003724:	d100      	bne.n	8003728 <UART_SetConfig+0x28c>
 8003726:	e143      	b.n	80039b0 <UART_SetConfig+0x514>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003728:	69fb      	ldr	r3, [r7, #28]
 800372a:	685a      	ldr	r2, [r3, #4]
 800372c:	0013      	movs	r3, r2
 800372e:	005b      	lsls	r3, r3, #1
 8003730:	189a      	adds	r2, r3, r2
 8003732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003734:	429a      	cmp	r2, r3
 8003736:	d805      	bhi.n	8003744 <UART_SetConfig+0x2a8>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003738:	69fb      	ldr	r3, [r7, #28]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	031a      	lsls	r2, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800373e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003740:	429a      	cmp	r2, r3
 8003742:	d207      	bcs.n	8003754 <UART_SetConfig+0x2b8>
      {
        ret = HAL_ERROR;
 8003744:	231a      	movs	r3, #26
 8003746:	2218      	movs	r2, #24
 8003748:	4694      	mov	ip, r2
 800374a:	44bc      	add	ip, r7
 800374c:	4463      	add	r3, ip
 800374e:	2201      	movs	r2, #1
 8003750:	701a      	strb	r2, [r3, #0]
 8003752:	e12d      	b.n	80039b0 <UART_SetConfig+0x514>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003756:	613b      	str	r3, [r7, #16]
 8003758:	2300      	movs	r3, #0
 800375a:	617b      	str	r3, [r7, #20]
 800375c:	6939      	ldr	r1, [r7, #16]
 800375e:	697a      	ldr	r2, [r7, #20]
 8003760:	000b      	movs	r3, r1
 8003762:	0e1b      	lsrs	r3, r3, #24
 8003764:	0010      	movs	r0, r2
 8003766:	0205      	lsls	r5, r0, #8
 8003768:	431d      	orrs	r5, r3
 800376a:	000b      	movs	r3, r1
 800376c:	021c      	lsls	r4, r3, #8
 800376e:	69fb      	ldr	r3, [r7, #28]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	085b      	lsrs	r3, r3, #1
 8003774:	60bb      	str	r3, [r7, #8]
 8003776:	2300      	movs	r3, #0
 8003778:	60fb      	str	r3, [r7, #12]
 800377a:	68b8      	ldr	r0, [r7, #8]
 800377c:	68f9      	ldr	r1, [r7, #12]
 800377e:	1900      	adds	r0, r0, r4
 8003780:	4169      	adcs	r1, r5
 8003782:	69fb      	ldr	r3, [r7, #28]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	603b      	str	r3, [r7, #0]
 8003788:	2300      	movs	r3, #0
 800378a:	607b      	str	r3, [r7, #4]
 800378c:	683a      	ldr	r2, [r7, #0]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	f7fc fd46 	bl	8000220 <__aeabi_uldivmod>
 8003794:	0003      	movs	r3, r0
 8003796:	000c      	movs	r4, r1
 8003798:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800379a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800379c:	4a21      	ldr	r2, [pc, #132]	; (8003824 <UART_SetConfig+0x388>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d908      	bls.n	80037b4 <UART_SetConfig+0x318>
 80037a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037a4:	4a20      	ldr	r2, [pc, #128]	; (8003828 <UART_SetConfig+0x38c>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d804      	bhi.n	80037b4 <UART_SetConfig+0x318>
        {
          huart->Instance->BRR = usartdiv;
 80037aa:	69fb      	ldr	r3, [r7, #28]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80037b0:	60da      	str	r2, [r3, #12]
 80037b2:	e0fd      	b.n	80039b0 <UART_SetConfig+0x514>
        }
        else
        {
          ret = HAL_ERROR;
 80037b4:	231a      	movs	r3, #26
 80037b6:	2218      	movs	r2, #24
 80037b8:	4694      	mov	ip, r2
 80037ba:	44bc      	add	ip, r7
 80037bc:	4463      	add	r3, ip
 80037be:	2201      	movs	r2, #1
 80037c0:	701a      	strb	r2, [r3, #0]
 80037c2:	e0f5      	b.n	80039b0 <UART_SetConfig+0x514>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80037c4:	69fb      	ldr	r3, [r7, #28]
 80037c6:	69da      	ldr	r2, [r3, #28]
 80037c8:	2380      	movs	r3, #128	; 0x80
 80037ca:	021b      	lsls	r3, r3, #8
 80037cc:	429a      	cmp	r2, r3
 80037ce:	d000      	beq.n	80037d2 <UART_SetConfig+0x336>
 80037d0:	e095      	b.n	80038fe <UART_SetConfig+0x462>
  {
    switch (clocksource)
 80037d2:	231b      	movs	r3, #27
 80037d4:	2218      	movs	r2, #24
 80037d6:	4694      	mov	ip, r2
 80037d8:	44bc      	add	ip, r7
 80037da:	4463      	add	r3, ip
 80037dc:	781b      	ldrb	r3, [r3, #0]
 80037de:	2b08      	cmp	r3, #8
 80037e0:	d83a      	bhi.n	8003858 <UART_SetConfig+0x3bc>
 80037e2:	009a      	lsls	r2, r3, #2
 80037e4:	4b11      	ldr	r3, [pc, #68]	; (800382c <UART_SetConfig+0x390>)
 80037e6:	18d3      	adds	r3, r2, r3
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80037ec:	f7ff f8e6 	bl	80029bc <HAL_RCC_GetPCLK1Freq>
 80037f0:	0003      	movs	r3, r0
 80037f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80037f4:	e03a      	b.n	800386c <UART_SetConfig+0x3d0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80037f6:	f7ff f8f7 	bl	80029e8 <HAL_RCC_GetPCLK2Freq>
 80037fa:	0003      	movs	r3, r0
 80037fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80037fe:	e035      	b.n	800386c <UART_SetConfig+0x3d0>
 8003800:	efff69f3 	.word	0xefff69f3
 8003804:	ffffcfff 	.word	0xffffcfff
 8003808:	40004800 	.word	0x40004800
 800380c:	fffff4ff 	.word	0xfffff4ff
 8003810:	40013800 	.word	0x40013800
 8003814:	40021000 	.word	0x40021000
 8003818:	40004400 	.word	0x40004400
 800381c:	003d0900 	.word	0x003d0900
 8003820:	00f42400 	.word	0x00f42400
 8003824:	000002ff 	.word	0x000002ff
 8003828:	000fffff 	.word	0x000fffff
 800382c:	08003e58 	.word	0x08003e58
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003830:	4b67      	ldr	r3, [pc, #412]	; (80039d0 <UART_SetConfig+0x534>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	2210      	movs	r2, #16
 8003836:	4013      	ands	r3, r2
 8003838:	d002      	beq.n	8003840 <UART_SetConfig+0x3a4>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800383a:	4b66      	ldr	r3, [pc, #408]	; (80039d4 <UART_SetConfig+0x538>)
 800383c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800383e:	e015      	b.n	800386c <UART_SetConfig+0x3d0>
          pclk = (uint32_t) HSI_VALUE;
 8003840:	4b65      	ldr	r3, [pc, #404]	; (80039d8 <UART_SetConfig+0x53c>)
 8003842:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003844:	e012      	b.n	800386c <UART_SetConfig+0x3d0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003846:	f7ff f80d 	bl	8002864 <HAL_RCC_GetSysClockFreq>
 800384a:	0003      	movs	r3, r0
 800384c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800384e:	e00d      	b.n	800386c <UART_SetConfig+0x3d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003850:	2380      	movs	r3, #128	; 0x80
 8003852:	021b      	lsls	r3, r3, #8
 8003854:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003856:	e009      	b.n	800386c <UART_SetConfig+0x3d0>
      default:
        pclk = 0U;
 8003858:	2300      	movs	r3, #0
 800385a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800385c:	231a      	movs	r3, #26
 800385e:	2218      	movs	r2, #24
 8003860:	4694      	mov	ip, r2
 8003862:	44bc      	add	ip, r7
 8003864:	4463      	add	r3, ip
 8003866:	2201      	movs	r2, #1
 8003868:	701a      	strb	r2, [r3, #0]
        break;
 800386a:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800386c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800386e:	2b00      	cmp	r3, #0
 8003870:	d100      	bne.n	8003874 <UART_SetConfig+0x3d8>
 8003872:	e09d      	b.n	80039b0 <UART_SetConfig+0x514>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003876:	005a      	lsls	r2, r3, #1
 8003878:	69fb      	ldr	r3, [r7, #28]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	085b      	lsrs	r3, r3, #1
 800387e:	18d2      	adds	r2, r2, r3
 8003880:	69fb      	ldr	r3, [r7, #28]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	0019      	movs	r1, r3
 8003886:	0010      	movs	r0, r2
 8003888:	f7fc fc3e 	bl	8000108 <__udivsi3>
 800388c:	0003      	movs	r3, r0
 800388e:	b29b      	uxth	r3, r3
 8003890:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003894:	2b0f      	cmp	r3, #15
 8003896:	d92a      	bls.n	80038ee <UART_SetConfig+0x452>
 8003898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800389a:	4a50      	ldr	r2, [pc, #320]	; (80039dc <UART_SetConfig+0x540>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d826      	bhi.n	80038ee <UART_SetConfig+0x452>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80038a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038a2:	b29a      	uxth	r2, r3
 80038a4:	230e      	movs	r3, #14
 80038a6:	2118      	movs	r1, #24
 80038a8:	468c      	mov	ip, r1
 80038aa:	44bc      	add	ip, r7
 80038ac:	4463      	add	r3, ip
 80038ae:	210f      	movs	r1, #15
 80038b0:	438a      	bics	r2, r1
 80038b2:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80038b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038b6:	085b      	lsrs	r3, r3, #1
 80038b8:	b29b      	uxth	r3, r3
 80038ba:	2207      	movs	r2, #7
 80038bc:	4013      	ands	r3, r2
 80038be:	b299      	uxth	r1, r3
 80038c0:	230e      	movs	r3, #14
 80038c2:	2218      	movs	r2, #24
 80038c4:	4694      	mov	ip, r2
 80038c6:	44bc      	add	ip, r7
 80038c8:	4463      	add	r3, ip
 80038ca:	220e      	movs	r2, #14
 80038cc:	2018      	movs	r0, #24
 80038ce:	4684      	mov	ip, r0
 80038d0:	44bc      	add	ip, r7
 80038d2:	4462      	add	r2, ip
 80038d4:	8812      	ldrh	r2, [r2, #0]
 80038d6:	430a      	orrs	r2, r1
 80038d8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80038da:	69fb      	ldr	r3, [r7, #28]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	220e      	movs	r2, #14
 80038e0:	2118      	movs	r1, #24
 80038e2:	468c      	mov	ip, r1
 80038e4:	44bc      	add	ip, r7
 80038e6:	4462      	add	r2, ip
 80038e8:	8812      	ldrh	r2, [r2, #0]
 80038ea:	60da      	str	r2, [r3, #12]
 80038ec:	e060      	b.n	80039b0 <UART_SetConfig+0x514>
      }
      else
      {
        ret = HAL_ERROR;
 80038ee:	231a      	movs	r3, #26
 80038f0:	2218      	movs	r2, #24
 80038f2:	4694      	mov	ip, r2
 80038f4:	44bc      	add	ip, r7
 80038f6:	4463      	add	r3, ip
 80038f8:	2201      	movs	r2, #1
 80038fa:	701a      	strb	r2, [r3, #0]
 80038fc:	e058      	b.n	80039b0 <UART_SetConfig+0x514>
      }
    }
  }
  else
  {
    switch (clocksource)
 80038fe:	231b      	movs	r3, #27
 8003900:	2218      	movs	r2, #24
 8003902:	4694      	mov	ip, r2
 8003904:	44bc      	add	ip, r7
 8003906:	4463      	add	r3, ip
 8003908:	781b      	ldrb	r3, [r3, #0]
 800390a:	2b08      	cmp	r3, #8
 800390c:	d822      	bhi.n	8003954 <UART_SetConfig+0x4b8>
 800390e:	009a      	lsls	r2, r3, #2
 8003910:	4b33      	ldr	r3, [pc, #204]	; (80039e0 <UART_SetConfig+0x544>)
 8003912:	18d3      	adds	r3, r2, r3
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003918:	f7ff f850 	bl	80029bc <HAL_RCC_GetPCLK1Freq>
 800391c:	0003      	movs	r3, r0
 800391e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003920:	e022      	b.n	8003968 <UART_SetConfig+0x4cc>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003922:	f7ff f861 	bl	80029e8 <HAL_RCC_GetPCLK2Freq>
 8003926:	0003      	movs	r3, r0
 8003928:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800392a:	e01d      	b.n	8003968 <UART_SetConfig+0x4cc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800392c:	4b28      	ldr	r3, [pc, #160]	; (80039d0 <UART_SetConfig+0x534>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	2210      	movs	r2, #16
 8003932:	4013      	ands	r3, r2
 8003934:	d002      	beq.n	800393c <UART_SetConfig+0x4a0>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003936:	4b27      	ldr	r3, [pc, #156]	; (80039d4 <UART_SetConfig+0x538>)
 8003938:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800393a:	e015      	b.n	8003968 <UART_SetConfig+0x4cc>
          pclk = (uint32_t) HSI_VALUE;
 800393c:	4b26      	ldr	r3, [pc, #152]	; (80039d8 <UART_SetConfig+0x53c>)
 800393e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003940:	e012      	b.n	8003968 <UART_SetConfig+0x4cc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003942:	f7fe ff8f 	bl	8002864 <HAL_RCC_GetSysClockFreq>
 8003946:	0003      	movs	r3, r0
 8003948:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800394a:	e00d      	b.n	8003968 <UART_SetConfig+0x4cc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800394c:	2380      	movs	r3, #128	; 0x80
 800394e:	021b      	lsls	r3, r3, #8
 8003950:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003952:	e009      	b.n	8003968 <UART_SetConfig+0x4cc>
      default:
        pclk = 0U;
 8003954:	2300      	movs	r3, #0
 8003956:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003958:	231a      	movs	r3, #26
 800395a:	2218      	movs	r2, #24
 800395c:	4694      	mov	ip, r2
 800395e:	44bc      	add	ip, r7
 8003960:	4463      	add	r3, ip
 8003962:	2201      	movs	r2, #1
 8003964:	701a      	strb	r2, [r3, #0]
        break;
 8003966:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800396a:	2b00      	cmp	r3, #0
 800396c:	d020      	beq.n	80039b0 <UART_SetConfig+0x514>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800396e:	69fb      	ldr	r3, [r7, #28]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	085a      	lsrs	r2, r3, #1
 8003974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003976:	18d2      	adds	r2, r2, r3
 8003978:	69fb      	ldr	r3, [r7, #28]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	0019      	movs	r1, r3
 800397e:	0010      	movs	r0, r2
 8003980:	f7fc fbc2 	bl	8000108 <__udivsi3>
 8003984:	0003      	movs	r3, r0
 8003986:	b29b      	uxth	r3, r3
 8003988:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800398a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800398c:	2b0f      	cmp	r3, #15
 800398e:	d908      	bls.n	80039a2 <UART_SetConfig+0x506>
 8003990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003992:	4a12      	ldr	r2, [pc, #72]	; (80039dc <UART_SetConfig+0x540>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d804      	bhi.n	80039a2 <UART_SetConfig+0x506>
      {
        huart->Instance->BRR = usartdiv;
 8003998:	69fb      	ldr	r3, [r7, #28]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800399e:	60da      	str	r2, [r3, #12]
 80039a0:	e006      	b.n	80039b0 <UART_SetConfig+0x514>
      }
      else
      {
        ret = HAL_ERROR;
 80039a2:	231a      	movs	r3, #26
 80039a4:	2218      	movs	r2, #24
 80039a6:	4694      	mov	ip, r2
 80039a8:	44bc      	add	ip, r7
 80039aa:	4463      	add	r3, ip
 80039ac:	2201      	movs	r2, #1
 80039ae:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80039b0:	69fb      	ldr	r3, [r7, #28]
 80039b2:	2200      	movs	r2, #0
 80039b4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80039b6:	69fb      	ldr	r3, [r7, #28]
 80039b8:	2200      	movs	r2, #0
 80039ba:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80039bc:	231a      	movs	r3, #26
 80039be:	2218      	movs	r2, #24
 80039c0:	4694      	mov	ip, r2
 80039c2:	44bc      	add	ip, r7
 80039c4:	4463      	add	r3, ip
 80039c6:	781b      	ldrb	r3, [r3, #0]
}
 80039c8:	0018      	movs	r0, r3
 80039ca:	46bd      	mov	sp, r7
 80039cc:	b00e      	add	sp, #56	; 0x38
 80039ce:	bdb0      	pop	{r4, r5, r7, pc}
 80039d0:	40021000 	.word	0x40021000
 80039d4:	003d0900 	.word	0x003d0900
 80039d8:	00f42400 	.word	0x00f42400
 80039dc:	0000ffff 	.word	0x0000ffff
 80039e0:	08003e7c 	.word	0x08003e7c

080039e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b082      	sub	sp, #8
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f0:	2201      	movs	r2, #1
 80039f2:	4013      	ands	r3, r2
 80039f4:	d00a      	beq.n	8003a0c <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	687a      	ldr	r2, [r7, #4]
 80039fc:	6812      	ldr	r2, [r2, #0]
 80039fe:	6852      	ldr	r2, [r2, #4]
 8003a00:	4945      	ldr	r1, [pc, #276]	; (8003b18 <UART_AdvFeatureConfig+0x134>)
 8003a02:	4011      	ands	r1, r2
 8003a04:	687a      	ldr	r2, [r7, #4]
 8003a06:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003a08:	430a      	orrs	r2, r1
 8003a0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a10:	2202      	movs	r2, #2
 8003a12:	4013      	ands	r3, r2
 8003a14:	d00a      	beq.n	8003a2c <UART_AdvFeatureConfig+0x48>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	687a      	ldr	r2, [r7, #4]
 8003a1c:	6812      	ldr	r2, [r2, #0]
 8003a1e:	6852      	ldr	r2, [r2, #4]
 8003a20:	493e      	ldr	r1, [pc, #248]	; (8003b1c <UART_AdvFeatureConfig+0x138>)
 8003a22:	4011      	ands	r1, r2
 8003a24:	687a      	ldr	r2, [r7, #4]
 8003a26:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003a28:	430a      	orrs	r2, r1
 8003a2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a30:	2204      	movs	r2, #4
 8003a32:	4013      	ands	r3, r2
 8003a34:	d00a      	beq.n	8003a4c <UART_AdvFeatureConfig+0x68>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	687a      	ldr	r2, [r7, #4]
 8003a3c:	6812      	ldr	r2, [r2, #0]
 8003a3e:	6852      	ldr	r2, [r2, #4]
 8003a40:	4937      	ldr	r1, [pc, #220]	; (8003b20 <UART_AdvFeatureConfig+0x13c>)
 8003a42:	4011      	ands	r1, r2
 8003a44:	687a      	ldr	r2, [r7, #4]
 8003a46:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003a48:	430a      	orrs	r2, r1
 8003a4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a50:	2208      	movs	r2, #8
 8003a52:	4013      	ands	r3, r2
 8003a54:	d00a      	beq.n	8003a6c <UART_AdvFeatureConfig+0x88>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	687a      	ldr	r2, [r7, #4]
 8003a5c:	6812      	ldr	r2, [r2, #0]
 8003a5e:	6852      	ldr	r2, [r2, #4]
 8003a60:	4930      	ldr	r1, [pc, #192]	; (8003b24 <UART_AdvFeatureConfig+0x140>)
 8003a62:	4011      	ands	r1, r2
 8003a64:	687a      	ldr	r2, [r7, #4]
 8003a66:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003a68:	430a      	orrs	r2, r1
 8003a6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a70:	2210      	movs	r2, #16
 8003a72:	4013      	ands	r3, r2
 8003a74:	d00a      	beq.n	8003a8c <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	6812      	ldr	r2, [r2, #0]
 8003a7e:	6892      	ldr	r2, [r2, #8]
 8003a80:	4929      	ldr	r1, [pc, #164]	; (8003b28 <UART_AdvFeatureConfig+0x144>)
 8003a82:	4011      	ands	r1, r2
 8003a84:	687a      	ldr	r2, [r7, #4]
 8003a86:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003a88:	430a      	orrs	r2, r1
 8003a8a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a90:	2220      	movs	r2, #32
 8003a92:	4013      	ands	r3, r2
 8003a94:	d00a      	beq.n	8003aac <UART_AdvFeatureConfig+0xc8>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	687a      	ldr	r2, [r7, #4]
 8003a9c:	6812      	ldr	r2, [r2, #0]
 8003a9e:	6892      	ldr	r2, [r2, #8]
 8003aa0:	4922      	ldr	r1, [pc, #136]	; (8003b2c <UART_AdvFeatureConfig+0x148>)
 8003aa2:	4011      	ands	r1, r2
 8003aa4:	687a      	ldr	r2, [r7, #4]
 8003aa6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003aa8:	430a      	orrs	r2, r1
 8003aaa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab0:	2240      	movs	r2, #64	; 0x40
 8003ab2:	4013      	ands	r3, r2
 8003ab4:	d01b      	beq.n	8003aee <UART_AdvFeatureConfig+0x10a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	687a      	ldr	r2, [r7, #4]
 8003abc:	6812      	ldr	r2, [r2, #0]
 8003abe:	6852      	ldr	r2, [r2, #4]
 8003ac0:	491b      	ldr	r1, [pc, #108]	; (8003b30 <UART_AdvFeatureConfig+0x14c>)
 8003ac2:	4011      	ands	r1, r2
 8003ac4:	687a      	ldr	r2, [r7, #4]
 8003ac6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003ac8:	430a      	orrs	r2, r1
 8003aca:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ad0:	2380      	movs	r3, #128	; 0x80
 8003ad2:	035b      	lsls	r3, r3, #13
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d10a      	bne.n	8003aee <UART_AdvFeatureConfig+0x10a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	687a      	ldr	r2, [r7, #4]
 8003ade:	6812      	ldr	r2, [r2, #0]
 8003ae0:	6852      	ldr	r2, [r2, #4]
 8003ae2:	4914      	ldr	r1, [pc, #80]	; (8003b34 <UART_AdvFeatureConfig+0x150>)
 8003ae4:	4011      	ands	r1, r2
 8003ae6:	687a      	ldr	r2, [r7, #4]
 8003ae8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003aea:	430a      	orrs	r2, r1
 8003aec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af2:	2280      	movs	r2, #128	; 0x80
 8003af4:	4013      	ands	r3, r2
 8003af6:	d00a      	beq.n	8003b0e <UART_AdvFeatureConfig+0x12a>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	687a      	ldr	r2, [r7, #4]
 8003afe:	6812      	ldr	r2, [r2, #0]
 8003b00:	6852      	ldr	r2, [r2, #4]
 8003b02:	490d      	ldr	r1, [pc, #52]	; (8003b38 <UART_AdvFeatureConfig+0x154>)
 8003b04:	4011      	ands	r1, r2
 8003b06:	687a      	ldr	r2, [r7, #4]
 8003b08:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003b0a:	430a      	orrs	r2, r1
 8003b0c:	605a      	str	r2, [r3, #4]
  }
}
 8003b0e:	46c0      	nop			; (mov r8, r8)
 8003b10:	46bd      	mov	sp, r7
 8003b12:	b002      	add	sp, #8
 8003b14:	bd80      	pop	{r7, pc}
 8003b16:	46c0      	nop			; (mov r8, r8)
 8003b18:	fffdffff 	.word	0xfffdffff
 8003b1c:	fffeffff 	.word	0xfffeffff
 8003b20:	fffbffff 	.word	0xfffbffff
 8003b24:	ffff7fff 	.word	0xffff7fff
 8003b28:	ffffefff 	.word	0xffffefff
 8003b2c:	ffffdfff 	.word	0xffffdfff
 8003b30:	ffefffff 	.word	0xffefffff
 8003b34:	ff9fffff 	.word	0xff9fffff
 8003b38:	fff7ffff 	.word	0xfff7ffff

08003b3c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b086      	sub	sp, #24
 8003b40:	af02      	add	r7, sp, #8
 8003b42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2280      	movs	r2, #128	; 0x80
 8003b48:	2100      	movs	r1, #0
 8003b4a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003b4c:	f7fd fa5a 	bl	8001004 <HAL_GetTick>
 8003b50:	0003      	movs	r3, r0
 8003b52:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	2208      	movs	r2, #8
 8003b5c:	4013      	ands	r3, r2
 8003b5e:	2b08      	cmp	r3, #8
 8003b60:	d10d      	bne.n	8003b7e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b62:	68fa      	ldr	r2, [r7, #12]
 8003b64:	2380      	movs	r3, #128	; 0x80
 8003b66:	0399      	lsls	r1, r3, #14
 8003b68:	6878      	ldr	r0, [r7, #4]
 8003b6a:	4b18      	ldr	r3, [pc, #96]	; (8003bcc <UART_CheckIdleState+0x90>)
 8003b6c:	9300      	str	r3, [sp, #0]
 8003b6e:	0013      	movs	r3, r2
 8003b70:	2200      	movs	r2, #0
 8003b72:	f000 f82d 	bl	8003bd0 <UART_WaitOnFlagUntilTimeout>
 8003b76:	1e03      	subs	r3, r0, #0
 8003b78:	d001      	beq.n	8003b7e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b7a:	2303      	movs	r3, #3
 8003b7c:	e022      	b.n	8003bc4 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	2204      	movs	r2, #4
 8003b86:	4013      	ands	r3, r2
 8003b88:	2b04      	cmp	r3, #4
 8003b8a:	d10d      	bne.n	8003ba8 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b8c:	68fa      	ldr	r2, [r7, #12]
 8003b8e:	2380      	movs	r3, #128	; 0x80
 8003b90:	03d9      	lsls	r1, r3, #15
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	4b0d      	ldr	r3, [pc, #52]	; (8003bcc <UART_CheckIdleState+0x90>)
 8003b96:	9300      	str	r3, [sp, #0]
 8003b98:	0013      	movs	r3, r2
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	f000 f818 	bl	8003bd0 <UART_WaitOnFlagUntilTimeout>
 8003ba0:	1e03      	subs	r3, r0, #0
 8003ba2:	d001      	beq.n	8003ba8 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ba4:	2303      	movs	r3, #3
 8003ba6:	e00d      	b.n	8003bc4 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2220      	movs	r2, #32
 8003bac:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2220      	movs	r2, #32
 8003bb2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2274      	movs	r2, #116	; 0x74
 8003bbe:	2100      	movs	r1, #0
 8003bc0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003bc2:	2300      	movs	r3, #0
}
 8003bc4:	0018      	movs	r0, r3
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	b004      	add	sp, #16
 8003bca:	bd80      	pop	{r7, pc}
 8003bcc:	01ffffff 	.word	0x01ffffff

08003bd0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b084      	sub	sp, #16
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	60f8      	str	r0, [r7, #12]
 8003bd8:	60b9      	str	r1, [r7, #8]
 8003bda:	603b      	str	r3, [r7, #0]
 8003bdc:	1dfb      	adds	r3, r7, #7
 8003bde:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003be0:	e05e      	b.n	8003ca0 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003be2:	69bb      	ldr	r3, [r7, #24]
 8003be4:	3301      	adds	r3, #1
 8003be6:	d05b      	beq.n	8003ca0 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003be8:	f7fd fa0c 	bl	8001004 <HAL_GetTick>
 8003bec:	0002      	movs	r2, r0
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	1ad2      	subs	r2, r2, r3
 8003bf2:	69bb      	ldr	r3, [r7, #24]
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	d802      	bhi.n	8003bfe <UART_WaitOnFlagUntilTimeout+0x2e>
 8003bf8:	69bb      	ldr	r3, [r7, #24]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d11b      	bne.n	8003c36 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	68fa      	ldr	r2, [r7, #12]
 8003c04:	6812      	ldr	r2, [r2, #0]
 8003c06:	6812      	ldr	r2, [r2, #0]
 8003c08:	492f      	ldr	r1, [pc, #188]	; (8003cc8 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8003c0a:	400a      	ands	r2, r1
 8003c0c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	68fa      	ldr	r2, [r7, #12]
 8003c14:	6812      	ldr	r2, [r2, #0]
 8003c16:	6892      	ldr	r2, [r2, #8]
 8003c18:	2101      	movs	r1, #1
 8003c1a:	438a      	bics	r2, r1
 8003c1c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2220      	movs	r2, #32
 8003c22:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2220      	movs	r2, #32
 8003c28:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2274      	movs	r2, #116	; 0x74
 8003c2e:	2100      	movs	r1, #0
 8003c30:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003c32:	2303      	movs	r3, #3
 8003c34:	e044      	b.n	8003cc0 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	2204      	movs	r2, #4
 8003c3e:	4013      	ands	r3, r2
 8003c40:	d02e      	beq.n	8003ca0 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	69da      	ldr	r2, [r3, #28]
 8003c48:	2380      	movs	r3, #128	; 0x80
 8003c4a:	011b      	lsls	r3, r3, #4
 8003c4c:	401a      	ands	r2, r3
 8003c4e:	2380      	movs	r3, #128	; 0x80
 8003c50:	011b      	lsls	r3, r3, #4
 8003c52:	429a      	cmp	r2, r3
 8003c54:	d124      	bne.n	8003ca0 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	2280      	movs	r2, #128	; 0x80
 8003c5c:	0112      	lsls	r2, r2, #4
 8003c5e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	68fa      	ldr	r2, [r7, #12]
 8003c66:	6812      	ldr	r2, [r2, #0]
 8003c68:	6812      	ldr	r2, [r2, #0]
 8003c6a:	4917      	ldr	r1, [pc, #92]	; (8003cc8 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8003c6c:	400a      	ands	r2, r1
 8003c6e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	68fa      	ldr	r2, [r7, #12]
 8003c76:	6812      	ldr	r2, [r2, #0]
 8003c78:	6892      	ldr	r2, [r2, #8]
 8003c7a:	2101      	movs	r1, #1
 8003c7c:	438a      	bics	r2, r1
 8003c7e:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2220      	movs	r2, #32
 8003c84:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2220      	movs	r2, #32
 8003c8a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2280      	movs	r2, #128	; 0x80
 8003c90:	2120      	movs	r1, #32
 8003c92:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2274      	movs	r2, #116	; 0x74
 8003c98:	2100      	movs	r1, #0
 8003c9a:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003c9c:	2303      	movs	r3, #3
 8003c9e:	e00f      	b.n	8003cc0 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	69db      	ldr	r3, [r3, #28]
 8003ca6:	68ba      	ldr	r2, [r7, #8]
 8003ca8:	401a      	ands	r2, r3
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	1ad3      	subs	r3, r2, r3
 8003cae:	425a      	negs	r2, r3
 8003cb0:	4153      	adcs	r3, r2
 8003cb2:	b2db      	uxtb	r3, r3
 8003cb4:	001a      	movs	r2, r3
 8003cb6:	1dfb      	adds	r3, r7, #7
 8003cb8:	781b      	ldrb	r3, [r3, #0]
 8003cba:	429a      	cmp	r2, r3
 8003cbc:	d091      	beq.n	8003be2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003cbe:	2300      	movs	r3, #0
}
 8003cc0:	0018      	movs	r0, r3
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	b004      	add	sp, #16
 8003cc6:	bd80      	pop	{r7, pc}
 8003cc8:	fffffe5f 	.word	0xfffffe5f

08003ccc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b082      	sub	sp, #8
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	687a      	ldr	r2, [r7, #4]
 8003cda:	6812      	ldr	r2, [r2, #0]
 8003cdc:	6812      	ldr	r2, [r2, #0]
 8003cde:	4912      	ldr	r1, [pc, #72]	; (8003d28 <UART_EndRxTransfer+0x5c>)
 8003ce0:	400a      	ands	r2, r1
 8003ce2:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	687a      	ldr	r2, [r7, #4]
 8003cea:	6812      	ldr	r2, [r2, #0]
 8003cec:	6892      	ldr	r2, [r2, #8]
 8003cee:	2101      	movs	r1, #1
 8003cf0:	438a      	bics	r2, r1
 8003cf2:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d107      	bne.n	8003d0c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	687a      	ldr	r2, [r7, #4]
 8003d02:	6812      	ldr	r2, [r2, #0]
 8003d04:	6812      	ldr	r2, [r2, #0]
 8003d06:	2110      	movs	r1, #16
 8003d08:	438a      	bics	r2, r1
 8003d0a:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2220      	movs	r2, #32
 8003d10:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2200      	movs	r2, #0
 8003d16:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003d1e:	46c0      	nop			; (mov r8, r8)
 8003d20:	46bd      	mov	sp, r7
 8003d22:	b002      	add	sp, #8
 8003d24:	bd80      	pop	{r7, pc}
 8003d26:	46c0      	nop			; (mov r8, r8)
 8003d28:	fffffedf 	.word	0xfffffedf

08003d2c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b084      	sub	sp, #16
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d38:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	225a      	movs	r2, #90	; 0x5a
 8003d3e:	2100      	movs	r1, #0
 8003d40:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2252      	movs	r2, #82	; 0x52
 8003d46:	2100      	movs	r1, #0
 8003d48:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	0018      	movs	r0, r3
 8003d4e:	f7ff fb91 	bl	8003474 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d52:	46c0      	nop			; (mov r8, r8)
 8003d54:	46bd      	mov	sp, r7
 8003d56:	b004      	add	sp, #16
 8003d58:	bd80      	pop	{r7, pc}

08003d5a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003d5a:	b580      	push	{r7, lr}
 8003d5c:	b082      	sub	sp, #8
 8003d5e:	af00      	add	r7, sp, #0
 8003d60:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	687a      	ldr	r2, [r7, #4]
 8003d68:	6812      	ldr	r2, [r2, #0]
 8003d6a:	6812      	ldr	r2, [r2, #0]
 8003d6c:	2140      	movs	r1, #64	; 0x40
 8003d6e:	438a      	bics	r2, r1
 8003d70:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2220      	movs	r2, #32
 8003d76:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	0018      	movs	r0, r3
 8003d82:	f7ff fb6f 	bl	8003464 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d86:	46c0      	nop			; (mov r8, r8)
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	b002      	add	sp, #8
 8003d8c:	bd80      	pop	{r7, pc}

08003d8e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003d8e:	b580      	push	{r7, lr}
 8003d90:	b082      	sub	sp, #8
 8003d92:	af00      	add	r7, sp, #0
 8003d94:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003d96:	46c0      	nop			; (mov r8, r8)
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	b002      	add	sp, #8
 8003d9c:	bd80      	pop	{r7, pc}
	...

08003da0 <__libc_init_array>:
 8003da0:	b570      	push	{r4, r5, r6, lr}
 8003da2:	2600      	movs	r6, #0
 8003da4:	4d0c      	ldr	r5, [pc, #48]	; (8003dd8 <__libc_init_array+0x38>)
 8003da6:	4c0d      	ldr	r4, [pc, #52]	; (8003ddc <__libc_init_array+0x3c>)
 8003da8:	1b64      	subs	r4, r4, r5
 8003daa:	10a4      	asrs	r4, r4, #2
 8003dac:	42a6      	cmp	r6, r4
 8003dae:	d109      	bne.n	8003dc4 <__libc_init_array+0x24>
 8003db0:	2600      	movs	r6, #0
 8003db2:	f000 f821 	bl	8003df8 <_init>
 8003db6:	4d0a      	ldr	r5, [pc, #40]	; (8003de0 <__libc_init_array+0x40>)
 8003db8:	4c0a      	ldr	r4, [pc, #40]	; (8003de4 <__libc_init_array+0x44>)
 8003dba:	1b64      	subs	r4, r4, r5
 8003dbc:	10a4      	asrs	r4, r4, #2
 8003dbe:	42a6      	cmp	r6, r4
 8003dc0:	d105      	bne.n	8003dce <__libc_init_array+0x2e>
 8003dc2:	bd70      	pop	{r4, r5, r6, pc}
 8003dc4:	00b3      	lsls	r3, r6, #2
 8003dc6:	58eb      	ldr	r3, [r5, r3]
 8003dc8:	4798      	blx	r3
 8003dca:	3601      	adds	r6, #1
 8003dcc:	e7ee      	b.n	8003dac <__libc_init_array+0xc>
 8003dce:	00b3      	lsls	r3, r6, #2
 8003dd0:	58eb      	ldr	r3, [r5, r3]
 8003dd2:	4798      	blx	r3
 8003dd4:	3601      	adds	r6, #1
 8003dd6:	e7f2      	b.n	8003dbe <__libc_init_array+0x1e>
 8003dd8:	08003ea8 	.word	0x08003ea8
 8003ddc:	08003ea8 	.word	0x08003ea8
 8003de0:	08003ea8 	.word	0x08003ea8
 8003de4:	08003eac 	.word	0x08003eac

08003de8 <memset>:
 8003de8:	0003      	movs	r3, r0
 8003dea:	1882      	adds	r2, r0, r2
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d100      	bne.n	8003df2 <memset+0xa>
 8003df0:	4770      	bx	lr
 8003df2:	7019      	strb	r1, [r3, #0]
 8003df4:	3301      	adds	r3, #1
 8003df6:	e7f9      	b.n	8003dec <memset+0x4>

08003df8 <_init>:
 8003df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dfa:	46c0      	nop			; (mov r8, r8)
 8003dfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003dfe:	bc08      	pop	{r3}
 8003e00:	469e      	mov	lr, r3
 8003e02:	4770      	bx	lr

08003e04 <_fini>:
 8003e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e06:	46c0      	nop			; (mov r8, r8)
 8003e08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e0a:	bc08      	pop	{r3}
 8003e0c:	469e      	mov	lr, r3
 8003e0e:	4770      	bx	lr
