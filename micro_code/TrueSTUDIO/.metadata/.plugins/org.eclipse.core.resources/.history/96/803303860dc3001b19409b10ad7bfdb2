/*
 * hal_wrapper.c
 *
 *  Created on: May 31, 2021
 *      Author: James Williams
 */

//Definitions for the pins
#include "main.h"
#include "hal_wrapper.h"

void set_left_attenuation(u8 val)
{
	//Set each bit one at a time by selecting the relevant bit in val
	HAL_GPIO_WritePin(V5L_GPIO_Port, V5L_Pin, val & (1<<4) ? GPIO_PIN_SET : GPIO_PIN_RESET);
	HAL_GPIO_WritePin(V4L_GPIO_Port, V4L_Pin, val & (1<<3) ? GPIO_PIN_SET : GPIO_PIN_RESET);
	HAL_GPIO_WritePin(V3L_GPIO_Port, V3L_Pin, val & (1<<2) ? GPIO_PIN_SET : GPIO_PIN_RESET);
	HAL_GPIO_WritePin(V2L_GPIO_Port, V2L_Pin, val & (1<<1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
	HAL_GPIO_WritePin(V1L_GPIO_Port, V1L_Pin, val & (1<<0) ? GPIO_PIN_SET : GPIO_PIN_RESET);
}

void set_right_attenuation(u8 val)
{
	HAL_GPIO_WritePin(V5R_GPIO_Port, V5R_Pin, val & (1<<4) ? GPIO_PIN_SET : GPIO_PIN_RESET);
	HAL_GPIO_WritePin(V4R_GPIO_Port, V4R_Pin, val & (1<<3) ? GPIO_PIN_SET : GPIO_PIN_RESET);
	HAL_GPIO_WritePin(V3R_GPIO_Port, V3R_Pin, val & (1<<2) ? GPIO_PIN_SET : GPIO_PIN_RESET);
	HAL_GPIO_WritePin(V2R_GPIO_Port, V2R_Pin, val & (1<<1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
	HAL_GPIO_WritePin(V1R_GPIO_Port, V1R_Pin, val & (1<<0) ? GPIO_PIN_SET : GPIO_PIN_RESET);
}

//5-bit gain setting for differential amplifier
//See data sheet for gain definitions
void set_diff_gain(u8 val)
{
	//Pull CS and SCLK low
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_RESET);

	for(int i = 0; i < 8; i = i + 1)
	{
		//If this is the last 3 bits then set them all to 0
		if(i > 4)
		{
			HAL_GPIO_WritePin(SDIO_GPIO_Port, SDIO_Pin, GPIO_PIN_RESET);
		}
		else//Otherwise start tapping out the specified gain
		{
			HAL_GPIO_WritePin(SDIO_GPIO_Port, SDIO_Pin, val & (1 << i) ? GPIO_PIN_SET : GPIO_PIN_RESET);
		}
		//Cycle the clock
		HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_SET);
		HAL_Delay(1);
		HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_RESET);
		HAL_Delay(1);
	}

	//Deselect CS
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
}

//Enables or disables output amplifier
void set_amp_enable(u8 val)
{
	//If we're enabling
	if(val)
	{
		HAL_GPIO_WritePin(VA_GPIO_Port, VA_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(VB_GPIO_Port, VB_Pin, GPIO_PIN_SET);
	}
	else
	{
		HAL_GPIO_WritePin(VA_GPIO_Port, VA_Pin, GPIO_PIN_SET);
		HAL_GPIO_WritePin(VB_GPIO_Port, VB_Pin, GPIO_PIN_RESET);
	}
}

//If sel = 0, get ADC0 else ADC1
//Returns status (0 if OK) and returns read value via pass by reference
u8 read_adc(u8 sel, u16 *val)
{

	u8 ret_val = 0;

	ADC_ChannelConfTypeDef sConfig = {0};
	sConfig.Channel = ADC_CHANNEL_0;
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
	{
		ret_val = 1;
	}

	//Start the conversion
	HAL_ADC_Start(&hadc1);
    //Poll ADC1 Perihperal & TimeOut = 1mSec
	HAL_ADC_PollForConversion(&hadc1, 1);
}







